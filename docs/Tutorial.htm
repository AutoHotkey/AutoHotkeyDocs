<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>AutoHotkey Tutorial: Macro and Hotkey Creation</title>
<link href="css/default.css" rel="stylesheet" type="text/css">
<style type="text/css">
<!--
.style1 {font-size: 133%; font-weight: bold}
-->
</style>
</head>
<body>

<h1>Tutorial and Overview</h1>


<p>This brief introduction will help you start scripting your own macros and hotkeys right away.</p>
<h2>Tutorial Contents</h2>
<ul>
  <li class="style1"><a href="#Create">Creating a script</a></li>
  <li class="style1"><a href="#Launch">Launching a program or document</a></li>
  <li class="style1"><a href="#Send">Sending keystrokes and mouse clicks</a></li>
  <li class="style1"><a href="#Activate">Activating and manipulating windows</a></li>
  <li class="style1"><a href="#Dialogs">Getting input from the user with MsgBox, InputBox, etc.</a></li>
  <li class="style1"><a href="#Variables">Using variables and the clipboard</a></li>
  <li class="style1"><a href="#Loop">Repeating a series of actions over and over</a></li>
  <li class="style1"><a href="#Files">Manipulating files and folders</a></li>
  <li class="style1"><a href="#Overview">Overview of other features</a></li>
</ul>
<h2 id="Create">Creating a script</h2>
<p>Each script is a plain text file containing commands to be executed by the program (AutoHotkey.exe). A script may also contain <a href="Hotkeys.htm">hotkeys</a> and <a href="Hotstrings.htm">hotstrings</a>, or even consist entirely of them. However, in the absence of hotkeys and hotstrings, a script will perform its commands sequentially from top to bottom the moment it is launched.</p>
<p>To create a new script:</p>
<ol>
  <li><a href="http://www.autohotkey.com/download/">Download</a> and install AutoHotkey.</li>
  <li>Right-click an empty spot on your desktop or in a folder of your choice.</li>
  <li>In the menu that appears, select <em>New -&gt; AutoHotkey Script</em>.</li>
  <li>Type a name for the file, ensuring that it ends in <strong>.ahk</strong>. For example: <code>Test.ahk</code>.</li>
  <li>Right-click the file and choose Edit Script.</li>
  <li>On a new blank line, type the following:  <code>#space::Run www.google.com</code>.</li>
</ol>
<p>In the line above, the first character &quot;#&quot; stands for the Windows key; so #space means holding down the Windows key then pressing the spacebar to activate the hotkey. The :: means that the subsequent command should be executed whenever this hotkey is pressed, in this case to go to the Google web site. To try out this script, continue as follows:</p>
<ol>
  <li>Save and close the file.</li>
  <li>Double-click the file to launch it. A new icon appears in the taskbar notification area.</li>
  <li> Hold down the Windows key and press the spacebar. A web page opens in the default browser.</li>
  <li>To exit or edit the script, right-click the green &quot;H&quot; icon in the taskbar notification area.</li>
</ol>
<p> Notes:</p>
<ul>
  <li>Multiple scripts can be running simultaneously, each with its own icon in the taskbar notification area.</li>
  <li>Each script can have multiple <a href="Hotkeys.htm">hotkeys</a> and <a href="Hotstrings.htm">hotstrings</a>.</li>
  <li>To have a script launch automatically when you start your computer, <a href="FAQ.htm#Startup">create a shortcut in the Start Menu's Startup folder</a>.</li>
</ul>
<h2 id="Launch">Launching a program or document</h2>
<p>The <a href="commands/Run.htm">Run</a> command is used to launch a program, document, URL, or shortcut. Here are some common examples:</p>
<pre>Run Notepad
Run C:\My Documents\Address List.doc
Run C:\My Documents\My Shortcut.lnk
Run www.yahoo.com
Run mailto:someone@somedomain.com</pre>
<p>A hotkey can be assigned to any of the above examples by including a <a href="Hotkeys.htm">hotkey label</a>. In the first example below, the assigned hotkey is Win+N, while in the second it is Control+Alt+C:</p>
<pre>#n::Run Notepad
^!c::Run calc.exe</pre>
<p>The above examples are known as single-line hotkeys because each consists of only one command. To have more than one command executed by a hotkey, put the first line <u>beneath</u> the hotkey definition and make the last line <code><a href="commands/Return.htm">return</a></code>. For example:</p>
<pre>#n::
Run http://www.google.com
Run Notepad.exe
return</pre>
<p>If the program or document to be run is not integrated with the system, specify its full path to get it to launch:</p>
<pre>Run %A_ProgramFiles%\Winamp\Winamp.exe</pre>
<p>In the above example, %A_ProgramFiles% is a <a href="Variables.htm#BuiltIn">built-in variable</a>. By using it rather than something like <em>C:\Program Files</em>, the script is made more portable, meaning that it would be more likely to run on other computers. Note: The names of commands and variables are not case sensitive. For example, &quot;Run&quot; is the same as &quot;run&quot;, and &quot;A_ProgramFiles&quot; is the same as &quot;a_programfiles&quot;.</p>
<p>To have the script wait for the program or document to close before continuing, use <a href="commands/Run.htm">RunWait</a> instead of Run. In the following example, the <a href="commands/MsgBox.htm">MsgBox</a> command will not execute until after the user closes Notepad:</p>
<pre>RunWait Notepad
MsgBox The user has finished (Notepad has been closed).</pre>
<p>To learn more about launching programs -- such as passing parameters, specifying the working directory, and discovering a program's exit code -- click <a href="TutorialLaunch.htm">here</a>.</p>
<h2 id="Send">Sending keystrokes and mouse clicks</h2>
<p>Keystrokes are sent to the active (foremost) window by using the <a href="commands/Send.htm">Send</a> command. In the following example, Control+Alt+S becomes a hotkey to type a signature (ensure that a window such as an editor or draft e-mail message is active before pressing this hotkey):</p>
<pre>^!s::
Send Sincerely,{Enter}John Smith
return</pre>
<p>In the above example, all characters are sent literally except {Enter}, which simulates a press of the Enter key. The next example illustrates some of the other commonly used special characters:</p>

<pre>Send ^c!{tab}pasted:^v</pre>
<p>The line above sends a Control+C followed by an Alt+Tab followed by the string &quot;pasted:&quot; followed by a Control+V. See the <a href="commands/Send.htm">Send</a> command for a complete list of special characters and keys.</p>
<p>Finally, keystrokes can also be sent in response to abbreviations you type, which are known as <a href="Hotstrings.htm">hotstrings</a>. For example, whenever you type &quot;btw&quot; followed by a space or comma, the following line will replace it with &quot;By the way&quot;:</p>
<pre>::btw::by the way</pre>
<p><u><strong><br>
Mouse Clicks</strong></u><strong>:</strong> To send a mouse click to a window it is first necessary to determine the X and Y coordinates where the click should occur. This can be done with Window Spy, which is included with AutoHotkey. The following steps apply to the Window Spy method:</p>
<ol>
  <li>Launch  Window Spy from a script's tray-icon menu or  the Start Menu.</li>
  <li>Activate the window of interest either by clicking its title bar, alt-tabbing, or other means (Window Spy will stay &quot;always on top&quot; by design).</li>
  <li>Move the mouse cursor to the desired position in the target window and  write down the mouse coordinates displayed by Window Spy (or on Windows XP and earlier, press Shift-Alt-Tab to activate Window Spy so that the &quot;frozen&quot; coordinates can be copied and pasted).</li>
  <li>Apply the coordinates discovered above to the <a href="commands/Click.htm">Click</a> command. The following example clicks the left mouse button:  <code>Click 112, 223</code>.</li>
</ol>
<p>To move the mouse without clicking, use <a href="commands/MouseMove.htm">MouseMove</a>. To drag the mouse, use <a href="commands/MouseClickDrag.htm">MouseClickDrag</a>. </p>
<h2 id="Activate">Activating and manipulating windows</h2>
<p>To activate a window (make it foremost), use <a href="commands/WinActivate.htm">WinActivate</a>.  To detect whether a window exists, use <a href="commands/IfWinExist.htm">IfWinExist</a> or <a href="commands/WinWait.htm">WinWait</a>.  The following example illustrates these commands:</p>
<pre>IfWinExist Untitled - Notepad
{
    WinActivate
}
else
{
    Run Notepad
    WinWait Untitled - Notepad
    WinActivate
}</pre>
<p>The above example first searches for any existing window whose title starts with &quot;Untitled - Notepad&quot; (case sensitive). If such a window is found, it is activated. Otherwise, Notepad is launched and the script waits for the Untitled window to appear, at which time it is activated. The above example also utilizes the <a href="misc/WinTitle.htm#LastFoundWindow">last found window</a> to avoid the need to specify the window's title to the right of each WinActivate.</p>
<p>Some of the other commonly used window commands are:</p>
<ul>
  <li>  <a href="commands/IfWinActive.htm">IfWinActive</a>: Checks if the specified window is currently active.</li>
  <li><a href="commands/WinWaitActive.htm">WinWaitActive</a>: Waits for the specified window to become active (typically used after sending a window-activating keystroke such as pressing Control-F for &quot;Find&quot;).</li>
  <li><a href="commands/WinClose.htm">WinClose</a>: Closes the specified window.</li>
  <li><a href="commands/WinMove.htm">WinMove</a>: Moves and/or resizes the specified window.</li>
  <li><a href="commands/WinMinimize.htm">WinMinimize</a>, <a href="commands/WinMaximize.htm">WinMaximize</a>, <a href="commands/WinRestore.htm">WinRestore</a>: Minimizes, maximizes, or restores the specified window, respectively.</li>
</ul>
<h2 id="Dialogs">Getting input from the user with MsgBox, InputBox, etc.</h2>
<p>The following example displays a dialog with two buttons (YES and NO):</p>
<pre><a href="commands/MsgBox.htm">MsgBox</a>, 4, , Would you like to continue?
<a href="commands/IfMsgBox.htm">IfMsgBox</a>, No
    return
<em>; Otherwise, the user picked yes.</em>
MsgBox You pressed YES.</pre>
<p>Use the <a href="commands/InputBox.htm">InputBox</a> command to prompt the user to type a string. Use <a href="commands/FileSelectFile.htm">FileSelectFile</a> or <a href="commands/FileSelectFolder.htm">FileSelectFolder</a> to have the user select a file or folder. For more advanced tasks, use the <a href="commands/Gui.htm">Gui</a> command to create custom data entry forms and user interfaces.</p>
<p>Tip: You may have noticed from the other examples that the first comma of any command may be omitted (except when the first parameter is blank or starts with := or =, or the command is alone at the top of a <a href="Scripts.htm#continuation">continuation section</a>). For example:</p>
<pre>MsgBox This is ok.
MsgBox<strong>,</strong> This is ok too (it has an explicit comma).</pre>
<h2 id="Variables">Using variables and the clipboard</h2>
<p>A <em>variable</em> is an area of memory in which the script stores text or numbers. A variable containing only digits (with an optional decimal point) is automatically interpreted as a number when a math operation or comparison requires it.</p>
<p>With the exception of local variables in <a href="Functions.htm#Locals">functions</a>, all variables are global; that is, their contents may be read or altered by any part of the script. In addition, variables are not declared; they come into existence simply by using them (and each variable starts off empty/blank).</p>
<p>To assign a string to a variable, follow these examples:</p>
<pre>MyVar1 = 123
MyVar2 = my string</pre>
To compare the contents of a variable to a number or string, follow these examples:
<pre>if MyVar2 = my string
{
    MsgBox MyVar2 contains the string &quot;my string&quot;.
}
if MyVar1 &gt;= 100
{
    MsgBox MyVar1 contains %MyVar1%, which is a number greater than or equal to 100.
}</pre>
<p>  In the MsgBox line above, notice that the second occurrence of <em>MyVar1</em> is enclosed in percent signs. This displays the contents of <em>MyVar1</em> at that position. The same technique can be used to copy the contents of one variable to another. For example:</p>
<pre>MyVarConcatenated = %MyVar1% %MyVar2%</pre>
<p>The line above stores the string &quot;123 my string&quot; (without the quotes) in the variable  MyVarConcatenated.</p>
<p>To compare the contents of a variable with that of another, consider this example:</p>
<pre>if (ItemCount &gt; ItemLimit)
{
    MsgBox The value in ItemCount, which is %ItemCount%, is greater than %ItemLimit%.
}</pre>
<p>Notice that the first line of the example above contains parentheses. The parentheses signify that the if-statement contains an <a href="Variables.htm#Expressions">expression</a>. Without them, that line would be considered a &quot;non-expression if-statement&quot;, and thus it would need percent signs around ItemLimit (such if-statements are limited to a single comparison operator; that is, they cannot contain math operators or conjunctions such as &quot;AND&quot; and &quot;OR&quot;).</p>
<p><u><strong><br>
Math</strong></u>: To perform a math operation, use the colon-equal operator (:=) to assign the result of an <a href="Variables.htm#Expressions">expression</a> to a variable as in the example below:</p>
<pre>NetPrice := Price * (1 - Discount/100)</pre>
<p>See <a href="Variables.htm#Expressions">expressions</a> for a complete list of math operators.</p>
<p><br>
<u><strong>Clipboard</strong></u>: The variable named <em>Clipboard</em> is special because it contains the current text on the Windows clipboard. Even so, it can be used as though it were a normal variable. For example, the following line would display the current contents of the clipboard:</p>
<pre>MsgBox %clipboard%</pre>
<p>To alter the clipboard, consider the following example, which replaces the current contents of the clipboard with new text:</p>
<pre>clipboard = A line of text.`r`nA second line of text.`r`n</pre>
<p>In the above, `r and `n (accent followed by the letter &quot;r&quot; or &quot;n&quot;) are used to indicate two special characters: carriage return and linefeed. These two characters start a new line of text as though the user had pressed Enter.</p>
<p>To append text to the clipboard (or any other variable), follow this example:</p>
<pre>clipboard = %clipboard% And here is the text to append.</pre>
<p>See the <a href="misc/Clipboard.htm">clipboard</a> and <a href="Variables.htm">variables</a> sections for more details.</p>
<h2 id="Loop">Repeating a series of actions over and over </h2>
<p>To perform something more than once consecutively, use a <a href="commands/Loop.htm">loop</a>. The following loop shows a <a href="commands/MsgBox.htm">MsgBox</a> three times:</p>
<pre>Loop 3
{
    MsgBox This window will be displayed three times.
}</pre>
<p>You could also specify a variable after the word Loop, which is useful in situations where the number of iterations is determined somewhere inside the script:</p>
<pre>Loop %RunCount%
{
    Run C:\Check Server Status.exe
    Sleep 60000  <em>; Wait 60 seconds.</em>
}</pre>
<p> In the above, the loop is performed the specified number of times unless RunCount contains 0, in which case the loop is skipped entirely.</p>
<p>A loop may also terminate itself when one or more conditions change. The following example clicks the left mouse button repeatedly while the user is holding down the F1 key:</p>
<pre>$F1::  <em>; Make the F1 key into a hotkey (the $ symbol facilitates the &quot;P&quot; mode of GetKeyState below).</em>
Loop  <em>; Since no number is specified with it, this is an infinite loop unless &quot;break&quot; or &quot;return&quot; is encountered inside.</em>
{
    if not GetKeyState(&quot;F1&quot;, &quot;P&quot;)  <em>; If this statement is true, the user has physically released the F1 key.</em>
        break  <em>; Break out of the loop.</em>
    <em>; Otherwise (since the above didn't &quot;break&quot;), keep clicking the mouse.</em>
    Click  <em>; Click the left mouse button at the cursor's current position.</em>
}
return</pre>
<p>In the example above, when the user releases the F1 key, the loop detects this and stops itself via the <a href="commands/Break.htm">break</a> command. <em>Break</em> causes execution to jump to the line after the loop's closing brace.</p>
<p>An alternate way to achieve the same effect is with a <a href="commands/While.htm">&quot;while&quot; loop</a>:</p>
<pre>$F1::
while GetKeyState(&quot;F1&quot;, &quot;P&quot;)  <em>; While the F1 key is being held down physically.</em>
{
    Click
}
return</pre>
<p>The examples shown above are general-purpose loops. For more specialized needs, consider one of the following loops:</p>
<p><a href="commands/LoopReadFile.htm">File-reading/writing loop</a>: Retrieves the lines in a text file, one at a time. This can be used to transform a file into a different format on a line-by-line basis. It can also be used to search for lines matching your criteria.</p>
<p><a href="commands/LoopFile.htm">Files and folders loop</a>: Retrieves the specified files or folders, one at a time. This allows an operation to be performed upon each file or folder that meets your criteria.</p>
<p><a href="commands/LoopParse.htm">Parsing loop</a>: Retrieves substrings from a string, one at a time. This allows a string such as &quot;Red,Green,Blue&quot; to be easily broken down into its three component fields.</p>
<p><a href="commands/LoopReg.htm">Registry loop</a>: Retrieves the contents of the specified registry subkey, one item at a time.</p>
<h2 id="Files">Manipulating files and folders</h2>
<p>To add text to the end of a file (or create a new file), use <a href="commands/FileAppend.htm">FileAppend</a> as shown in the following example. Note that it uses `n (linefeed) to start a new line of text afterward:</p>
<pre>FileAppend, A line of text to append.`n, C:\My Documents\My Text File.txt</pre>
<p>To overwrite an existing file, use <a href="commands/FileDelete.htm">FileDelete</a> prior to FileAppend. For example:</p>
<pre>FileDelete, C:\My Documents\My Text File.txt</pre>
<p>Some of the other commonly used file and folder commands are:</p>
<ul><li><a href="commands/FileRead.htm">FileRead</a>: Read the entire contents of a file into a variable.</li>
  <li><a href="commands/LoopReadFile.htm">File-reading Loop</a>: Retrieve the lines in a text file, one by one.</li>
  <li><a href="commands/IfExist.htm">IfExist</a>: Determine whether a file or folder exists.</li>
  <li><a href="commands/FileSelectFile.htm">FileSelectFile</a> and <a href="commands/FileSelectFolder.htm">FileSelectFolder</a>: Display a dialog for the user to pick a file or folder.</li>
  <li><a href="commands/FileDelete.htm">FileDelete</a>/<a href="commands/FileRecycle.htm">FileRecycle</a>: Delete/recycle one or more files. Use <a href="commands/FileRemoveDir.htm">FileRemoveDir</a> to delete an entire folder.</li>
  <li><a href="commands/FileCopy.htm">FileCopy</a>/<a href="commands/FileMove.htm">FileMove</a>: Copy/move one or more files. Use <a href="commands/FileCopyDir.htm">FileCopyDir</a>/<a href="commands/FileMoveDir.htm">FileMoveDir</a> to copy/move an entire folder. </li>
  <li><a href="commands/LoopFile.htm">Files-and-folders Loop</a>: Retrieve the files and folders contained in a folder, one at a time. </li>
  <li><a href="commands/FileSetAttrib.htm">FileSetAttrib</a> and <a href="commands/FileSetTime.htm">FileSetTime</a>: Change the attributes or timestamp of one or more files.</li>
  <li><a href="commands/IniRead.htm">IniRead</a>, <a href="commands/IniWrite.htm">IniWrite</a>, and <a href="commands/IniDelete.htm">IniDelete</a>: Create, access, and maintain standard-format INI files.</li>
  <li><a href="commands/RegRead.htm">RegRead</a>, <a href="commands/RegWrite.htm">RegWrite</a>, <a href="commands/RegDelete.htm">RegDelete</a>, and <a href="commands/LoopReg.htm">Registry Loop</a>: Work with the Windows registry.</li>
</ul>
<h2 id="Overview">Overview of other features</h2>
<p>See the <a href="commands/index.htm">command list</a> for an overview of every command.</p>
<p>&nbsp;</p>
</body>
</html>
