<!DOCTYPE HTML>
<html lang="en">
<head>
<title>NumGet() - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The NumGet function returns the binary number stored at the specified address+offset." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>NumGet()</h1>
<p>Returns the binary number stored at the specified address+offset.</p>
<pre class="Syntax">Number := <span class="func">NumGet</span>(VarOrAddress <span class="optional">, Offset := 0</span><span class="optional">, Type := "UPtr"</span>)</pre>

<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>VarOrAddress</dt>
  <dd>
		<p>A memory address or variable. If <em>VarOrAddress</em> is a variable such as <code>MyVar</code>, the address of the variable's string buffer is used. This is usually equivalent to passing <code>&amp;MyVar</code>, but omitting the "&amp;" performs better and ensures that the target address + offset is <a href="VarSetCapacity.htm">valid</a>.</p>
		<p><strong>Do not pass a variable reference</strong> if the variable <em>contains</em> the target address; in that case, pass an expression such as <code>MyVar+0</code>.</p>
	</dd>

  <dt>Offset</dt>
  <dd><p>An offset - in bytes - which is added to <em>VarOrAddress</em> to determine the target address.</p></dd>

  <dt>Type</dt>
  <dd>
    <p>If blank or omitted, it defaults to UPtr. Otherwise, specify UInt, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr or UPtr.</p>
    <p><em>Unsigned</em> 64-bit integers are not supported, as AutoHotkey's native integer type is Int64. Therefore, to work with numbers greater than or equal to 0x8000000000000000, omit the U prefix and interpret any negative values as large integers. For example, a value of -1 as an Int64 is really 0xFFFFFFFFFFFFFFFF if it is intended to be a UInt64. On 64-bit builds, UPtr is equivalent to Int64.</p>
    <p>Unlike DllCall(), these must be enclosed in quotes when used as literal strings.</p>
    <p>For details see <a href="DllCall.htm#types">DllCall Types</a>.</p>
  </dd>

</dl>

<h2 id="Return_Value">Return Value</h2>
<p>If the target address is invalid, an empty string is returned. However, some invalid addresses cannot be detected as such and may cause unpredictable behaviour.</p>
<p>Otherwise, the number at the specified address+offset is returned.</p>

<h2 id="General_Remarks">General Remarks</h2>
<p>If only two parameters are present, the second parameter can be either <em>Offset</em> or <em>Type</em>. For example, <code>NumGet(var, "int")</code> is valid.</p>

<h2 id="Related">Related</h2>
<p><a href="NumPut.htm">NumPut()</a>, <a href="DllCall.htm">DllCall()</a>, <a href="VarSetCapacity.htm">VarSetCapacity()</a></p>


</body>
</html>
