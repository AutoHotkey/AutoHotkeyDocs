<!DOCTYPE HTML>
<html>
<head>
<title>GUI Object</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GUI Object</h1>
<p>Provides an interface for creating and managing windows, and creating controls. Such windows can be used as data entry forms or custom user interfaces. <a href="../commands/GuiCreate.htm">GuiCreate</a> and <a href="../commands/GuiFromHwnd.htm">GuiFromHwnd</a> returns an object of this type.</p>

<h4 id="Properties">Properties:</h4>
<ul>
  <li><a href="#BackColor">BackColor</a>: Retrieves or sets the background color of the window.</li>
  <li><a href="#ClientPos">ClientPos</a>: Retrieves the position and size of the window&#39;s client area.</li>
  <li><a href="#Control">Control</a>: Retrieves the <a href="GuiControl.htm">GuiControl object</a> associated with the specified name, ClassNN or HWND.</li>
  <li><a href="#FocusedCtrl">FocusedCtrl</a>: Retrieves the <a href="GuiControl.htm">GuiControl object</a> of the GUI's focused control.</li>
  <li><a href="#Hwnd">Hwnd</a>: Retrieves the window handle (HWND) of the GUI window.</li>
  <li><a href="#MarginX">MarginX</a>: Retrieves or sets the size of horizontal margins between sides and subsequently created controls.</li>
  <li><a href="#MarginY">MarginY</a>: Retrieves or sets the size of vertical margins between sides and subsequently created controls.</li>
  <li><a href="#Menu">Menu</a>: Adds or removes a menu bar.</li>
  <li><a href="#Name">Name</a>: Retrieves or sets a custom name for the GUI window.</li>
  <li><a href="#Pos">Pos</a>: Retrieves the position and size of the window.</li>
  <li><a href="#Title">Title</a>: Retrieves or sets the GUI's title.</li>
</ul>
<h4 id="Methods">Methods:</h4>
<ul>
  <li><a href="#Add">Add</a>: Creates a control such as text, button, or checkbox.</li>
  <li><a href="#Destroy">Destroy</a>: Deletes the window.</li>
  <li><a href="#Flash">Flash</a>: Blinks the window and its taskbar button.</li>
  <li><a href="#Hide">Hide / Cancel</a>: Hides the window.</li>
  <li><a href="#Maximize">Maximize</a>: Unhides and maximizes the window.</li>
  <li><a href="#Minimize">Minimize</a>: Unhides and minimizes the window.</li>
  <li><a href="#_NewEnum">_NewEnum</a>: Allows to iterate through the GUI's controls.</li>
  <li><a href="GuiOnEvent.htm">OnEvent</a>: Registers a function or method to be called when the given event is raised.</li>
  <li><a href="#Opt">Opt</a>: Sets various options and styles for the appearance and behavior of the window.</li>
  <li><a href="#Restore">Restore</a>: Unhides and restores the window, if it was minimized or maximized beforehand.</li>
  <li><a href="#SetFont">SetFont</a>: Sets the typeface, size, style, and text color for subsequently created controls.</li>
  <li><a href="#Show">Show</a>: Displays the window. It can also minimize, maximize, or move the window.</li>
  <li><a href="#Submit">Submit</a>: Saves the user's input and optionally hides the window.</li>
</ul>

<div class="methodShort" id="Add">
<h2>Add</h2>
<p>Adds a control to the GUI window, and returns a <a href="GuiControl.htm">GuiControl object</a>.</p>
<pre class="Syntax">Gui.<span class="func">Add</span>(ControlType <span class="optional">, Options, Text</span>)</pre>
<dl>
  <dt>ControlType</dt><dd><p>This is one of the following: <a href="../commands/GuiControls.htm#Text">Text</a>, <a href="../commands/GuiControls.htm#Edit">Edit</a>, <a href="../commands/GuiControls.htm#UpDown">UpDown</a>, <a href="../commands/GuiControls.htm#Picture">Picture</a>, <a href="../commands/GuiControls.htm#Button">Button</a>, <a href="../commands/GuiControls.htm#Checkbox">Checkbox</a>, <a href="../commands/GuiControls.htm#Radio">Radio</a>, <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a>, <a href="../commands/GuiControls.htm#ListBox">ListBox</a>, <a href="../commands/ListView.htm">ListView</a>, <a href="../commands/TreeView.htm">TreeView</a>, <a href="../commands/GuiControls.htm#Link">Link</a>, <a href="../commands/GuiControls.htm#Hotkey">Hotkey</a>, <a href="../commands/GuiControls.htm#DateTime">DateTime</a>, <a href="../commands/GuiControls.htm#MonthCal">MonthCal</a>, <a href="../commands/GuiControls.htm#Slider">Slider</a>, <a href="../commands/GuiControls.htm#Progress">Progress</a>, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>, <a href="../commands/GuiControls.htm#Tab">Tab</a>, <a href="../commands/GuiControls.htm#StatusBar">StatusBar</a>, <a href="../commands/GuiControls.htm#ActiveX">ActiveX</a>, <a href="../commands/GuiControls.htm#Custom">Custom</a></p>
  <p>For example:</p>
  <pre>Gui := GuiCreate()
Gui.Add("Text",, "Please enter your name:")
Gui.AddEdit("vName")
Gui.Show</pre></dd>
  <dt>Options</dt><dd><h4 id="PosSize">Positioning and Sizing of Controls</h4>
  <p>If some dimensions and/or coordinates are omitted from <em>Options</em>, the control will be positioned relative to the previous control and/or sized automatically according to its nature and contents.</p>
  <p>The following options are supported:</p>
  <p id="R"><strong>R</strong>: Rows of text (can contain a floating point number such as R2.5). <strong>R</strong> is often preferable to specifying <strong>H</strong> (Height). If both the <strong>R</strong> and <strong>H</strong> options are present, <strong>R</strong> will take precedence. For a GroupBox, this setting is the number of controls for which to reserve space inside the box. For <a href="../commands/GuiControls.htm#DropDownList">DropDownLists</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBoxes</a>, and <a href="../commands/GuiControls.htm#ListBox">ListBoxes</a>, it is the number of items visible at one time inside the list portion of the control (but on Windows XP or later, it is often desirable to omit both the <strong>R</strong> and <strong>H</strong> options for DropDownList and ComboBox, which makes the popup list automatically take advantage of the available height of the user's desktop). For other control types, <strong>R</strong> is the number of rows of text that can visibly fit inside the control.</p>
  <p><strong>W</strong>: Width, in pixels. If omitted, the width is calculated automatically for some control types based on their contents. The other controls types have the following default widths:<br>
      Tab controls: 30 times the current font size, plus 3 times the <a href="#MarginX">X-margin</a>.<br>
      Vertical Progress Bars: Two times the current font size.<br>
      Horizontal Progress Bars, horizontal Sliders, DropDownLists, ComboBoxes, ListBoxes, GroupBoxes,  Edits, and Hotkeys: 15 times the current font size (except GroupBoxes, which multiply by 18 to provide room inside for margins).</p>
  <p><strong>H</strong>: Height, in pixels. If both the <strong>H</strong> and <strong>R</strong> options are absent, DropDownLists, ComboBoxes, ListBoxes, and empty multi-line Edit controls default to 3 rows; GroupBoxes default to 2 rows; vertical Sliders and Progress Bars default to 5 rows; horizontal Sliders default to 30 pixels (except if a thickness has been specified); horizontal Progress Bars default to 2 times the current font size; Hotkey controls default to 1 row; and Tab controls default to 10 rows. For the other control types, the height is calculated automatically based on their contents. Note that for DropDownLists and ComboBoxes, <strong>H</strong> is the combined height of the control's always-visible portion and its list portion (but even if the height is set too low, at least one item will always be visible in the list). Also, for all types of controls, specifying the number of rows via the <strong>R</strong> option is usually preferable to using <strong>H</strong> because it prevents a control from showing partial/incomplete rows of text.</p>
  <p><strong>wp+n</strong>, <strong>hp+n</strong>, <strong>wp-n</strong>, <strong>hp-n</strong> (where <strong>n</strong> is any number) can be used to set the width and/or height of a control equal to the previously added control's width or height, with an optional plus or minus adjustment. For example, <code>wp</code> would set a control's width to that of the previous control, and <code>wp-50</code> would set it equal to 50 less than that of the previous control.</p>
  <p id="XY"><strong>X</strong>: X-position. For example, specifying <code>x0 y0</code> would position the control in the upper left corner of the window's client area, which is the area beneath the title bar and menu bar (if any). If <strong>X</strong> is omitted but not <strong>Y</strong>, the control will be positioned to the right of all previously added controls, which can be thought of as starting a new "column".</p>
  <p><strong>Y</strong>: Y-position. If <strong>Y</strong> is omitted but not <strong>X</strong>, the control will be positioned beneath all previously added controls, which can be thought of as starting a new "row".</p>
  <p>Omitting either <strong>X</strong>, <strong>Y</strong> or both is useful to make a GUI layout automatically adjust to any future changes you might make to the size of controls or font. By contrast, specifying an absolute position for every control might require you to manually shift the position of all controls that lie beneath and/or to the right of a control that is being enlarged or reduced.</p>
  <p>If both <strong>X</strong> and <strong>Y</strong> are omitted, the control will be positioned beneath the previous control using a standard padding distance.</p>
  <p id="PosPlus">For <strong>X</strong> and <strong>Y</strong>, an optional plus sign can be included to position a control relative to the right or bottom edge (respectively) of the control that was previously added. For example, specifying <code>Y+10</code> would position the control 10 pixels beneath the bottom of the previous control rather than using the standard padding distance. Similarly, specifying <code>X+10</code> would position the control 10 pixels to the right of the previous control's right edge. Since negative numbers such as <code>X-10</code> are reserved for absolute positioning, to use a negative offset, include a plus sign in front of it. For example: <code>X+-10</code>.</p>
  <p id="PosPlusMargin">For <strong>X+</strong> and <strong>Y+</strong>, the letter <strong>M</strong> can be used as a substitute for the window's current <a href="#MarginX">margin</a>. For example, <strong>x+m</strong> uses the right edge of the previous control plus the standard padding distance. <strong>xp y+m</strong> positions a control below the previous control, whereas specifying an X coordinate on its own would normally imply <strong>yp</strong> by default.</p>
  <p id="xp"><strong>xp+n</strong>, <strong>yp+n</strong>, <strong>xp-n</strong>, <strong>yp-n</strong> (where <strong>n</strong> is any number) can be used to position controls relative to the previous control's upper left corner, which is often useful for enclosing controls in a <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>.</p>
  <p id="xm"><strong>xm</strong> and <strong>ym</strong> can be used to position a control at the leftmost and topmost <a href="#MarginX">margins</a> of the window, respectively (these two may also be followed by a plus/minus sign and a number). By specifying <strong>ym</strong> without any x-position at all, the control will be positioned at the top margin but to the right of all previously added controls, which can be thought of as starting a new "column". The converse is also true.</p>
  <p id="xs"><strong>xs</strong> and <strong>ys</strong>: these are similar to <strong>xm</strong> and <strong>ym</strong> except that they refer to coordinates that were saved by having previously added a control with the word <a href="#Section">Section</a> in its options (the first control of the window always starts a new section, even if that word isn't specified in its options). By specifying <strong>ys</strong> without any x-position at all, the control will be positioned at the previously saved y-position, but to the right of all controls that have been added since the most recent use of the word <a href="#Section">Section</a>; this can be thought of as starting a new column within the section. For example:</p>
  <pre>Gui := GuiCreate()
Gui.Add("Edit", "w600")  <em>; Add a fairly wide edit control at the top of the window.</em>
Gui.Add("Text", "<strong>section</strong>", "First Name:")  <em>; Save this control's position and start a new section.</em>
Gui.Add("Text",, "Last Name:")
Gui.Add("Edit", "<strong>ys</strong>")  <em>; Start a new column within this section.</em>
Gui.Add("Edit")
Gui.Show</pre>
  <p>The converse of the above (specifying <strong>xs</strong> but omitting the y-position) is also true.</p>
  <p><strong>xs</strong> and <strong>ys</strong> may optionally be followed by a plus/minus sign and a number. Also, it is possible to specify both the word <a href="#Section">Section</a> and xs/ys in a control's options; this uses the previous section for itself but establishes a new section for subsequent controls.</p>
  
  <h4 id="Events">Storing and Responding to User Input</h4>
  <p id="var"><strong>V</strong>: Sets the control's <a href="GuiControl.htm#Name">Name</a>. Specify the name immediately after the letter V, which is not included in the name. For example, specifying <code><strong>v</strong>MyEdit</code> would name the control "MyEdit".</p>
  <p id="label"><strong>Events</strong>: Event handlers (such as a function which is called automatically when the user clicks or changes a control) cannot be set within the control's <em>Options</em>. Instead, <a href="GuiOnEvent.htm">OnEvent</a> can be used to register a callback function or method for each event of interest.</p>
  
  <h4 id="OtherOptions">Controls: Common Styles and Other Options</h4>
  <p>Note: In the absence of a preceding sign, a plus sign is assumed; for example, <code>Wrap</code> is the same as <code>+Wrap</code>. By contrast, <code>-Wrap</code> would remove the word-wrapping property.</p>
  <p id="AltSubmit"><strong>AltSubmit</strong>: Uses alternate submit method. For DropDownList, ComboBox, ListBox and Tab, this causes <a href="#Submit">Gui.Submit</a> to store the position of the selected item rather than its text. If no item is selected, a ComboBox will still store the text of its edit field.</p>
  <p><strong>C</strong>: Color of text (has no effect on <a href="../commands/GuiControls.htm#Button">buttons</a>). Specify the letter C followed immediately by a color name (see <a href="../misc/Colors.htm">color chart</a>) or RGB value (the 0x prefix is optional). Examples: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
  <p id="Disabled"><strong>Disabled</strong>: Makes an input-capable control appear in a disabled state, which prevents the user from focusing or modifying its contents. Use <a href="GuiControl.htm#Enabled">GuiCtrl.Enabled</a> to enable it later. Note: To make an Edit control read-only, specify the string <code>ReadOnly</code> instead. Also, the word Disabled may optionally be followed immediately by a 0 or 1 to indicate the starting state (0 for enabled and 1 for disabled). In other words, <code>Disabled</code> and <code>"Disabled" VarContainingOne</code> are the same.</p>
  <p><strong>Hidden</strong>: The control is initially invisible. Use <a href="GuiControl.htm#Visible">GuiCtrl.<span style="color: #4280ca;">Visible</span></a> to show it later. The word Hidden may optionally be followed immediately by a 0 or 1 to indicate the starting state (0 for visible and 1 for hidden).  In other words, <code>Hidden</code> and <code>"Hidden" VarContainingOne</code> are the same.</p>
  <p><strong>Left</strong>: Left-justifies the control's text within its available width. This option affects the following controls: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime.</p>
  <p><strong>Right</strong>: Right-justifies the control's text within its available width. For checkboxes and radio buttons, this also puts the box itself on the right side of the control rather than the left. This option affects the following controls: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime, Link.</p>
  <p><strong>Center</strong>: Centers the control's text within its available width. This option affects the following controls: Text, Edit, Button, Checkbox, Radio, Slider, GroupBox.</p>
  <p id="Section"><strong>Section</strong>: Starts a new section and saves this control's position for later use with the <em>xs</em> and <em>ys</em> positioning options described <a href="#xs">above</a>.</p>
  <p id="Tabstop"><strong>Tabstop</strong>: Use <code>-Tabstop</code> (i.e. minus Tabstop) to have an input-capable control skipped over when the user presses the TAB key to navigate.</p>
  <p id="Wrap"><strong>Wrap</strong>: Enables word-wrapping of the control's contents within its available width. Since nearly all control types start off with word-wrapping enabled, use <code>-Wrap</code> to disable word-wrapping.</p>
  <p><strong>VScroll</strong>: Provides a vertical scroll bar if appropriate for this type of control.</p>
  <p><strong>HScroll</strong>: Provides a horizontal scroll bar if appropriate for this type of control. The rest of this paragraph applies to <a href="../commands/GuiControls.htm#ListBox">ListBox</a> only. The horizontal scrolling width defaults to 3 times the width of the ListBox. To specify a different scrolling width, include a number immediately after the word HScroll. For example, <code>HScroll500</code> would allow 500 pixels of scrolling inside the ListBox. However, if the specified scrolling width is smaller than the width of the ListBox, no scroll bar will be shown (though the mere presence of <em>HScroll</em> makes it possible for the horizontal scroll bar to be added later via <code>MyScrollBar.<a href="GuiControl.htm#Opt">Opt</a>("+HScroll500")</code>, which is otherwise impossible).</p>
  
  <h4>Controls: Uncommon Styles and Options</h4>
  <p id="BackgroundTrans"><strong>BackgroundTrans</strong>: Uses a transparent background, which allows any control that lies behind a Text, Picture, or GroupBox control to show through. For example, a transparent Text control displayed on top of a Picture control would make the text appear to be part of the picture. Use <code>GuiCtrl.<a href="GuiControl.htm#Opt">Opt</a>("+Background")</code> to remove this option later. See <a href="../commands/GuiControls.htm#PicAltSubmit">Picture control's AltSubmit section</a> for more information about transparent images. Known limitation: BackgroundTrans might not work properly for controls inside a <a href="../commands/GuiControls.htm#Tab">Tab control</a> that contains a <a href="../commands/ListView.htm">ListView</a>. If a control type does not support this option, an error is thrown.</p>
  <p id="Background"><strong>Background</strong><em>Color</em>: Changes the background color of the control. Replace <em>Color</em> with a color name (see <a href="../misc/Colors.htm">color chart</a>) or RGB value (the 0x prefix is optional). Examples: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. If this option is not present, a <a href="../commands/GuiControls.htm#Text">Text</a>, <a href="../commands/GuiControls.htm#Picture">Picture</a>, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>, <a href="../commands/GuiControls.htm#Checkbox">CheckBox</a>, <a href="../commands/GuiControls.htm#Radio">Radio</a>, <a href="../commands/GuiControls.htm#Slider">Slider</a>, <a href="../commands/GuiControls.htm#Tab">Tab</a> or <a href="../commands/GuiControls.htm#Link">Link</a> control initially defaults to the background color set by <a href="#BackColor">Gui.BackColor</a> (or if none or other control type, the system's default background color). Specifying <code>BackgroundDefault</code> or <code>-Background</code> applies the system's default background color. For example, a control can be restored to the default color via <code>LV.Opt("+BackgroundDefault")</code>. Using <code>+Background</code> without specifying a color reverts <code>-Background</code>. If a control type does not support this option, an error is thrown.</p>
  <p><strong>Border</strong>: Provides a thin-line border around the control. Most controls do not need this because they already have a type-specific border. When adding a border to an <em>existing</em> control, it might be necessary to increase the control's width and height by 1 pixel.</p>
  <p><strong>Theme</strong>: This option can be used to override the window's current theme setting for the newly created control. It has no effect when used on an existing control; however, this may change in a future version. See GUI's <a href="../commands/GuiCreate.htm#Theme">+/-Theme</a> option for details.</p>
  <p><strong>(Unnamed Style)</strong>: Specify a plus or minus sign followed immediately by a decimal or hexadecimal <a href="../misc/Styles.htm">style number</a>. If the sign is omitted, a plus sign is assumed.</p>
  <p><strong>(Unnamed ExStyle)</strong>: Specify a plus or minus sign followed immediately by the letter E and a decimal or hexadecimal extended style number. If the sign is omitted, a plus sign is assumed. For example, <code>E0x200</code> would add the WS_EX_CLIENTEDGE style, which provides a border with a sunken edge that might be appropriate for pictures and other controls. Although the other extended styles are not documented here (since they are rarely used), they can be discovered by searching for WS_EX_CLIENTEDGE at <a href="http://www.microsoft.com">www.microsoft.com</a>.</p></dd>
  <dt>Text</dt><dd>Depending on the specified control type, a string, number or an array.</dd>
</dl>
</div>

<div class="methodShort" id="Show">
<h2>Show</h2>
<p>By default, this makes the window visible, unminimizes it (if necessary) and <a href="../commands/WinActivate.htm">activates</a> it.</p>
<pre class="Syntax">Gui.<span class="func">Show</span>(<span class="optional">Options</span>)</pre>
<dl>
  <dt>Options</dt><dd><p>Omit the X, Y, W, and H options below to have the window retain its previous size and position. If there is no previous position, the window will be auto-centered in one or both dimensions if the X and/or Y options mentioned below are absent. If there is no previous size, the window will be auto-sized according to the size and positions of the controls it contains.</p>
  <p>Zero or more of the following strings may be present in <em>Options</em> (specify each number as decimal, not hexadecimal):</p>
  <p><strong>Wn</strong>: Specify for <strong>n</strong> the width (in pixels) of the window's client area (the client area excludes the window's borders, title bar, and <a href="#Menu">menu bar</a>).</p>
  <p><strong>Hn</strong>: Specify for <strong>n</strong> the height of the window's client area, in pixels.</p>
  <p><strong>Xn</strong>: Specify for <strong>n</strong> the window's X-position on the screen, in pixels. Position 0 is the leftmost column of pixels visible on the screen.</p>
  <p><strong>Yn</strong>: Specify for <strong>n</strong> the window's Y-position on the screen, in pixels. Position 0 is the topmost row of pixels visible on the screen.</p>
  <p><strong>Center</strong>: Centers the window horizontally and vertically on the screen.</p>
  <p><strong>xCenter</strong>: Centers the window horizontally on the screen. For example: <code>Gui.Show("xCenter y0")</code>.</p>
  <p><strong>yCenter</strong>: Centers the window vertically on the screen.</p>
  <p id="AutoSize"><strong>AutoSize</strong>: Resizes the window to accommodate only its currently visible controls. This is useful to resize the window after new controls are added, or  existing controls are resized, hidden, or unhidden. For example:<br>
    <code>Gui.Show("AutoSize Center")</code></p>
  <p><em><strong>One of the following may also be present:</strong></em></p>
  <p><strong>Minimize</strong>: Minimizes the window and activates the one beneath it.</p>
  <p><strong>Maximize</strong>: Maximizes and activates the window.</p>
  <p><strong>Restore</strong>: Unminimizes or unmaximizes the window, if necessary. The window is also shown and activated, if necessary.</p>
  <p><strong>NoActivate</strong>: Unminimizes or unmaximizes the window, if necessary. The window is also shown without activating it.</p>
  <p><strong>NA</strong>: Shows the window without activating it. If the window is minimized, it will stay that way but will probably rise higher in the z-order (which is the order seen in the alt-tab selector). If the window was previously hidden, this will probably cause it to appear on top of the active window even though the active window is not deactivated.</p>
  <p><strong>Hide</strong>: Hides the window and activates the one beneath it. This is identical in function to <a href="#Hide">Gui.Hide</a> except that it allows a hidden window to be moved or resized without showing it. For example: <code>Gui.Show("Hide x55 y66 w300 h200")</code>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Submit">
<h2>Submit</h2>
<p>Saves the contents of controls into an <a href="../Objects.htm#Usage_Associative_Arrays">associative array</a> (object) and returns it. By default, also hides the window.</p>
<pre class="Syntax">NamedCtrlContents := Gui.<span class="func">Submit</span>(<span class="optional">Hide := true</span>)</pre>
<dl>
  <dt>Hide</dt><dd>If this parameter is false, the window will not be hidden.</dd>
</dl>
<p>The returned array contains one element per control, usually like <code>array[GuiCtrl.<a href="GuiControl.htm#Name">Name</a>] := GuiCtrl.<a href="GuiControl.htm#Value">Value</a></code>, with the exceptions noted below. Only input-capable controls which support <a href="GuiControl.htm#Value">GuiCtrl.Value</a> and have been given a name are included.</p>
<p>For <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a>, <a href="../commands/GuiControls.htm#ListBox">ListBox</a> and <a href="../commands/GuiControls.htm#Tab">Tab</a>, the text of the selected item/tab is stored instead of its position number if the control <strong>lacks</strong> the <a href="#AltSubmit">AltSubmit</a> option, or if the ComboBox's text does not match a list item. Otherwise, <a href="GuiControl.htm#Value">Value</a> (the item's position number) is stored.</p>
<p id="submit-radio">If only one <a href="../commands/GuiControls.htm#Radio">Radio</a> button in a radio group has a name, Submit stores the number of the currently selected button instead of the control's <a href="GuiControl.htm#Value">Value</a>. 1 is the first radio button (according to original creation order), 2 is the second, and so on. If there is no button selected, 0 is stored.</p>
<p>Excluded because they are not input-capable: <a href="../commands/GuiControls.htm#Text">Text</a>, <a href="../commands/GuiControls.htm#Pic">Pic</a>, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>, <a href="../commands/GuiControls.htm#Button">Button</a>, <a href="../commands/GuiControls.htm#Progress">Progress</a>, <a href="../commands/GuiControls.htm#Link">Link</a>, <a href="../commands/GuiControls.htm#StatusBar">StatusBar</a>.</p>
<p>Also excluded: <a href="../commands/ListView.htm">ListView</a>, <a href="../commands/TreeView.htm">TreeView</a>, <a href="../commands/GuiControls.htm#ActiveX">ActiveX</a>, <a href="../commands/GuiControls.htm#Custom">Custom</a>.</p>
</div>

<span id="Cancel"></span><div class="methodShort" id="Hide">
<h2>Hide / Cancel</h2>
<p>Hides the window.</p>
<pre class="Syntax">Gui.<span class="func">Hide</span>()
Gui.<span class="func">Cancel</span>()</pre>
</div>

<div class="methodShort" id="Destroy">
<h2>Destroy</h2>
<p>Removes the window and all its controls, freeing the corresponding memory and system resources.</p>
<pre class="Syntax">Gui.<span class="func">Destroy</span>()</pre>
<p>Note: If the script later recreates the window, all of the window's properties such as color and font will start off at their defaults (as though the window never existed). If <code>Gui.Destroy()</code> is not used, all GUI windows are automatically destroyed when the script exits.</p>
</div>

<div class="methodShort" id="SetFont">
<h2>SetFont</h2>
<p>Sets the font typeface, size, style, and/or color for controls added to the window from this point onward.</p>
<p>Note: Omit both parameters to restore the font to the system's default GUI typeface, size, and color. Otherwise, any font attributes which are not specified will be copied from the previous font.</p>
<pre class="Syntax">Gui.<span class="func">SetFont</span>(<span class="optional">Options, FontName</span>)</pre>
<dl>
  <dt>Options</dt><dd><p>Zero or more options. Each option is either a single letter immediately followed by a value, or a single word. To specify more than one option, include a space between each. For example: <code>cBlue s12 bold</code>.</p>
  <p>The following words are supported: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u>, and norm. <em>Norm</em> returns the font to normal weight/boldness and  turns off italic, strike, and underline (but it retains the existing color and size). It is possible to use norm to turn off all attributes and then selectively turn on others. For example, specifying <code>norm italic</code> would set the font to normal then to italic.</p>
  <p><strong>C</strong>: Color name (see <a href="../misc/Colors.htm">color chart</a>) or RGB value -- or specify the word Default to return to the system's default color (black on most systems). Example values: <code>cRed</code>, <code>cFFFFAA</code>, <code>cDefault</code>. Note: <a href="../commands/GuiControls.htm#Button">Buttons</a> do not obey custom colors. Also, an individual control can be created with a font color other than the current one by including the C option. For example: <code>Gui.Add("Text", "cRed", "My Text")</code>.</p>
  <p><strong>S</strong>: Size (in points). For example: <code>s12</code> (specify decimal, not hexadecimal)</p>
  <p><strong>W</strong>: Weight (boldness), which is a number between 1 and 1000 (400 is normal and 700 is bold). For example: <code>w600</code> (specify decimal, not hexadecimal)</p>
  <p id="fontq"><strong>Q</strong>: Text rendering quality. For example: <code>q3</code>. Q should be followed by a number from the following table:</p>
  <table class="info">
    <tr>
      <td>0 = DEFAULT_QUALITY</td>
      <td>Appearance of the font does not matter.</td>
    </tr><tr>
      <td>1 = DRAFT_QUALITY</td>
      <td>Appearance of the font is less important than when the PROOF_QUALITY value is used.</td>
    </tr><tr>
      <td>2 = PROOF_QUALITY</td>
      <td>Character quality of the font is more important than exact matching of the logical-font attributes.</td>
    </tr><tr>
      <td>3 = NONANTIALIASED_QUALITY</td>
      <td>Font is never antialiased, that is, font smoothing is not done.</td>
    </tr><tr>
      <td>4 = ANTIALIASED_QUALITY</td>
      <td>Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.</td>
    </tr><tr>
      <td>5 = CLEARTYPE_QUALITY</td>
      <td>Windows XP and later: If set, text is rendered (when possible) using ClearType antialiasing method.</td>
    </tr>
  </table>
  <p>For more details of what these values mean, see <a href="http://msdn.microsoft.com/en-us/library/dd183499.aspx">MSDN: CreateFont</a>.</p>
  <p>Since the highest quality setting is usually the default, this feature is more typically used to disable anti-aliasing in specific cases where doing so makes the text clearer.</p></dd>
  <dt>FontName</dt><dd><p><em>FontName</em> may be the name of any font, such as one from the <a href="../misc/FontsStandard.htm">font table</a>. If <em>FontName</em> is omitted or does not exist on the system, the previous font's typeface will be used (or if none, the system's default GUI typeface). This behavior is useful to make a GUI window have a similar font on multiple systems, even if some of those systems lack the preferred font. For example, by using the following methods in order, Verdana will be given preference over Arial, which in turn is given preference over MS sans serif:</p>
  <pre>Gui.SetFont(, "MS sans serif")
Gui.SetFont(, "Arial")
Gui.SetFont(, "Verdana")  <em>; Preferred font.</em></pre></dd>
</dl>
<p>On a related note, the operating system offers standard dialog boxes that prompt the user to pick a font, color, or icon. These dialogs can be displayed via <a href="../commands/DllCall.htm">DllCall</a> as demonstrated at <a href="http://www.autohotkey.com/forum/topic17230.html">www.autohotkey.com/forum/topic17230.html</a>.</p>
</div>

<div class="methodShort" id="BackColor">
<h2>BackColor</h2>
<p>Retrieves or sets the background color of the window.</p>
<pre class="Syntax">RetrievedColor := Gui.BackColor</pre>
<pre class="Syntax">Gui.BackColor := NewColor</pre>
<p><em>RetrievedColor</em> is a 6-digit RGB value of the current color previously set by this property.</p>
<p><em>NewColor</em> is one of the 16 primary <a href="../misc/Colors.htm">HTML color names</a>, a hexadecimal RGB color value (the 0x prefix is optional), a pure numeric RGB color value, or the word Default for its default color. Example values: <code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>.</p>
<p>By default, the window's background color is the system's color for the face of buttons.</p>
<p>The color of the <a href="#Menu">menu bar</a> and its submenus can be changed as in this example: <code><a href="../commands/Menu.htm">Menu</a> "MyMenuBar", "Color", "White"</code>.</p>
<p>To make the background transparent, use <a href="../commands/WinSet.htm#TransColor">WinSetTransColor</a>. However, if you do this without first having assigned a custom window via <a href="#BackColor">Gui.BackColor</a>, buttons will also become transparent. To prevent this, first assign a custom color and then make that color transparent. For example:</p>
<pre>Gui.BackColor("EEAA99")
WinSetTransColor("EEAA99")</pre>
<p>To additionally remove the border and title bar from a window with a transparent background, use the following <strong>after</strong> the window has been made transparent: <code>Gui.Opt("-Caption")</code></p>
<p>To illustrate the above, there is an example of an on-screen display (OSD) near the bottom of this page.</p>
</div>

<div class="methodShort" id="MarginX">
<h2>MarginX</h2>
<p>Retrieves or sets the size of horizontal margins between sides and subsequently created controls.</p>
<pre class="Syntax">RetrievedValue := Gui.MarginX</pre>
<pre class="Syntax">Gui.MarginX := NewValue</pre>
<p><em>RetrievedValue</em> is the number of pixels of the current horizontal margin.</p>
<p><em>NewValue</em> is the number of pixels of space to leave at the left and right side of the window when auto-positioning any control that lacks an explicit <a href="#XY">X coordinate</a>. Also, the margin is used to determine the horizontal distance that separates auto-positioned controls from each other. Finally, the margin is taken into account by the first use of <a href="#Show">Gui.Show</a> to calculate the window's size (when no explicit size is specified).</p>
<p>By default, this margin is proportional to the size of the currently selected <a href="#SetFont">font</a> (1.25 times font-height for left &amp; right).</p>
</div>

<div class="methodShort" id="MarginY">
<h2>MarginY</h2>
<p>Retrieves or sets the size of vertical margins between sides and subsequently created controls.</p>
<pre class="Syntax">RetrievedValue := Gui.MarginY</pre>
<pre class="Syntax">Gui.MarginY := NewValue</pre>
<p><em>RetrievedValue</em> is the number of pixels of the current vertical margin.</p>
<p><em>NewValue</em> is the number of pixels of space to leave at the top and bottom side of the window when auto-positioning any control that lacks an explicit <a href="#XY">Y coordinate</a>. Also, the margin is used to determine the vertical distance that separates auto-positioned controls from each other. Finally, the margin is taken into account by the first use of <a href="#Show">Gui.Show</a> to calculate the window's size (when no explicit size is specified).</p>
<p>By default, this margin is proportional to the size of the currently selected <a href="#SetFont">font</a> (0.75 times font-height for top &amp; bottom).</p>
</div>

<div class="methodShort" id="Opt">
<h2>Opt</h2>
<p>Sets one or more options for the GUI window.</p>
<pre class="Syntax">Gui.<span class="func">Opt</span>(Options)
Gui.<span class="func">Options</span>(Options)</pre>
<dl>
  <dt>Options</dt><dd><p>This parameter can contain any of the <a href="../commands/GuiCreate.htm#Options">options</a> supported by <a href="../commands/GuiCreate.htm">GuiCreate</a>.</p>
  <p>For performance reasons, it is better to set all options before creating the window (that is, before any use of other methods such as <a href="#Add">Gui.Add</a>).</p></dd>
</dl>
</div>

<div class="methodShort" id="FocusedCtrl">
<h2>FocusedCtrl</h2>
<p>Retrieves the <a href="GuiControl.htm">GuiControl object</a> of the GUI's focused control.</p>
<pre class="Syntax">GuiCtrlObj := Gui.FocusedCtrl</pre>
<p>Note: To be effective, the window generally must not be minimized or hidden.</p>
</div>

<div class="methodShort" id="Menu">
<h2>Menu</h2>
<p>Attaches a menu bar to the window.</p>
<pre class="Syntax">Gui.Menu := MenuName</pre>
<p><em>MenuName</em> is the name of an ordinary menu created by the <a href="../commands/Menu.htm">Menu</a> function. For example:</p>
<pre>Menu("FileMenu", "Add", "&amp;Open<a href="../misc/EscapeChar.htm">`t</a>Ctrl+O", "MenuFileOpen")  <em>; See remarks below about Ctrl+O.</em>
Menu("FileMenu", "Add", "E&amp;xit", "MenuHandler")
Menu("FileMenu", "Add", "&amp;About", "MenuHandler")
Menu("MyMenuBar", "Add", "&amp;File", ":FileMenu")  <em>; Attach the two sub-menus that were created above.</em>
Menu("MyMenuBar", "Add", "&amp;Help", ":HelpMenu")
<strong>Gui.Menu := "MyMenuBar"</strong></pre>
<p>In the first line above, notice that <code>&amp;Open</code> is followed by <code>Ctrl+O</code> (with a tab character in between). This indicates a keyboard shortcut that the user may press instead of selecting the menu item. If the shortcut uses only the standard modifier key names Ctrl, Alt and Shift, it is automatically registered as a <em>keyboard accelerator</em> for the GUI. Single-character accelerators with no modifiers are case-sensitive and can be triggered by unusual means such as IME or Alt+NNNN.</p>
<p>If a particular key combination does not work automatically, the use of a <a href="../commands/_IfWinActive.htm">context-sensitive hotkey</a> may be required. However, such hotkeys typically cannot be triggered by <a href="../commands/Send.htm">Send</a> and are more likely to interfere with other scripts than a standard keyboard accelerator.</p>
<p>To remove a window's current menu bar, use <code>Gui.Menu := ""</code> (that is, assign an empty string).</p>
<p>Once a menu has been used as a menu bar, it should not be used as a popup menu or a submenu. This is because menu bars internally require a different format (however, this restriction applies only to the menu bar itself, not its submenus). If you need to work around this, create one menu to use as the menu bar and another identical menu to use for everything else.</p>
<p>The use of certain destructive <a href="../commands/Menu.htm">menu sub-commands</a> such as Delete and DeleteAll against a menu that is currently being used as a menu bar (and in some cases, its submenus) is not supported and will cause an error dialog to be displayed (unless <a href="../commands/Menu.htm">UseErrorLevel</a> is in effect). Use the following steps to make such changes: 1) detach the menu bar via <code>Gui.Menu := ""</code>; 2) make the changes; 3) reattach the menu bar via <code>Gui.Menu := "MyMenuBar"</code>.</p></div>

<div class="methodShort" id="Minimize">
<h2>Minimize</h2>
<p>Unhides the window (if necessary) and minimizes it.</p>
<pre class="Syntax">Gui.<span class="func">Minimize</span>()</pre>
</div>

<div class="methodShort" id="Maximize">
<h2>Maximize</h2>
<p>Unhides the window (if necessary) and maximizes it.</p>
<pre class="Syntax">Gui.<span class="func">Maximize</span>()</pre>
</div>

<div class="methodShort" id="Restore">
<h2>Restore</h2>
<p>Unhides the window (if necessary) and restores it, if it was minimized or maximized beforehand.</p>
<pre class="Syntax">Gui.<span class="func">Restore</span>()</pre>
</div>

<div class="methodShort" id="Pos">
<h2>Pos</h2>
<p>Retrieves the position and size of the window.</p>
<pre class="Syntax">PosSizeObj := Gui.Pos</pre>
<p><em>PosSizeObj</em> is an <a href="../Objects.htm">object</a> with the keys <strong>X</strong> (x coordinate), <strong>Y</strong> (y coordinate), <strong>W</strong> (width) and <strong>H</strong> (height). The coordinates are the upper left corner of the window. Width is the horizontal distance between the left and right side of the window, and height the vertical distance between the top and bottom side (in pixels).</p>
</div>

<div class="methodShort" id="ClientPos">
<h2>ClientPos</h2>
<p>Retrieves the position and size of the window's client area.</p>
<pre class="Syntax">PosSizeObj := Gui.ClientPos</pre>
<p><em>PosSizeObj</em> is an <a href="../Objects.htm">object</a> with the keys <strong>X</strong> (x coordinate), <strong>Y</strong> (y coordinate), <strong>W</strong> (width) and <strong>H</strong> (height). The coordinates are the upper left corner of the window's client area, which is the area not including title bar, menu bar, and borders. Width is the horizontal distance between the left and right side of the client area, and height the vertical distance between the top and bottom side (in pixels).</p>
</div>

<div class="methodShort" id="Flash">
<h2>Flash</h2>
<p>Blinks the window's button in the taskbar.</p>
<pre class="Syntax">Gui.<span class="func">Flash</span>(<span class="optional">Blink := true</span>)</pre>
<dl>
  <dt>Blink</dt><dd>If this parameter is omitted or true, the window's button in the taskbar will blink. This is done by inverting the color of the window's title bar and/or taskbar button (if it has one). Specify false to restore the original colors of the title bar and taskbar button (but the actual behavior might vary depending on OS version).</dd>
</dl>
<p>In the below example, the window will blink three times because each pair of flashes inverts then restores its appearance:</p>
<pre>Loop 6
{
  Gui.Flash
  Sleep 500  <em>; It's quite sensitive to this value; altering it may change the behavior in unexpected ways.</em>
}</pre>
</div>

<div class="methodShort" id="Hwnd">
<h2>Hwnd</h2>
<p>Retrieves the window handle (HWND) of the GUI window.</p>
<pre class="Syntax">CurrentHwnd := Gui.Hwnd</pre>
<p>A GUI's HWND is often used with <a href="../commands/PostMessage.htm">PostMessage</a>, <a href="../commands/PostMessage.htm">SendMessage</a>, and <a href="../commands/DllCall.htm">DllCall</a>. It can also be used directly as an <a href="../misc/WinTitle.htm#ahk_id">ahk_id WinTitle</a>.</p></div>

<div class="methodShort" id="Title">
<h2>Title</h2>
<p>Retrieves or sets the GUI's title.</p>
<pre class="Syntax">RetrievedTitle := Gui.Title</pre>
<pre class="Syntax">Gui.Title := NewTitle</pre>
</div>

<div class="methodShort" id="Name">
<h2>Name</h2>
<p>Retrieves or sets a custom name for the GUI window.</p>
<pre class="Syntax">RetrievedName := Gui.Name</pre>
<pre class="Syntax">Gui.Name := NewName</pre>
</div>

<div class="methodShort" id="Control">
<h2>Control</h2>
<p>Retrieves the <a href="GuiControl.htm">GuiControl object</a> associated with the specified name, ClassNN or HWND.</p>
<pre class="Syntax">GuiCtrlObj := Gui.Control<span class="optional">Name</span></pre>
</div>

<div class="methodShort" id="_NewEnum">
<h2>_NewEnum</h2>
<p>Allows to iterate through the GUI's controls.</p>
<pre class="Syntax">Enum := Gui._<span class="func">NewEnum</span>()</pre>
<p>Returns a new <a href="Enumerator.htm">enumerator</a> to enumerate the HWND and <a href="GuiControl.htm">GuiControl object</a> of each control inside a GUI.</p>
  <p>This method is usually not called directly, but by the <a href="../commands/For.htm">for-loop</a>. For example:</p>
  <pre>For Hwnd, GuiCtrlObj in GuiObj
  MsgBox "Control #" A_Index " is " GuiCtrlObj.ClassNN</pre>
</div>

</body>
</html>
