<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>File Object</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>File Object</h1>

<p>Provides an interface for file input/output. <a href="../commands/FileOpen.htm">FileOpen</a> returns an object of this type.</p>

<div class="methodShort" id="Read"><h2>Read</h2>
<p>Reads a string of characters from the file and advances the file pointer.</p>
<pre class="Syntax">String := File.Read([Characters])</pre>
<table class="info">
  <tr><td width="15%">Characters</td><td width="85%">The maximum number of characters to read. If omitted, the rest of the file is read and returned as one string.</td></tr>
  <tr><td><b>Returns</b></td><td>A string.</td></tr>
</table></div>

<div class="methodShort" id="Write"><h2>Write</h2>
<p>Writes a string of characters to the file and advances the file pointer.</p>
<pre class="Syntax">File.Write(String)</pre>
<table class="info">
  <tr><td width="15%">String</td><td width="85%">A string.</td></tr>
  <tr><td><b>Returns</b></td><td>The number of bytes (not characters) that were written. </td></tr>
</table></div>

<div class="methodShort" id="ReadLine"><h2>ReadLine</h2>
<p>Reads a line of text from the file and advances the file pointer.</p>
<pre class="Syntax">Line := File.ReadLine()</pre>
<table class="info">
  <tr><td width="15%"><b>Returns</b></td><td width="85%">A line of text, excluding the line ending.</td></tr>
</table></div>

<div class="methodShort" id="WriteLine"><h2>WriteLine</h2>
<p>Writes a string of characters followed by <code>`n</code> or <code>`r`n</code> depending on the flags used to open the file. Advances the file pointer.</p>
<pre class="Syntax">File.WriteLine([String])</pre>
<table class="info">
  <tr><td width="15%">String</td><td width="85%">An optional string.</td></tr>
  <tr><td><b>Returns</b></td><td>The number of bytes (not characters) that were written. </td></tr>
</table></div>

<div class="methodShort" id="ReadNum"><h2>Read<i>Num</i></h2>
<p>Reads a number from the file and advances the file pointer.</p>
<pre class="Syntax">Num := File.Read<i>NumType</i>()</pre>
<table class="info">
  <tr><td width="15%"><i>NumType</i></td><td width="85%">One of the following specified directly as part of the function name:<br>UInt, Int, Int64, Short, UShort, Char, UChar, Double, or Float.</td></tr>
  <tr><td><b>Returns</b></td><td>A number if successful, otherwise an empty string.</td></tr>
</table></div>

<div class="methodShort" id="WriteNum"><h2>Write<i>Num</i></h2>
<p>Writes a number to the file and advances the file pointer.</p>
<pre class="Syntax">File.Write<i>NumType</i>(Num)</pre>
<table class="info">
  <tr><td width="15%"><i>NumType</i></td><td width="85%">One of the following specified directly as part of the function name:<br>UInt, Int, Int64, Short, UShort, Char, UChar, Double, or Float.</td></tr>
  <tr><td>Num</td><td>A number.</td></tr>
  <tr><td><b>Returns</b></td><td>The number of bytes that were written. For instance, WriteUInt returns 4 if successful.</td></tr>
</table></div>

<div class="methodShort" id="RawRead"><h2>RawRead</h2>
<p>Read raw binary data from the file into memory.  If a var is specified, it is expanded automatically when necessary.</p>
<pre class="Syntax">File.RawRead(VarOrAddress, Bytes)</pre>
<table class="info">
  <tr><td width="15%">VarOrAddress</td><td width="85%">A variable or memory address to which the data will be copied.  Usage is similar to <a href="../commands/NumGet.htm">NumGet</a>.</td></tr>
  <tr><td>Bytes</td><td>The maximum number of bytes to read.</td></tr>
  <tr><td><b>Returns</b></td><td>The number of bytes that were read.</td></tr>
</table></div>

<div class="methodShort" id="RawWrite"><h2>RawWrite</h2>
<p>Write raw binary data to the file.</p>
<pre class="Syntax">File.RawWrite(VarOrAddress, Bytes)</pre>
<table class="info">
  <tr><td width="15%">VarOrAddress</td><td width="85%">A variable containing the data or the address of the data in memory.  Usage is similar to <a href="../commands/NumPut.htm">NumPut</a>.</td></tr>
  <tr><td>Bytes</td><td>The number of bytes to write.</td></tr>
  <tr><td><b>Returns</b></td><td>The number of bytes that were written.</td></tr>
</table></div>

<div class="methodShort" id="Seek"><h2>Seek</h2>
<p>Moves the file pointer.</p>
<pre class="Syntax">File.Seek(Distance [, Origin = 0])
File.Position := Distance
File.Pos := Distance</pre>
<table class="info">
  <tr><td width="15%">Distance</td><td width="85%">Distance to move, in bytes. Lower values are closer to the beginning of the file.</td></tr>
  <tr><td>Origin</td><td>Starting point for the file pointer move. Must be one of the following:<ul>
      <li>0 (SEEK_SET): Beginning of the file. <i>Distance</i> must be zero or greater.</li>
      <li>1 (SEEK_CUR): Current position of the file pointer.</li>
      <li>2 (SEEK_END): End of the file. <i>Distance</i> should usually be negative.</li>
    </ul>If omitted, <i>Origin</i> defaults to SEEK_END when Distance is negative and SEEK_SET otherwise.</td></tr>
  <tr><td><b>Returns</b></td><td>A non-zero value if successful, otherwise zero. </td></tr>
</table></div>

<div class="methodShort" id="Tell"><h2>Tell</h2>
<pre class="Syntax">Pos := File.Tell()
Pos := File.Position
Pos := File.Pos</pre>
<table class="info">
  <tr><td width="15%"><b>Returns</b></td><td width="85%">The current position of the file pointer, where 0 is the beginning of the file.</td></tr>
</table></div>

<div class="methodShort" id="Length"><h2>Length</h2>
<p>Retrieves or sets the size of the file.</p>
<pre class="Syntax">FileSize := File.Length
File.Length := NewSize</pre>
<table class="info">
  <tr><td width="15%">NewSize</td><td width="85%">The new size of the file, in bytes.</td></tr>
  <tr><td><b>Returns</b></td><td>The size of the file, in bytes.</td></tr>
</table></div>

<div class="methodShort" id="AtEOF"><h2>AtEOF</h2>
<pre class="Syntax">IsAtEOF := File.AtEOF</pre>
<table class="info">
  <tr><td width="15%"><b>Returns</b></td><td width="85%">A non-zero value if the file pointer has reached the end of the file, otherwise zero.</td></tr>
</table></div>

<div class="methodShort" id="Close"><h2>Close</h2>
<p>Closes the file, flushes any data in the cache to disk and releases the share locks.  Although the file is closed automatically when the object is freed, it is recommended to close the file as soon as possible.</p>
<pre class="Syntax">File.Close()</pre>
<p><i>No parameters or return value.</i></p></div>

<div class="methodShort" id="Encoding"><h2>Encoding</h2>
<p>Retrieves or sets the text encoding used by this file object.</p>
<pre class="Syntax">Encoding := File.Encoding
File.Encoding := Encoding</pre>
<table class="info">
  <tr><td width="15%">Encoding</td><td width="85%">A string in the format accepted by <a href="../commands/FileEncoding.htm">FileEncoding</a>.</td></tr>
</table></div>

<div class="methodShort" id="__Handle"><h2>__Handle</h2>
<pre class="Syntax">File.__Handle</pre>
<table class="info">
  <tr><td width="15%"><b>Returns</b></td><td width="85%">A system file handle, intended for use with DllCall. See <a href="http://msdn.microsoft.com/en-us/library/aa363858.aspx">CreateFile</a>.</td></tr>
</table></div>

</body>
</html>
