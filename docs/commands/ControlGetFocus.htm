<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>ControlGetFocus</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>ControlGetFocus</h1>

<p>Retrieves which control of the target window has input focus, if any.</p>

<pre class="Syntax">ControlGetFocus, OutputVar [, WinTitle, WinText, ExcludeTitle, ExcludeText]</pre>
<h3>Parameters</h3>
<table class="info">
  <tr> 
    <td width="15%">OutputVar</td>
    <td width="85%"><p>The name of the variable in which to store the identifier of the control, which consists of its classname followed by its sequence number within its parent window, e.g. Button12. </p>    </td>
  </tr>
  <tr>
    <td>WinTitle</td>
    <td>Identifies the window. For details and examples see <a href="../misc/WinTitle.htm">WinTitle</a></td>
  </tr>
  <tr>
    <td>WinText</td>
    <td>If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if <a href="DetectHiddenText.htm">DetectHiddenText</a> is ON.</td>
  </tr>
  <tr>
    <td>ExcludeTitle</td>
    <td>Windows whose titles include this value will not be considered.</td>
  </tr>
  <tr>
    <td>ExcludeText</td>
    <td>Windows whose text include this value will not be considered.</td>
  </tr>
</table>

<h3>ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span> This command is able to throw an exception on failure. For more information, see <a href="Catch.htm#RuntimeErrors">Runtime Errors</a>.</p>
<p> <a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to 0 if the control with input focus was successfully retrieved. Otherwise (e.g. the target window doesn't exist or none of its controls have input focus) it will be set to 1.</p>
<h3>Remarks</h3>
<p>The control retrieved by this command is the one that has keyboard focus, that is, the one that would receive keystrokes if the user were to type any.</p>
<p>The target window must be active to have a focused control. If the window is not active, <em>OutputVar</em> will be made blank.</p>
<p>If ControlGetFocus is executed repeatedly at a high frequency (i.e. every 500 ms or faster), it will probably disrupt the user's ability to double-click. One workaround is to call the OS's GetGUIThreadInfo() via <a href="DllCall.htm">DllCall</a>. For example:</p>
<pre><em>; This script retrieves the ahk_id (HWND) of the active window's focused control.
; This script requires Windows 98, NT 4.0 SP3+, or any OS more recent than those.</em>
GuiThreadInfoSize = 48
VarSetCapacity(GuiThreadInfo, GuiThreadInfoSize)
<a href="../Functions.htm#NumPut">NumPut</a>(GuiThreadInfoSize, GuiThreadInfo, 0)
if not DllCall(&quot;GetGUIThreadInfo&quot;, uint, 0, str, GuiThreadInfo)
{
    MsgBox GetGUIThreadInfo() indicated a failure.
    return
}
FocusedHWND := <a href="../Functions.htm#NumGet">NumGet</a>(GuiThreadInfo, 12)  <em>; Retrieve the hwndFocus field from the struct.</em>
MsgBox % &quot;The focused control's ahk_id (HWND) is &quot; . FocusedHWND
<em>; This ID can be used all control commands.  For example:
; ControlGetText, OutputVar,, ahk_id %FocusedHWND%</em></pre>
<p>Window titles and text are case sensitive. Hidden windows are not detected unless <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> has been turned on.</p>
<h3>Related</h3>
<p><a href="ControlFocus.htm">ControlFocus</a>, <a href="ControlMove.htm">ControlMove</a>, <a href="ControlClick.htm">ControlClick</a>, <a href="ControlGetText.htm">ControlGetText</a>, <a href="ControlSetText.htm">ControlSetText</a>, <a href="ControlSend.htm">ControlSend</a> </p>
<h3>Example</h3>
<pre class="NoIndent">ControlGetFocus, OutputVar, Untitled - Notepad
if ErrorLevel
    MsgBox, The target window doesn't exist or none of its controls has input focus.
else
    MsgBox, Control with focus = %OutputVar%</pre>

</body>
</html>
