<!DOCTYPE HTML>
<html lang="en">
<head>
<title>RegRead - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The RegRead function reads a value from the registry." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>RegRead</h1>

<p>Reads a value from the registry.</p>

<pre class="Syntax">Value := <span class="func">RegRead</span>(<span class="optional">KeyName, ValueName</span>)
</pre>
<h2>Parameters</h2>
<dl>

  <dt>KeyName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The full name of the registry key.</p>
    <p>This must start with HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CURRENT_USER, HKEY_CLASSES_ROOT, or HKEY_CURRENT_CONFIG (or the abbreviations for each of these, such as HKLM). To access a <a href="LoopReg.htm#remote">remote registry</a>, prepend the computer name and a slash, as in this example: \\workstation01\HKEY_LOCAL_MACHINE</p>
    <p><em>KeyName</em> can be omitted only if a <a href="LoopReg.htm">registry loop</a> is running, in which case it defaults to the key of the current loop item. If the item is a subkey, the full name of that subkey is used by default. If the item is a value, <em>ValueName</em> defaults to the name of that value, but can be overridden.</p>
  </dd>

  <dt>ValueName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name of the value to retrieve. If blank or omitted, the key's default value will be retrieved (except as noted above). The default value is displayed as "(Default)" by RegEdit. If there is no default value (that is, if RegEdit displays "value not set"), an empty string is returned and ErrorLevel is set to 1.</p>
  </dd>

</dl>

<h2>Return Value</h2>
<p>Type: <a href="../Concepts.htm#strings">String</a> or <a href="../Concepts.htm#numbers">Integer</a></p>
<p>This function returns a value of the specified registry key. If the value cannot be retrieved, an empty string is returned and <a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to 1.</p>

<h2>Error Handling</h2>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to 1 if there was a problem (such as a nonexistent key or value) or 0 otherwise.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a> is set to the result of the operating system's GetLastError() function.</p>
<h2>Remarks</h2>
<p>Currently only the following value types are supported: REG_SZ, REG_EXPAND_SZ, REG_MULTI_SZ, REG_DWORD, and REG_BINARY.</p>
<p>REG_DWORD values are always expressed as positive decimal numbers. If the number was intended to be negative, convert it to a signed 32-bit integer by using <code>OutputVar := OutputVar &lt;&lt; 32 &gt;&gt; 32</code> or similar.</p>
<p>When reading a REG_BINARY key the result is a string of hex characters. For example, the REG_BINARY value of 01,a9,ff,77 will be read as the string 01A9FF77.</p>
<p>When reading a REG_MULTI_SZ key, each of the components ends in a linefeed character (`n). If there are no components, an empty string is returned. See <a href="FileSelect.htm">FileSelect</a> for an example of how to extract the individual components from the return value.</p>
<p>To retrieve and operate upon multiple registry keys or values, consider using a <a href="LoopReg.htm">registry-loop</a>.</p>
<p>For details about how to access the registry of a remote computer, see the remarks in <a href="LoopReg.htm#remote">registry-loop</a>.</p>
<p>To read and write entries from the 64-bit sections of the registry in a 32-bit script or vice versa, use <a href="SetRegView.htm">SetRegView</a>.</p>

<h2>Related</h2>
<p><a href="RegDelete.htm">RegDelete</a>, <a href="RegDeleteKey.htm">RegDeleteKey</a>, <a href="RegWrite.htm">RegWrite</a>, <a href="LoopReg.htm">Registry-loop</a>, <a href="SetRegView.htm">SetRegView</a>, <a href="IniRead.htm">IniRead</a></p>

<h2>Examples</h2>

<div class="ex" id="ExProgramFiles">
<p><a href="#ExProgramFiles">#1</a>: Retrieve the path of the Program Files directory.</p>
<pre><em>; The line below ensures that the path of the 64-bit Program Files
; directory is returned if the OS is 64-bit and the script is not.</em>
<a href="SetRegView.htm">SetRegView</a> 64

ProgramFilesDir := RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion", "ProgramFilesDir")
MsgBox "Program files are in: " ProgramFilesDir

<em>; Another way to retrieve the path of the Program Files directory:</em>
ProgramFilesDir := EnvGet(<a href="../Variables.htm#Is64bitOS">A_Is64bitOS</a> ? "ProgramW6432" : "ProgramFiles")
MsgBox "Program files are in: " ProgramFilesDir
</pre>
</div>

<div class="ex" id="ExType">
<p><a href="#ExType">#2</a>: The following example retrieves the TYPE of a registry value (e.g. REG_SZ or REG_DWORD).</p>
<pre>MsgBox RegKeyType(&quot;HKCU&quot;, &quot;Environment&quot;, &quot;TEMP&quot;)
return

RegKeyType(RootKey, SubKey, ValueName)  <em>; This function returns the type of the specified value.</em>
{
    Loop Reg, RootKey "\" SubKey
        if (A_LoopRegName = ValueName)
            return A_LoopRegType
    return &quot;Error&quot;
}</pre>
</div>

</body>
</html>
