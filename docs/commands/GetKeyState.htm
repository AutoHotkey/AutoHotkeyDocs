<!DOCTYPE HTML>
<html lang="en">
<head>
<title>GetKeyState - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The GetKeyState function checks if a keyboard key or mouse/joystick button is down or up. Also retrieves joystick status." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GetKeyState</h1>

<p>Checks if a keyboard key or mouse/joystick button is down or up. Also retrieves joystick status.</p>

<pre class="Syntax">IsDown := <span class="func">GetKeyState</span>(KeyName <span class="optional">, Mode</span>)</pre>
<h2>Parameters</h2>
<dl>

  <dt>KeyName</dt>
  <dd>
      <p>Type: <a href="../Concepts.htm#strings">String</a></p>
      <p>This can be just about any single character from the keyboard or one of the key names from the <a href="../KeyList.htm">key list</a>, such as a mouse/joystick button. Examples: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1.</p>
      <p>Alternatively, an explicit virtual key code such as vkFF may be specified. This is useful in the rare case where a key has no name. The code of such a key can be determined by following the steps at the bottom of the <a href="../KeyList.htm#SpecialKeys">key list page</a>. Note that this code must be in hexadecimal.</p>
      <p><b>Known limitation:</b> This function cannot differentiate between two keys which share the same virtual key code, such as Left and NumpadLeft.</p>
  </dd>

  <dt>Mode</dt>
  <dd>
      <p>Type: <a href="../Concepts.htm#strings">String</a></p>
      <p>This parameter is ignored when retrieving joystick status.</p>
      <p>If omitted, the mode will default to that which retrieves the logical state of the key. This is the state that the OS and the active window believe the key to be in, but is not necessarily the same as the physical state.</p>
	    <p>Alternatively, one of these letters may be specified:</p>
      <p><strong>P</strong>: Retrieve the physical state (i.e. whether the user is physically holding it down). The physical state of a key or mouse button will usually be the same as the logical state unless the keyboard and/or mouse hooks are installed, in which case it will accurately reflect whether or not the user is physically holding down the key or button (as long as it was pressed down while the script was running). You can determine if your script is using the  hooks via the <a href="KeyHistory.htm">KeyHistory</a> function or menu item. You can force the hooks to be installed by adding the <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a> and/or <a href="_InstallMouseHook.htm">#InstallMouseHook</a> directives to the script.</p>
      <p><strong>T</strong>: Retrieve the toggle state (only meaningful for keys that can be toggled such as <kbd>CapsLock</kbd>, <kbd>NumLock</kbd>, <kbd>ScrollLock</kbd>, and <kbd>Insert</kbd>). A retrieved value of 1 (true) means the key is &quot;on&quot;, while 0 (false) means it's &quot;off&quot;.</p>
  </dd>

</dl>

<h2>Return Value</h2>
<p>Type: <a href="../Concepts.htm#boolean">Integer (boolean)</a>, <a href="../Concepts.htm#numbers">Float</a> or <a href="../Concepts.htm#numbers">Integer</a></p>
<p>For keyboard keys and mouse buttons, this function returns 1 (true) if the key is down (or toggled on) or 0 (false) if it is up (or toggled off).</p>
<p>When <em>KeyName</em> is a joystick axis such as JoyX, this function returns a <a href="../Concepts.htm#numbers">floating-point number</a> between 0 and 100 to indicate the joystick's position as a percentage of that axis's range of motion. This <a href="../scripts/JoystickTest.htm">test script</a> can be used to analyze your joystick(s).</p>
<p>When <em>KeyName</em> is JoyPOV, this function returns an <a href="../Concepts.htm#numbers">integer</a> between 0 and 35900. The following approximate POV values are used by many joysticks:</p>
<ul>
    <li>-1: no angle to report</li>
    <li>0: forward POV</li>
    <li>9000 (i.e. 90 degrees): right POV</li>
    <li>27000 (i.e. 270 degrees): left POV</li>
    <li>18000 (i.e. 180 degrees): backward POV</li>
</ul>

<h2>Remarks</h2>
<p>To wait for a key or mouse/joystick button to achieve a new state, it is usually easier to use <a href="KeyWait.htm">KeyWait</a> instead of a GetKeyState loop.</p>
<p>Systems with unusual keyboard drivers might be slow to update the state of their keys, especially the toggle-state of keys like <kbd>CapsLock</kbd>. A script that checks the state of such a key immediately after it changed may use <a href="Sleep.htm">Sleep</a> beforehand to give the system time to update the key state.</p>
<p>For examples of using GetKeyState with a joystick, see the <a href="../misc/RemapJoystick.htm">joystick remapping page</a> and the <a href="../scripts/JoystickMouse.htm">Joystick-To-Mouse script</a>.</p>
<h2>Related</h2>
<p><a href="GetKeyVK.htm">GetKeyVK</a>, <a href="GetKeySC.htm">GetKeySC</a>, <a href="GetKeyName.htm">GetKeyName</a>, <a href="KeyWait.htm">KeyWait</a>, <a href="../KeyList.htm">Key List</a>, <a href="../misc/RemapJoystick.htm">Joystick remapping</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="_InstallMouseHook.htm">#InstallMouseHook</a></p>

<h2>Examples</h2>

<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a></p>
<pre>state := GetKeyState("RButton")  <em>; Right mouse button.</em>
state := GetKeyState("Joy2")  <em>; The second button of the first joystick.</em>

if GetKeyState("Shift")
    MsgBox "At least one Shift key is down."
else
    MsgBox "Neither Shift key is down."

state := GetKeyState(&quot;CapsLock&quot;, &quot;T&quot;)  <em>; True if CapsLock is ON, false otherwise.</em></pre>
</div>

<div class="ex" id="ExRemap">
<p><a href="#ExRemap">#2</a>: Remapping. (This example is only for illustration because it would be easier to use the <a href="../misc/Remap.htm">built-in remapping feature</a>.) In the following hotkey, the mouse button is kept held down while NumpadAdd is down, which effectively transforms NumpadAdd into a mouse button. This method can also be used to repeat an action while the user is holding down a key or button:</p>
<pre>*NumpadAdd::
MouseClick "left",,, 1, 0, "D"  <em>; Hold down the left mouse button.</em>
Loop
{
    Sleep 10
    if !GetKeyState("NumpadAdd", "P")  <em>; The key has been released, so break out of the loop.</em>
        break
    <em>; ... insert here any other actions you want repeated.</em>
}
MouseClick "left",,, 1, 0, "U"  <em>; Release the mouse button.</em>
return</pre>
</div>

<div class="ex" id="ExJoystick">
<p><a href="#ExJoystick">#3</a>: Make joystick button behavior depend on joystick axis position:</p>
<pre>joy2:: 
JoyX := GetKeyState("JoyX")
if JoyX &gt; 75
    MsgBox "Action #1 (button pressed while joystick was pushed to the right)."
else if JoyX &lt; 25
    MsgBox "Action #2 (button pressed while joystick was pushed to the left)."
else
    MsgBox "Action #3 (button pressed while joystick was centered horizontally)."
return</pre>
</div>

<p>See the <a href="../misc/RemapJoystick.htm">joystick remapping page</a> and the <a href="../scripts/JoystickMouse.htm">Joystick-To-Mouse script</a> for other examples.</p>

</body>
</html>
