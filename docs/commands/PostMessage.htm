<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>PostMessage / SendMessage</title>
<meta name="description" content="Send messages to a window with this free macro program. PostMessage puts a message in the window's message queue, but SendMessage waits for a reply.">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>PostMessage / SendMessage</h1>

<p>Sends a message to a window or control (SendMessage additionally waits for acknowledgement).</p>

<pre class="Syntax">PostMessage, Msg [, wParam, lParam, Control, WinTitle, WinText, ExcludeTitle, ExcludeText]
SendMessage, Msg [, wParam, lParam, Control, WinTitle, WinText, ExcludeTitle, ExcludeText]</pre>
<h3>Parameters</h3>
<dl>

  <dt>Msg</dt>
  <dd><p>The message number to send. See the <a href="../misc/SendMessageList.htm">message list</a> to determine the number. </p></dd>

  <dt>wParam</dt>
  <dd><p>The first component of the message. If blank or omitted, 0 will be sent.</p></dd>

  <dt>lParam</dt>
  <dd><p>The second component of the message. If blank or omitted, 0 will be sent.</p></dd>

  <dt>Control</dt>
  <dd><p>If this parameter is blank or omitted, the message will be sent directly to the target window rather than one of its controls. Otherwise, this parameter can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a>.</p>
    <p>To operate upon a control's HWND (window handle), leave the <em>Control </em>parameter blank and specify <em>ahk_id %ControlHwnd%</em> for the <em>WinTitle</em> parameter (this also works on hidden controls even when <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> is Off). The HWND of a control is typically retrieved via <a href="ControlGet.htm#Hwnd">ControlGet Hwnd</a>, <a href="MouseGetPos.htm">MouseGetPos</a>, or <a href="DllCall.htm">DllCall</a>.</p>
    </dd>

  <dt>WinTitle</dt>
  <dd><p>The title or partial title of the target window (the matching behavior is determined by <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a>). If this and the next 3 parameters are omitted, the <a href="../LastFoundWindow.htm">Last Found Window</a> will be used. If this is the letter A and the next 3 parameters are omitted, the active window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a <a href="Process.htm">process identifier (PID)</a>, specify ahk_pid %VarContainingPID%. To use a <a href="GroupAdd.htm">window group</a>, specify ahk_group GroupName. To use a window's <a href="WinGet.htm">unique ID number</a>, specify ahk_id %VarContainingID% (also accepts a <a href="ControlGet.htm#Hwnd">control's HWND</a>). The search can be narrowed by specifying <a href="../LastFoundWindow.htm#multi">multiple criteria</a>. For example: <em>My File.txt ahk_class Notepad</em></p></dd>

  <dt>WinText</dt>
  <dd><p>If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if <a href="DetectHiddenText.htm">DetectHiddenText</a> is ON.</p></dd>

  <dt>ExcludeTitle</dt>
  <dd><p>Windows whose titles include this value will not be considered.</p></dd>

  <dt>ExcludeText</dt>
  <dd><p>Windows whose text include this value will not be considered.</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span> These commands are able to throw an exception on failure. For more information, see <a href="Catch.htm#RuntimeErrors">Runtime Errors</a>.</p>
<p>PostMessage: <a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to 1 if there was a problem such as the target window or control not existing. Otherwise, it is set to 0.</p>
<p>SendMessage: <a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to the word ERROR if there was a problem. Otherwise, it is set to the numeric result of the message, which might sometimes be a &quot;reply&quot; depending on the nature of the message and its target window. This result is an integer between 0 and 4294967295. If the result is intended to be a signed integer, a negative number can be revealed by following this example: <em>MsgReply := ErrorLevel &gt; 0x7FFFFFFF ? -(~ErrorLevel) - 1 : ErrorLevel</em></p>
<h3>Remarks</h3>
<p>These commands should be used with caution because sending a message to the wrong window (or sending an invalid message) might cause unexpected behavior or even crash the target application. This is because most applications are not designed to expect certain types of messages from external sources.</p>
<p>PostMessage places the message in the message queue associated with the target window. It does not wait for acknowledgement or reply. By contrast, SendMessage waits up to 5 seconds for the target window to process the message. If the message is not processed within this time, the command finishes and sets ErrorLevel to the word FAIL.</p>
<p>The parameters <em>Msg</em>, <em>wParam</em>, and <em>lParam</em> should all be integers between -2147483648 and 4294967295 (0xFFFFFFFF). As with all integer values in AutoHotkey, a prefix of 0x indicates a hex value. For example, 0xFF is equivalent to 255.</p>
<p>A string may be sent via <em>wParam</em> or <em>lParam</em> by specifying the address of a variable. The following example uses the <a href="../Variables.htm#amp">address operator (&amp;)</a> to do this:</p>
<pre>SendMessage, 0xC, 0, <strong>&amp;MyVar</strong>, ClassNN, WinTitle  <em>; 0XC is WM_SETTEXT</em></pre>
<p>In v1.0.43.06+, a string put into MyVar by the receiver of the message is properly recognized without the need for extra steps. However, this works only if the parameter's first character is an ampersand (&amp;); for example, <em>5+&amp;MyVar</em> would not work but <em>&amp;MyVar</em> or <em>&amp;MyVar+5</em> would work.</p>
<p>A quoted/literal string may also be sent as in the following working example (the &amp; operator should not be used in this case):</p>
<pre>Run Notepad
WinWait Untitled - Notepad
SendMessage, 0xC, 0, <strong>&quot;New Notepad Title&quot;</strong>  <em>; 0XC is WM_SETTEXT</em></pre>
<p>To send a message to all windows in the system, including those that are hidden or disabled, specify <em>ahk_id 0xFFFF</em> for <em>WinTitle</em> (0xFFFF is HWND_BROADCAST). This technique should be used only for messages intended to be broadcast, such as the following example:</p>
<pre>SendMessage, 0x1A,,,, ahk_id 0xFFFF  <em>; 0x1A is WM_SETTINGCHANGE</em></pre>
<p>To have a script receive a message, use <a href="OnMessage.htm">OnMessage()</a>.</p>
<p>See the <a href="../misc/SendMessage.htm">Message Tutorial</a> for an introduction to using these commands.</p>
<p>Window titles and text are case sensitive. Hidden windows are not detected unless <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> has been turned on.</p>

<h3>Related</h3>
<p><a href="../misc/SendMessageList.htm">Message List</a>, <a href="../misc/SendMessage.htm">Message Tutorial</a>, <a href="OnMessage.htm">OnMessage()</a>, <a href="../misc/Winamp.htm">Automating Winamp</a>, <a href="DllCall.htm">DllCall</a>, <a href="ControlSend.htm">ControlSend</a>, <a href="MenuSelect.htm">MenuSelect</a></p>
<h3>Examples</h3>
<pre class="NoIndent">#o::  <em>; Win+O hotkey that turns off the monitor.</em>
Sleep 1000  <em>; Give user a chance to release keys (in case their release would wake up the monitor again).
; Turn Monitor Off:</em>
SendMessage, 0x112, 0xF170, 2,, Program Manager  <em>; 0x112 is WM_SYSCOMMAND, 0xF170 is SC_MONITORPOWER.
; Note for the above: Use -1 in place of 2 to turn the monitor on.
; Use 1 in place of 2 to activate the monitor's low-power mode.</em>
return

<em>; Start the user's chosen screen saver:</em>
SendMessage, 0x112, 0xF140, 0,, Program Manager  <em>; 0x112 is WM_SYSCOMMAND, and 0xF140 is SC_SCREENSAVE.</em>

<em>; Scroll up by one line (for a control that has a vertical scroll bar):</em>
ControlGetFocus, control, A
SendMessage, 0x115, 0, 0, %control%, A

<em>; Scroll down by one line:</em>
ControlGetFocus, control, A
SendMessage, 0x115, 1, 0, %control%, A

<em>; Switch the active window's keyboard layout/language to English:</em>
PostMessage, 0x50, 0, 0x4090409,, A  <em>; 0x50 is WM_INPUTLANGCHANGEREQUEST.</em>

<em>; This example asks Winamp which track number is currently active:</em>
SetTitleMatchMode, 2
SendMessage, 1024, 0, 120, - Winamp
if ErrorLevel != &quot;Error&quot;
{
    ErrorLevel++  <em>; Winamp's count starts at &quot;0&quot;, so adjust by 1.</em>
    MsgBox, Track #%ErrorLevel% is active or playing.
}
<em>; See <a href="../misc/Winamp.htm">Automating Winamp</a> for more information.</em>

<em>; To find the process ID of an AHK script (an alternative to &quot;<a href="WinGet.htm">WinGet PID</a>&quot;):</em>
SetTitleMatchMode, 2
DetectHiddenWindows, on
SendMessage, 0x44, 0x405, 0, , SomeOtherScript.ahk - AutoHotkey v
MsgBox %ErrorLevel% is the process id.</pre>

</body>
</html>
