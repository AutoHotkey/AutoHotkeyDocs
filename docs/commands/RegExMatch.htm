<!DOCTYPE HTML>
<html lang="en">
<head>
<title>RegExMatch - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The RegExMatch function determines whether a string contains a pattern (regular expression)." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>RegExMatch</h1>

<p>Determines whether a string contains a pattern (regular expression).</p>

<pre class="Syntax">FoundPos := <span class="func">RegExMatch</span>(Haystack, NeedleRegEx <span class="optional">, &OutputVar, StartingPos := 1</span>)</pre>
<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>Haystack</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The string whose content is searched. This may contain binary zero.</p>
  </dd>

  <dt>NeedleRegEx</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The pattern to search for, which is a Perl-compatible regular expression (PCRE). The pattern's <a href="../misc/RegEx-QuickRef.htm#Options">options</a> (if any) must be included at the beginning of the string followed by a close-parenthesis. For example, the pattern <span class="regex"><span class="red">i)</span>abc.*123</span> would turn on the case-insensitive option and search for "abc", followed by zero or more occurrences of any character, followed by "123". If there are no options, the ")" is optional; for example, <span class="regex">)abc</span> is equivalent to <span class="regex">abc</span>.</p>
    <p>Although <em>NeedleRegEx</em> cannot contain binary zero, the pattern <code>\x00</code> can be used to match a binary zero within <em>Haystack</em>.</p>
  </dd>

  <dt>OutputVar</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>Specify a reference to a variable in which to store a <a href="#MatchObject">match object</a>, which can be used to retrieve the position, length and value of the overall match and of each <a href="../misc/RegEx-QuickRef.htm#subpat">captured subpattern</a>, if any are present.</p>
    <p>If the pattern is not found (that is, if the function returns 0), this variable is made blank.</p>
  </dd>

  <dt>StartingPos</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If <em>StartingPos</em> is omitted, it defaults to 1 (the beginning of <em>Haystack</em>). Otherwise, specify 2 to start at the second character, 3 to start at the third, and so on. If <em>StartingPos</em> is beyond the length of <em>Haystack</em>, the search starts at the empty string that lies at the end of <em>Haystack</em> (which typically results in no match).</p>
    <p>Specify a negative <em>StartingPos</em> to start at that position from the right. For example, -1 starts at the last character and -2 starts at the next-to-last character. If <em>StartingPos</em> tries to go beyond the left end of <em>Haystack</em>, all of <em>Haystack</em> is searched.</p>
    <p>Regardless of the value of <em>StartingPos</em>, the return value is always relative to the first character of <em>Haystack</em>. For example, the position of "abc" in "123abc789" is always 4.</p>
  </dd>

</dl>

<h2 id="Return_Value">Return Value</h2>
<p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>This function returns the position of the leftmost occurrence of <em>NeedleRegEx</em> in the string <em>Haystack</em>. Position 1 is the first character. Zero is returned if the pattern is not found.</p>

<h2 id="Errors">Errors</h2>
<p><strong>Syntax errors:</strong> If the pattern contains a syntax error, an <a href="../objects/Error.htm">Error</a> is thrown with a message in the following form: <em>Compile error N at offset M: description</em>. In that string, <em>N</em> is the PCRE error number, <em>M</em> is the position of the offending character inside the regular expression, and <em>description</em> is the text describing the error.</p>
<p><strong>Execution errors:</strong> If an error occurs during the <em>execution</em> of the regular expression, an <a href="../objects/Error.htm">Error</a> is thrown. The <em>Extra</em> property of the error object contains the PCRE error number. Although such errors are rare, the ones most likely to occur are "too many possible empty-string matches" (-22), "recursion too deep" (-21), and "reached match limit" (-8). If these happen, try to redesign the pattern to be more restrictive, such as replacing each * with a ?, +, or a limit like {0,3} wherever feasible.</p>

<h2 id="Options">Options</h2>
<p>See <a href="../misc/RegEx-QuickRef.htm#Options">Options</a> for modifiers such as <span class="regex"><span class="red">i)</span>abc</span>, which turns off case-sensitivity in the pattern "abc".</p>

<h2 id="MatchObject">Match Object (RegExMatchInfo)</h2>
<p>If a match is found, an object containing information about the match is stored in <em>OutputVar</em>. This object has the following methods and properties:</p>
<p><strong>Match.Pos</strong>, <strong>Match.Pos[N]</strong> or <strong>Match.Pos(N)</strong>: Returns the position of the overall match or a captured subpattern.</p>
<p><strong>Match.Len</strong>, <strong>Match.Len[N]</strong> or <strong>Match.Len(N)</strong>: Returns the length of the overall match or a captured subpattern.</p>
<p><strong>Match.Name[N]</strong> or <strong>Match.Name(N)</strong>: Returns the name of the given subpattern, if it has one.</p>
<p><strong>Match.Count</strong>: Returns the overall number of subpatterns (capturing groups), which is also the maximum value for <em>N</em>.</p>
<p><strong>Match.Mark</strong>: Returns the <em>NAME</em> of the last encountered <span class="regex">(*MARK:NAME)</span>, when applicable.</p>
<p><strong>Match[]</strong> or <strong>Match[N]</strong>: Returns the overall match or a captured subpattern.</p>
<p>All of the above allow <em>N</em> to be any of the following:</p>
<ul>
  <li>0 for the overall match.</li>
  <li>The number of a subpattern, even one that also has a name.</li>
  <li>The name of a subpattern.</li>
</ul>
<p><strong>Match.N</strong>: Shorthand for <strong>Match["N"]</strong>, where <em>N</em> is any unquoted name or number which does not conflict with a defined property (listed above). For example, <code>match.1</code> or <code>match.Year</code>.</p>
<p>The object also supports enumeration; that is, the <a href="For.htm">for-loop</a> is supported. Alternatively, use <code><a href="Loop.htm">Loop</a> Match.Count</code>.</p>

<h2 id="Performance">Performance</h2>
<p>To search for a simple substring inside a larger string, use <a href="InStr.htm">InStr</a> because it is faster than RegExMatch.</p>
<p>To improve performance, the 100 most recently used regular expressions are kept cached in memory (in compiled form).</p>
<p>The <a href="../misc/RegEx-QuickRef.htm#Study">study option (S)</a> can sometimes improve the performance of a regular expression that is used many times (such as in a loop).</p>

<h2 id="Remarks">Remarks</h2>
<p id="NamedSubPat">A subpattern may be given a name such as the word <em>Year</em> in the pattern <span class="regex">(?P&lt;Year&gt;\d{4})</span>. Such names may consist of up to 32 alphanumeric characters and underscores. Note that named subpatterns are also numbered, so if an <a href="../misc/RegEx-QuickRef.htm#subpat">unnamed subpattern</a> occurs after "Year", it would be stored in <code>OutputVar[2]</code>, not <code>OutputVar[1]</code>.</p>
<p>Most characters like abc123 can be used literally inside a regular expression. However, the characters <strong>\.*?+[{|()^$</strong> must be preceded by a backslash to be seen as literal. For example, <strong>\.</strong> is a literal period and <strong>\\</strong> is a literal backslash. Escaping can be avoided by using \Q...\E. For example: <span class="regex">\QLiteral Text\E</span>.</p>
<p>Within a regular expression, special characters such as tab and newline can be escaped with either an accent (`) or a backslash (\). For example, `t is the same as \t except when the <b>x</b> option is used.</p>
<p>To learn the basics of regular expressions (or refresh your memory of pattern syntax), see the <a href="../misc/RegEx-QuickRef.htm">RegEx Quick Reference</a>.</p>
<p>AutoHotkey's regular expressions are implemented using Perl-compatible Regular Expressions (PCRE) from <a href="http://www.pcre.org/">www.pcre.org</a>.</p>
<p>Within an <a href="../Variables.htm#Expressions">expression</a>, the <code>a <a href="../Variables.htm#regex">~=</a> b</code> can be used as shorthand for <code>RegExMatch(a, b)</code>.</p>
<h2 id="Related">Related</h2>
<p><a href="RegExReplace.htm">RegExReplace</a>, <a href="../misc/RegEx-QuickRef.htm">RegEx Quick Reference</a>, <a href="../misc/RegExCallout.htm">Regular Expression Callouts</a>, <a href="InStr.htm">InStr</a>, <a href="SubStr.htm">SubStr</a>, <a href="SetTitleMatchMode.htm#RegEx">SetTitleMatchMode RegEx</a>, <a href="https://www.autohotkey.com/forum/topic16164.html">Global matching and Grep (forum link)</a></p>
<p>Common sources of text data: <a href="FileRead.htm">FileRead</a>, <a href="Download.htm">Download</a>, <a href="../misc/A_Clipboard.htm">A_Clipboard</a>, <a href="GuiControls.htm#Edit">GUI Edit controls</a></p>

<h2 id="Examples">Examples</h2>
<p>For general RegEx examples, see the <a href="../misc/RegEx-QuickRef.htm">RegEx Quick Reference</a>.</p>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Reports 4, which is the position where the match was found.</p>
<pre>MsgBox RegExMatch("xxxabc123xyz", "abc.*xyz")</pre>
</div>

<div class="ex" id="ExDollar">
<p><a class="ex_number" href="#ExDollar"></a> Reports 7 because the $ requires the match to be at the end.</p>
<pre>MsgBox RegExMatch("abc123123", "123$")</pre>
</div>

<div class="ex" id="ExCaseInsens">
<p><a class="ex_number" href="#ExCaseInsens"></a> Reports 1 because a match was achieved via the case-insensitive option.</p>
<pre>MsgBox RegExMatch("abc123", "i)^ABC")</pre>
</div>

<div class="ex" id="ExOutputVar">
<p><a class="ex_number" href="#ExOutputVar"></a> Reports 1 and stores "XYZ" in SubPat[1].</p>
<pre>MsgBox RegExMatch("abcXYZ123", "abc(.*)123", &amp;SubPat)</pre>
</div>

<div class="ex" id="ExStartingPos">
<p><a class="ex_number" href="#ExStartingPos"></a> Reports 7 instead of 1 due to the starting position 2 instead of 1.</p>
<pre>MsgBox RegExMatch("abc123abc456", "abc\d+",, 2)</pre>
</div>

<div class="ex" id="ExObject">
<p><a class="ex_number" href="#ExObject"></a> Demonstrates the usage of the Match object.</p>
<pre>FoundPos := RegExMatch("Michiganroad 72", "(.*) (?&lt;nr&gt;\d+)", &amp;SubPat)
MsgBox SubPat.Count ": " SubPat[1] " " SubPat.Name[2] "=" SubPat.nr  <em>; Displays "2: Michiganroad nr=72"</em></pre>
</div>

<div class="ex" id="ExExtension">
<p><a class="ex_number" href="#ExExtension"></a> Retrieves the extension of a file. Note that <a href="SplitPath.htm">SplitPath</a> can also be used for this, which is more reliable.</p>
<pre>Path := "C:\Foo\Bar\Baz.txt"
RegExMatch(Path, "\w+$", &amp;Extension)
MsgBox Extension[]  <em>; Reports "txt".</em></pre>
</div>

<div class="ex" id="ExDeref">
<p><a class="ex_number" href="#ExDeref"></a> Similar to AutoHotkey v1's Transform Deref, the following function expands variable references and <a href="../misc/EscapeChar.htm">escape sequences</a> contained inside other variables. Furthermore, this example shows how to find all matches in a string rather than stopping at the first match (similar to the g flag in JavaScript's RegEx).</p>
<pre>var1 := "abc"
var2 := 123
MsgBox Deref("%var1%def%var2%")  <em>; Reports abcdef123.</em>

Deref(Str)
{
    spo := 1
    out := ""
    while (fpo:=RegexMatch(Str, "(%(.*?)%)|``(.)", &amp;m, spo))
    {
        out .= SubStr(Str, spo, fpo-spo)
        spo := fpo + StrLen(m[0])
        if (m[1])
            out .= %m[2]%
        else switch (m[3])
        {
            case "a": out .= "`a"
            case "b": out .= "`b"
            case "f": out .= "`f"
            case "n": out .= "`n"
            case "r": out .= "`r"
            case "t": out .= "`t"
            case "v": out .= "`v"
            default: out .= m[3]
        }
    }
    return out SubStr(Str, spo)
}</pre>
</div>

</body>
</html>
