<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Type - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The Type function returns the exact type of a value." />
<meta name="ahk:equiv-v1" content="AutoHotkey.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Type</h1>
<p>Returns the exact type of a value.</p>
<pre class="Syntax">Type := <span class="func">Type</span>(Value)</pre>

<h2>Return Value</h2>
<p>Type: <a href="../Concepts.htm#strings">String</a></p>
<p>This function returns the type of <em>Value</em>. For primitive values, the return value is one of the following:</p>
<ul>
  <li>String</li>
  <li>Integer</li>
  <li>Float</li>
</ul>
<p>If <em>Value</em> is an object, the return value is the object's class name.</p>
<p>For the <a href="../objects/Object.htm">Object</a> type, the class name is dynamic and is determined using an algorithm like the one below:</p>
<pre>
Object_Type(Value) {
    if ObjHasKey(Value, "__Class")  <em>; Ensures classes aren't reported as an instance of the base class.</em>
        return "Class"
    while Value := Value.base
        if ObjHasKey(Value, "__Class")
            return Value.__Class
    return "Object"
}
</pre>
<p>However, unlike this function, the Type function does not cause the object's meta-functions to be called.</p>
<p>For COM wrapper objects, the return value depends on the wrapped <a href="ComObjType.htm">variant type</a>. It is determined as follows:</p>
<pre>
ComObject_Type(obj)
{
    if ComObjType(obj) &amp; 0x2000 <em>; VT_ARRAY</em>
        return "<a href="ComObjArray.htm">ComObjArray</a>"
    if ComObjType(obj) &amp; 0x4000 <em>; VT_BYREF</em>
        return "<a href="ComObject.htm#ByRef">ComObjRef</a>"
    if (ComObjType(obj) = 9 || ComObjType(obj) = 13) <em>; VT_DISPATCH || VT_UNKNOWN</em>
        &amp;&amp; ComObjValue(obj) != 0
    {
        if (classname := <a href="ComObjType.htm">ComObjType</a>(obj, "Class")) != ""
            return classname
        if ComObjType(obj) = 9 <em>; VT_DISPATCH</em>
            return "ComObject"
    }
    return "ComObj"
}
</pre>

<h2>Remarks</h2>
<p>This function typically shouldn't be used to determine if a value is numeric, since numeric <em>strings</em> are valid in math expressions and with most built-in functions. However, in some cases the exact type of a value is more important. For instance, if <a href="NumPut.htm">NumPut</a> is passed a variable containing a pure integer (not a numeric string), the integer will be used instead of the address of the variable.</p>
<p>To check if a value can be used as a number, use the expression <code><a href="is.htm"><i>value</i> is <i>type</i></a></code>, where <em>type</em> is <code>"number"</code>, <code>"integer"</code>  or <code>"float"</code>.</p>
<p>To check for any type of object, use the expression <code><a href="is.htm"><i>value</i> is 'object'</a></code>.</p>
<p>To check if an object is derived from a particular user-defined class, use <code><a href="is.htm#Objects"><i>value</i> is <i>ClassName</i></a></code>.</p>
<p>For built-in types, the object's class cannot be referenced directly.</p>

<h2>Related</h2>
<p><a href="../Concepts.htm#values">Values</a>, <a href="../Language.htm#expressions">Expressions</a>, <a href="is.htm"><em>Value</em> is <em>Type</em></a>, <a href="Integer.htm">Integer</a>, <a href="Float.htm">Float</a>, <a href="String.htm">String</a></p>

<h2>Examples</h2>
<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a></p>
<pre>
a := 1, b := 2.0, c := "3"
MsgBox Type(a)  <em>; Integer</em>
MsgBox Type(b)  <em>; Float</em>
MsgBox Type(c)  <em>; String</em>
</pre>
</div>

</body>
</html>
