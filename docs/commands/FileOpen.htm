<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>FileOpen</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
<style>.fopt{width:4em;text-align:center}.fnum{width:4em;text-align:right}</style>
</head>
<body>

<h1>FileOpen</h1>

<p>Opens a file.</p>
<pre class="Syntax">file := FileOpen(Filename, Flags [, Encoding])</pre>

<h3>Parameters</h3>
<dl>

  <dt>Filename</dt>
  <dd><p>The path of the file to open, which is assumed to be in <a href="../Variables.htm#WorkingDir">A_WorkingDir</a> if an absolute path isn't specified.</p></dd>

  <dt>Flags</dt>
  <dd><p>Either a string of characters indicating the desired access mode followed by other options (with optional spaces or tabs in between); or a combination (sum) of numeric flags. Supported values are described in the table below.</p></dd>

  <dt>Encoding</dt>
  <dd><p>The code page to use for text I/O if the file does not contain a UTF-8 or UTF-16 <a href="http://en.wikipedia.org/wiki/Byte_order_mark">byte order mark</a>.<br> If omitted, the current value of <a href="../Variables.htm#FileEncoding">A_FileEncoding</a> is used.</p></dd>

</dl>
<h3>Flags</h3>
<p></p>
<table class="info">
  <tr><th style="width:4em"></th><th style="width:4em"></th><th style="text-align:left">Access modes (mutually-exclusive)</th></tr>
  <tr><td class="fopt">r</td><td class="fnum">0</td><td><i>Read:</i> Fails if the file doesn't exist.</td></tr>
  <tr><td class="fopt">w</td><td class="fnum">1</td><td><i>Write:</i> Creates a new file, <b style="color:red">overwriting any existing file.</b></td></tr>
  <tr><td class="fopt">a</td><td class="fnum">2</td><td><i>Append:</i> Creates a new file if the file didn't exist, otherwise moves the file pointer to the end of the file.</td></tr>
  <tr><td class="fopt">rw</td><td class="fnum">3</td><td><i>Read/Write:</i> Creates a new file if the file didn't exist.</td></tr>
  <tr><td class="fopt">h</td><td></td><td>Indicates that <i>Filename</i> is a file handle to wrap in an object. Sharing mode flags are ignored. The file handle is <b>not</b> closed automatically when the file object is destroyed and calling <a href="../objects/File.htm#Close">Close</a> has no effect. Note that <a href="../objects/File.htm#Seek">Seek</a>, <a href="../objects/File.htm#Tell">Tell</a> and <a href="../objects/File.htm#Length">Length</a> should not be used if <i>Filename</i> is a handle to a nonseeking device such as a pipe or a communications device.</td></tr>
  <tr><th></th><th></th><th style="text-align:left">Sharing mode flags</th></tr>
  <tr><td class="fopt" style="white-space:nowrap">-rwd</td><td></td><td>Locks the file for read, write and/or delete access. Any combination of <code>r</code>, <code>w</code> and <code>d</code> may be used. Specifying <code>-</code> is the same as specifying <code>-rwd</code>. If omitted entirely, the default is to share all access.</td></tr>
  <tr><td></td><td class="fnum">0</td><td>If <i>Flags</i> is numeric, the absence of sharing mode flags causes the file to be locked.</td></tr>
  <tr><td></td><td class="fnum">0x100</td><td>Shares <i>read</i> access.</td></tr>
  <tr><td></td><td class="fnum">0x200</td><td>Shares <i>write</i> access.</td></tr>
  <tr><td></td><td class="fnum">0x400</td><td>Shares <i>delete</i> access.</td></tr>
  <tr><th></th><th></th><th style="text-align:left">End of line (EOL) options</th></tr>
  <tr><td class="fopt">*</td><td class="fnum"></td><td>Disable end of line translations, which are enabled by default if <em>Flags</em> is non-numeric.</td></tr>
  <tr><td></td><td class="fnum">4</td><td>Replace <code>`r`n</code> with <code>`n</code> when reading and <code>`n</code> with <code>`r`n</code> when writing.</td></tr>
  <tr><td></td><td class="fnum">8</td><td>Replace standalone <code>`r</code> with <code>`n</code> when reading.</td></tr>
</table>

<h3>Return Value</h3>
<p>If the file is opened successfully, the return value is a <a href="../objects/File.htm">File object</a>.</p>
<p>If the function fails, the return value is 0 and <a href="../Variables.htm#LastError">A_LastError</a> contains an error code.</p>
<p>Use <code>if file</code> or <code>IsObject(file)</code> to check if the function succeeded.

<h3>Remarks</h3>
<p>When a UTF-8 or UTF-16 file is created, a byte order mark is written to the file <b>unless</b> <i>Encoding</i> (or <a href="FileEncoding.htm">A_FileEncoding</a> if <i>Encoding</i> is omitted) contains "UTF-8-RAW" or "UTF-16-RAW".</p>

<h3>Related</h3>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="../objects/File.htm">File Object</a>, <a href="FileRead.htm">FileRead</a></p>

<h3>Examples</h3>
<pre class="NoIndent"><em>; Open the script in read-only mode and read its first line:</em>
file := FileOpen(A_ScriptFullPath, "r")
MsgBox % file.ReadLine()

<em>; Open a console window for this demonstration:</em>
DllCall("AllocConsole")
<em>; Open the application's stdin/stdout handles in newline-translated mode.</em>
stdin  := FileOpen(DllCall("GetStdHandle", "int", -10, "ptr"), "h `n")
stdout := FileOpen(DllCall("GetStdHandle", "int", -11, "ptr"), "h `n")
stdout.Write("Enter your query.`n\> ")
stdout.Read(0) <em>; Flush the write buffer.</em>
query := RTrim(stdin.ReadLine(), "`n")
stdout.WriteLine("Your query was '" query "'. Have a nice day.")
stdout.Read(0) <em>; Flush the write buffer.</em>
Sleep 5000
</pre>

</body>
</html>
