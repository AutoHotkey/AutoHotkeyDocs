<!DOCTYPE HTML>
<html lang="en">
<head>
<title>FileOpen - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The FileOpen function opens a file to read specific content from it and/or to write new content into it." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<style type="text/css">.fopt{width:4em;text-align:center}.fnum{width:4em;text-align:right}</style>
</head>
<body>

<h1>FileOpen</h1>

<p>Opens a file to read specific content from it and/or to write new content into it.</p>
<pre class="Syntax">file := <span class="func">FileOpen</span>(Filename, Flags <span class="optional">, Encoding</span>)</pre>

<h2>Parameters</h2>
<dl>

  <dt>Filename</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The path of the file to open, which is assumed to be in <a href="../Variables.htm#WorkingDir">A_WorkingDir</a> if an absolute path isn't specified.</p>
    <p>Specify an asterisk (or two) as shown below to open the standard input/output/error stream:</p>
    <pre>
FileOpen("*", "r")   <em>; for stdin</em>
FileOpen("*", "w")   <em>; for stdout</em>
FileOpen("**", "w")  <em>; for stderr</em></pre>
  </dd>

  <dt>Flags</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a> or <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Either a string of characters indicating the desired access mode followed by other options (with optional spaces or tabs in between); or a combination (sum) of numeric flags. Supported values are described in the tables below.</p>
  </dd>

  <dt>Encoding</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The code page to use for text I/O if the file does not contain a UTF-8 or UTF-16 <a href="http://en.wikipedia.org/wiki/Byte_order_mark">byte order mark</a>, or if the <code>h</code> (handle) flag is used. If omitted, the current value of <a href="../Variables.htm#FileEncoding">A_FileEncoding</a> is used.</p>
  </dd>

</dl>

<h2>Flags</h2>

<h3>Access modes (mutually-exclusive)</h3>
<table class="info">
  <tr>
    <th>Flag</th>
    <th>Dec</th>
    <th>Hex</th>
    <th style="text-align:left">Description</th>
  </tr>
  <tr>
    <td class="fopt">r</td>
    <td class="fnum">0</td>
    <td class="fnum">0x0</td>
    <td><i>Read:</i> Fails if the file doesn't exist.</td>
  </tr>
  <tr>
    <td class="fopt">w</td>
    <td class="fnum">1</td>
    <td class="fnum">0x1</td>
    <td><i>Write:</i> Creates a new file, <b style="color:red">overwriting any existing file</b>.</td>
  </tr>
  <tr>
    <td class="fopt">a</td>
    <td class="fnum">2</td>
    <td class="fnum">0x2</td>
    <td><i>Append:</i> Creates a new file if the file didn't exist, otherwise moves the file pointer to the end of the file.</td>
  </tr>
  <tr>
    <td class="fopt">rw</td>
    <td class="fnum">3</td>
    <td class="fnum">0x3</td>
    <td><i>Read/Write:</i> Creates a new file if the file didn't exist.</td>
  </tr>
  <tr>
    <td class="fopt">h</td>
    <td>&nbsp;</td>
    <td class="fnum">&nbsp;</td>
    <td>Indicates that <i>Filename</i> is a file handle to wrap in an object. Sharing mode flags are ignored and the file or stream represented by the handle is not checked for a byte order mark. The file handle is <b>not</b> closed automatically when the file object is destroyed and calling <a href="../objects/File.htm#Close">Close</a> has no effect. Note that <a href="../objects/File.htm#Seek">Seek</a>, <a href="../objects/File.htm#Position">Position</a> and <a href="../objects/File.htm#Length">Length</a> should not be used if <i>Filename</i> is a handle to a nonseeking device such as a pipe or a communications device.</td>
  </tr>
</table>

<h3>Sharing mode flags</h3>
<table class="info">
  <tr>
    <th>Flag</th>
    <th>Dec</th>
    <th>Hex</th>
    <th style="text-align:left">Description</th>
  </tr>
  <tr>
    <td class="fopt" style="white-space:nowrap">-rwd</td>
    <td>&nbsp;</td>
    <td class="fnum">&nbsp;</td>
    <td>Locks the file for read, write and/or delete access. Any combination of <code>r</code>, <code>w</code> and <code>d</code> may be used. Specifying <code>-</code> is the same as specifying <code>-rwd</code>. If omitted entirely, the default is to share all access.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="fnum">0</td>
    <td class="fnum">0x0</td>
    <td>If <i>Flags</i> is numeric, the absence of sharing mode flags causes the file to be locked.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="fnum">256</td>
    <td class="fnum">0x100</td>
    <td>Shares <i>read</i> access.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="fnum">512</td>
    <td class="fnum">0x200</td>
    <td>Shares <i>write</i> access.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="fnum">1024</td>
    <td class="fnum">0x400</td>
    <td>Shares <i>delete</i> access.</td>
  </tr>
</table>

<h3>End of line (EOL) options</h3>
<table class="info">
  <tr>
    <th>Flag</th>
    <th>Dec</th>
    <th>Hex</th>
    <th style="text-align:left">Description</th>
  </tr>
  <tr>
    <td class="fopt">`n</td>
    <td class="fnum">4</td>
    <td class="fnum">0x4</td>
    <td>Replace <code>`r`n</code> with <code>`n</code> when reading and <code>`n</code> with <code>`r`n</code> when writing.</td>
  </tr>
  <tr>
    <td class="fopt">`r</td>
    <td class="fnum">8</td>
    <td class="fnum">0x8</td>
    <td>Replace standalone <code>`r</code> with <code>`n</code> when reading.</td>
  </tr>
</table>

<h2>Return Value</h2>
<p>Type: <a href="../Concepts.htm#objects">Object</a></p>
<p>If the file is opened successfully, the return value is a <a href="../Concepts.htm#references-to-objects">reference</a> to a new <a href="../objects/File.htm">File object</a>.</p>
<p>If the function fails, the return value is 0 and <a href="../Variables.htm#LastError">A_LastError</a> contains an error code.</p>
<p>Use <code>if file</code> or <code>IsObject(file)</code> to check if the function succeeded.</p>

<h2>Remarks</h2>
<p><a href="../objects/File.htm#ReadLine">File.ReadLine</a> always supports <code>`n</code>, <code>`r`n</code> and <code>`r</code> as line endings and does not include them in its return value, regardless of whether the <code>`r</code> or <code>`n</code> options are used. The options only affect translation of line endings within the text returned by <a href="../objects/File.htm#Read">File.Read</a> or written by <a href="../objects/File.htm#Write">File.Write</a> or <a href="../objects/File.htm#WriteLine">File.WriteLine</a>.</p>
<p>When a UTF-8 or UTF-16 file is created, a byte order mark is written to the file <b>unless</b> <i>Encoding</i> (or <a href="FileEncoding.htm">A_FileEncoding</a> if <i>Encoding</i> is omitted) contains <code>UTF-8-RAW</code> or <code>UTF-16-RAW</code>.</p>
<p>When a file containing a UTF-8 or UTF-16 byte order mark (BOM) is opened with read access, the BOM is excluded from the output by positioning the file pointer after it. Therefore, <code>File.Position</code> may report 3 or 2 immediately after opening the file.</p>

<h2>Related</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="../objects/File.htm">File Object</a>, <a href="FileRead.htm">FileRead</a></p>

<h2>Examples</h2>

<div class="ex" id="ExWriteRead">
<p><a href="#ExWriteRead">#1</a>: This is a working script that writes some text to a file then reads it back into memory (it provides the same functionality as <a href="DllCall.htm#ExFile">this DllCall-example</a>):</p>
<pre>FileName := FileSelect("S16",, "Create a new file:")
if (FileName = "")
    return
file := FileOpen(FileName, "w")
if !IsObject(file)
{
    MsgBox "Can't open '" FileName "' for writing."
    return
}
TestString := "This is a test string.`r`n"  <em>; When writing a file this way, use `r`n rather than `n to start a new line.</em>
file.Write(TestString)
file.Close()

<em>; Now that the file was written, read its contents back into memory.</em>
file := FileOpen(FileName, "r-d") <em>; read the file ("r"), share all access except for delete ("-d")</em>
if !IsObject(file)
{
    MsgBox "Can't open '" FileName "' for reading."
    return
}
CharsToRead := StrLen(TestString)
TestString := file.Read(CharsToRead)
file.Close()
MsgBox "The following string was read from the file: " TestString</pre>
</div>

<div class="ex" id="ExReadLine">
<p><a href="#ExReadLine">#2</a>: Opens the script in read-only mode and read its first line:</p>
<pre>file := FileOpen(A_ScriptFullPath, "r")
MsgBox file.ReadLine()</pre>
</div>

<div class="ex" id="ExStreams">
<p><a href="#ExStreams">#3</a>: Demonstrates the usage of the standard input/output streams:</p>
<pre><em>; Open a console window for this demonstration:</em>
DllCall("AllocConsole")
<em>; Open the application's stdin/stdout streams.</em>
stdin  := FileOpen("*", "r")
stdout := FileOpen("*", "w")
stdout.Write("Enter your query.`n\&gt; ")
stdout.Read(0) <em>; Flush the write buffer.</em>
query := RTrim(stdin.ReadLine(), "`n")
stdout.WriteLine("Your query was '" query "'. Have a nice day.")
stdout.Read(0) <em>; Flush the write buffer.</em>
Sleep 5000
</pre>
</div>
</body>
</html>
