<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Functions - Definition &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="Learn details about functions in general, parameters, returning values, built-in functions, variadic functions, etc." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>Functions</h1>

<h2>Table of Contents</h2>
<ul>
  <li><a href="#intro">Introduction and Simple Examples</a></li>
  <li><a href="#param">Parameters</a></li>
  <li><a href="#optional">Optional Parameters</a></li>
  <li><a href="#return">Returning Values to Caller</a></li>
  <li><a href="#Variadic">Variadic Functions</a></li>
  <li><a href="#Local">Local Variables</a></li>
  <li><a href="#DynCall">Dynamically Calling a Function</a></li>
  <li><a href="#ShortCircuit">Short-circuit Boolean Evaluation</a></li>
  <li><a href="#nested">Nested Functions</a></li>
  <li><a href="#remarks">Return, Exit, and General Remarks</a></li>
  <li><a href="#include">Using #Include to Share Functions Among Multiple Scripts</a></li>
  <li><a href="#lib">Libraries of Functions: Standard Library and User Library</a></li>
  <li><a href="#BuiltIn">Built-in Functions</a></li>
</ul>
<h2 id="intro">Introduction and Simple Examples</h2>
<p id="define">A function is similar to a subroutine (<a href="commands/Gosub.htm">Gosub</a>) except that it can accept parameters (inputs) from its caller. In addition, a function may optionally return a value to its caller. Consider the following simple function that accepts two numbers and returns their sum:</p>
<pre>Add(x, y)
{
    <a href="commands/Return.htm">return</a> x + y
}</pre>
<p>The above is known as a function <em>definition</em> because it creates a function named &quot;Add&quot; (not case sensitive) and establishes that anyone who calls it must provide exactly two parameters (x and y). To call the function, assign its result to a variable with the <strong><a href="commands/SetExpression.htm">:=</a></strong><a href="commands/SetExpression.htm"> operator</a>. For example:</p>
<pre>Var := Add(2, 3)  <em>; The number 5 will be stored in Var.</em></pre>
<p>Also, a function may be called without storing its return value:</p>
<pre>Add(2, 3)
Add 2, 3  <em>; Parentheses can be omitted if used at the start of a line.</em></pre>
<p>But in this case, any value returned by the function is discarded; so unless the function produces some effect other than its return value, the call would serve no purpose.</p>
<p>Within an expression, a function call "evaluates to" the return value of the function. The return value can be assigned to a variable as shown above, or it can be used directly as shown below:</p>
<pre>if <a href="commands/InStr.htm">InStr</a>(MyVar, &quot;fox&quot;)
    MsgBox "The variable MyVar contains the word fox."</pre>

<h2 id="param">Parameters</h2>
<p>When a function is defined, its parameters are listed in parentheses next to its name (there must be no spaces between its name and the open-parenthesis). If a function does not accept any parameters, leave the parentheses empty; for example: <code>GetCurrentTimestamp()</code>.</p>
<p id="ByRef"><strong>ByRef Parameters</strong>: From the function's point of view, parameters are essentially the same as <a href="#Local">local variables</a> unless they are defined as <em>ByRef</em> as in this example:</p>
<pre>Swap(ByRef Left, ByRef Right)
{
    temp := Left
    Left := Right
    Right := temp
}</pre>
<p>In the example above, the use of <em>ByRef</em> causes each parameter to become an alias for the variable passed in from the caller. In other words, the parameter and the caller's variable both refer to the same contents in memory. This allows the Swap function to alter the caller's variables by moving <em>Left</em>'s contents into <em>Right</em> and vice versa.</p>
<p>By contrast, if <em>ByRef</em> were not used in the example above, <em>Left</em> and <em>Right</em> would be copies of the caller's variables and thus the Swap function would have no external effect.</p>
<p>Since <a href="commands/Return.htm">return</a> can send back only one value to a function's caller, <em>ByRef</em> can be used to send back extra results. This is achieved by having the caller pass in a variable (usually empty) in which the function stores a value.</p>
<p>When passing large strings to a function, <em>ByRef</em> enhances performance and conserves memory by avoiding the need to make a copy of the string. Similarly, using <em>ByRef</em> to send a long string back to the caller usually performs better than something like <code>Return HugeString</code>.</p>
<p>If something other than a modifiable variable is passed to a ByRef parameter, the function behaves as though the keyword "ByRef" is absent. For example, <code>Swap(A_Index, i)</code> stores the value of <i>A_Index</i> in <i>i</i>, but the value assigned to <i>Left</i> is discarded once the <i>Swap</i> function returns.</p>
<p>The <a href="commands/IsByRef.htm">IsByRef</a> function can be used to determine whether the caller supplied a variable for a given ByRef parameter.</p>
<p>Known limitations:</p>
<ul>
  <li>It is not possible to pass properties of objects (such as <code>foo.bar</code>), <a href="misc/Clipboard.htm">Clipboard</a> or other <a href="Variables.htm#BuiltIn">built-in variables</a> to a function by reference. Instead, the function acts as though <em>ByRef</em> was omitted.</li>
  <li id="recurse">Although a function may call itself recursively, if it passes one of its own <a href="#Local">local variables</a> or non-ByRef parameters to itself <em>ByRef</em>, the new layer's <em>ByRef</em> parameter will refer to its own local variable of that name rather than the previous layer's. However, this issue does not occur when a function passes to itself a <a href="#Global">global variable</a>, <a href="#static">static variable</a>, or <em>ByRef</em> parameter.</li>
  <li>If a parameter in a function-call resolves to a variable (e.g. <code>Var</code> or <code>++Var</code> or <code>Var*=2</code>), other parameters to its left or right can alter that variable before it is passed to the function. For example, <code>MyFunc(Var, Var++)</code> would unexpectedly pass 1 and 0 when <em>Var</em> is initially 0, even when the function's first parameter is not <em>ByRef</em>. Since this behavior is counterintuitive, it might change in a future release.</li>
  <li>ByRef is not directly supported in functions called by COM clients, or when calling COM methods. Instead, the script receives or must pass a <a href="commands/ComObject.htm#ByRef">wrapper object</a> containing the <a href="commands/ComObjType.htm">VarType</a> and address of the value.</li>
</ul>
<h2 id="optional">Optional Parameters</h2>
<p>When defining a function, one or more of its parameters can be marked as optional. This is done by appending <code>:=</code> followed by the parameter's default value, which must be one of the following: <code>true</code>, <code>false</code>, a literal integer, a literal floating point number, or a quoted/literal string such as "fox" or "".</p>
<p>The following function has its Z parameter marked optional:</p>
<pre>Add(X, Y, Z := 0) {
    return X + Y + Z
}</pre>
<p>When the caller passes <strong>three</strong> parameters to the function above, Z's default value is ignored. But when the caller passes only <strong>two</strong> parameters, Z automatically receives the value 0.</p>
<p id="missing">It is not possible to have optional parameters isolated in the middle of the parameter list. In other words, all parameters that lie to the right of the first optional parameter must also be marked optional. However, optional parameters may be omitted from the middle of the parameter list when calling the function, as shown below:</p>
<pre>MyFunc(1,, 3)
MyFunc(X, Y:=2, Z:=0) {  <em>; Note that Z must still be optional in this case.</em>
    MsgBox X ", " Y ", " Z
}</pre>
<p id="OptionalByRef"><a href="#ByRef">ByRef parameters</a> also support default values; for example: <code>MyFunc(ByRef p1 := "")</code>. Whenever the caller omits such a parameter, the function creates a local variable to contain the default value; in other words, the function behaves as though the keyword &quot;ByRef&quot; is absent.</p>

<h2 id="return">Returning Values to Caller</h2>
<p>As described in <a href="#intro">introduction</a>, a function may optionally <a href="commands/Return.htm">return</a> a value to its caller.</p>
<pre>
MsgBox returnTest()

returnTest() {
    return 123
}
</pre>
<p>If you want to return extra results from a function, you may also use <a href="#ByRef">ByRef</a>:</p>
<pre>
returnByRef(A,B,C)
MsgBox A "," B "," C

returnByRef(ByRef val1, ByRef val2, ByRef val3)
{
    val1 := "A"
    val2 := 100
    val3 := 1.1
    return
}
</pre>
<p>Objects and Arrays can be used to return multiple values or even named values:</p>
<pre>
Test1 := returnArray1()
MsgBox Test1[1] "," Test1[2]

Test2 := returnArray2()
MsgBox Test2[1] "," Test2[2]

Test3 := returnObject()
MsgBox Test3.id "," Test3.val

returnArray1() {
    Test := [123,"ABC"]
    return Test
}

returnArray2() {
    x := 456
    y := "EFG"
    return [x, y]
}

returnObject() {
    Test := {id: 789, val: "HIJ"}
    return Test
}
</pre>
<h2 id="Variadic">Variadic Functions</h2>
<p>When defining a function, write an asterisk after the final parameter to mark the function as variadic, allowing it to receive a variable number of parameters:</p>
<pre>Join(sep, <b class="blue">params*</b>) {
    for index,param in params
        str .= param . sep
    return SubStr(str, 1, -StrLen(sep))
}
MsgBox Join("`n", "one", "two", "three")</pre>
<p>When a variadic function is called, surplus parameters can be accessed via an object which is stored in the function's final parameter. The first surplus parameter is at <code>params[1]</code>, the second at <code>params[2]</code> and so on. As it is a standard <a href="objects/Object.htm">Object</a>, <code>params.<a href="objects/Object.htm#Length">Length</a>()</code> can be used to determine the number of parameters.</p>
<p>Attempting to call a non-variadic function with more parameters than it accepts is considered an error. To permit a function to accept any number of parameters <em>without</em> creating an array to store the surplus parameters, write <code>*</code> as the final parameter (without a parameter name).</p>
<p class="warning"><strong>Note:</strong> The "variadic" parameter can only appear at the end of the formal parameter list.</p>

<h3 id="VariadicCall">Variadic Function Calls</h3>
<p>While variadic functions can <i>accept</i> a variable number of parameters, an array of parameters can be passed to <i>any</i> function by applying the same syntax to a function-call:</p>
<pre>substrings := ["one", "two", "three"]
MsgBox Join("`n", <b class="blue">substrings*</b>)</pre>
<p>Notes:</p>
<ul>
  <li>Numbering of parameters within the source array begins at 1.</li>
  <li>Optional parameters may be entirely omitted from the array.</li>
  <li>The array of parameters may contain named items when calling a user-defined function; in any other case, named items are not supported.</li>
  <li>The target function may also be variadic, in which case named items are copied even if they have no corresponding formal parameter.</li>
  <li>This syntax can also be used when calling methods or setting or retrieving properties of objects; for example, <code>Object.Property[Params*]</code>.</li>
</ul>
<p>Known limitations:</p>
<ul>
  <li>Only the right-most parameter can be expanded this way. For example, <code>MyFunc(x, y*)</code> is supported but <code>MyFunc(x*, y)</code> is not.</li>
  <li>There must not be any non-whitespace characters between the asterisk (<code>*</code>) and the symbol which ends the parameter list.</li>
</ul>
<h2 id="Locals">Local and Global Variables</h2>
<h3 id="Local">Local Variables</h3>
<p>Local variables are specific to a single function and are visible only inside that function. Consequently, a local variable may have the same name as a global variable and both will have separate contents. Separate functions may also safely use the same variable names.</p>
<p>All local variables which are not <a href="#static">static</a> are automatically freed (made empty) when the function returns, with the exception of variables which are bound to a <a href="#closures">closure</a>.</p>
<p>Built-in variables such as <a href="misc/Clipboard.htm">Clipboard</a>, <a href="misc/ErrorLevel.htm">ErrorLevel</a>, and <a href="Variables.htm#TimeIdle">A_TimeIdle</a> are never local (they can be accessed from anywhere), and cannot be redeclared.</p>
<p id="AssumeLocal">Functions are <strong>assume-local</strong> by default. Variables accessed or created inside an assume-local function are local by default, with the following exceptions:</p>
<ul>
  <li><a href="#SuperGlobal">Super-global</a> variables, including <a href="Objects.htm#Custom_Classes">classes</a>.</li>
  <li>Inside a <a href="#nested">nested function</a>, non-dynamic local and static variables created by an enclosing function may be accessed.</li>
</ul>
<p>The default may also be overridden as shown below (by declaring the variable or by changing the mode of the function).</p>
<p id="ForceLocal"><strong>Force-local mode</strong>: If the function's first line is the word "local", all variable references are assumed to be local unless they are declared as global <em>inside</em> the function. Unlike the default mode, force-local mode has the following behavior:</p>
<ul>
  <li>Super-global variables (including classes) cannot be accessed without declaring them inside the function.</li>
  <li>If the function is defined inside another function, the outer function's local and static variables cannot be accessed.</li>
  <li>The <em>LocalSameAsGlobal</em> <a href="commands/_Warn.htm">warning</a> is never raised for variables within a force-local function.</li>
</ul>

<h3 id="Global">Global variables</h3>
<p>To refer to an existing global variable inside a function (or create a new one), declare the variable as global prior to using it. For example:</p>
<pre>LogToFile(TextToLog)
{
    <strong>global</strong> LogFileName  <em>; This global variable was previously given a value somewhere outside this function.</em>
    FileAppend TextToLog "`n", LogFileName
}</pre>
<p id="AssumeGlobal"><strong>Assume-global mode</strong>: If a function needs to access or create a large number of global variables, it can be defined to assume that all its variables are global (except its parameters) by making its first line the word &quot;global&quot;. For example:</p>
<pre>SetDefaults()
{
    <strong>global</strong>
    MyGlobal := 33  <em>; Assigns 33 to a global variable, first creating the variable if necessary.</em>
    local x, y:=0, z  <em>; Local variables must be declared in this mode, otherwise they would be assumed global.</em>
}</pre>
<p>This assume-global mode can also be used by a function to create a global <a href="misc/Arrays.htm">pseudo-array</a>, such as a loop that assigns values to <code>Array%A_Index%</code>.</p>
<p id="SuperGlobal"><strong>Super-global variables</strong>: If a global declaration appears outside of any function, it takes effect for all functions by default (excluding <a href="#ForceLocal">force-local</a> functions). This avoids the need to redeclare the variable in each function. However, if a function parameter or local variable with the same name is declared, it takes precedence over the global variable. Variables created by the <a href="Objects.htm#Custom_Classes">class</a> keyword are also super-global.</p>
<h3 id="static">Static variables</h3>
<p>Static variables are always implicitly local, but differ from locals because their values are remembered between calls. For example:</p>
<pre>LogToFile(TextToLog)
{
    <strong>static</strong> LoggedLines := 0
    LoggedLines += 1  <em>; Maintain a tally locally (its value is remembered between calls).</em>
    global LogFileName
    FileAppend LoggedLines ": " TextToLog "`n", LogFileName
}</pre>
<p id="InitStatic">A static variable may be initialized on the same line as its declaration by following it with <code>:=</code> followed by any <a href="Variables.htm#Expressions">expression</a>. For example: <code>static X:=0, Y:=&quot;fox&quot;</code>. Each static variable is initialized only once. Static variables are initialized in the order that they appear in the script file, but before the script's auto-execute section.</p>
<p id="AssumeStatic"><strong>Assume-static mode</strong>: A function may be defined to assume that all its variables are static (except its parameters) by making its first line the word &quot;static&quot;. For example:</p>
<pre>GetFromStaticArray(WhichItemNumber)
{
    <strong>static</strong>
    static FirstCallToUs := true  <em>; A static declaration's initializer still runs only once (upon startup).</em>
    if FirstCallToUs  <em>; Create a static array during the first call, but not on subsequent calls.</em>
    {
        FirstCallToUs := false
        Loop 10
            StaticArray%A_Index% := &quot;Value #&quot; . A_Index
    }
    return StaticArray%WhichItemNumber%
}</pre>
<p>In assume-static mode, any variable that should not be static must be declared as local or global (with the same exceptions as for <a href="#AssumeLocal">assume-local mode</a>, unless <a href="#ForceLocal">force-local mode</a> is also in effect).</p>
<p><a href="#ForceLocal">Force-local mode</a> can be combined with assume-static mode by specifying <code>local</code> and then <code>static</code>, as shown below. This allows the function to use force-local rules but create variables as static by default.</p>
<pre>global MyVar := "This is global"
DemonstrateForceStatic()

DemonstrateForceStatic()
{
    local
    static
    MyVar := "This is static"
    ListVars
    MsgBox
}
</pre>
<h3>More about locals and globals</h3>
<p>Multiple variables may be declared on the same line by separating them with commas as in these examples:</p>
<pre>global LogFileName, MaxRetries := 5
static TotalAttempts := 0, PrevResult</pre>
<p id="DeclareInit">A local or global variable may be initialized on the same line as its declaration by following it with <code>:=</code> followed by any <a href="Variables.htm#Expressions">expression</a>. Unlike <a href="#InitStatic">static initializers</a>, the initializers of locals and globals execute every time the function is called, but only if/when the flow of control actually reaches them. In other words, a line like <code>local x := 0</code> has the same effect as writing two separate lines: <code>local x</code> followed by <code>x := 0</code>.</p>
<p>Because the words <em>local</em>, <em>global</em>, and <em>static</em> are processed immediately when the script launches, a variable cannot be conditionally declared by means of an <a href="commands/If.htm">IF statement</a>. In other words, a declaration inside an IF's or ELSE's <a href="commands/Block.htm">block</a> takes effect unconditionally for all lines between the declaration and the function's closing brace. Also note that it is not currently possible to declare a dynamic variable such as <code>global Array%i%</code>.</p>

<h2 id="DynCall">Dynamically Calling a Function</h2>
<p>A function (even a <a href="#BuiltIn">built-in function</a>) may be called dynamically via percent signs. For example, <code>%Var%(x, &quot;fox&quot;)</code> would call the function whose name or <a href="Objects.htm#Function_References">reference</a> is contained in <em>Var</em>. Similarly, <code>Func%A_Index%()</code> would call Func1() or Func2(), etc., depending on the current value of A_Index.</p>
<p><em>Var</em> in <code>%Var%()</code> can contain a function name or a <a href="objects/Functor.htm">function object</a>. If the function does not exist, the <a href="Objects.htm#Default_Base_Object">default base object</a>'s Call method is called instead (and as usual, if this method is undefined, the __Call meta-function is invoked).</p>
<p>If the function cannot be called due to one of the reasons below, an <a href="commands/Catch.htm#RuntimeErrors">exception</a> is thrown:</p>
<ul>
  <li>Calling a nonexistent function, which can often be avoided by using <code>If <a href="commands/IsFunc.htm">IsFunc</a>(VarContainingFuncName)</code>. Except for <a href="#BuiltIn">built-in functions</a>, the called function's <a href="#define">definition</a> must exist explicitly in the script by means such as <a href="commands/_Include.htm">#Include</a> or a non-dynamic call to a <a href="#lib">library function</a>.</li>
  <li>Passing too few or too many parameters, which can often be avoided by checking the function's <a href="objects/Func.htm#MinParams">MinParams</a>, <a href="objects/Func.htm#MaxParams">MaxParams</a> and <a href="objects/Func.htm#IsVariadic">IsVariadic</a> properties. However, the exception is thrown because this condition usually means that the function is being called incorrectly. The caller should generally know what each parameter means and how many there are before calling the function.</li>
</ul>
<p>Finally, a dynamic call to a function is slightly slower than a normal call because normal calls are resolved (looked up) before the script begins running.</p>

<h2 id="ShortCircuit">Short-circuit Boolean Evaluation</h2>
<p>When <em>AND, OR</em>, and the <a href="Variables.htm#ternary">ternary operator</a> are used within an <a href="Variables.htm#Expressions">expression</a>, they short-circuit to enhance performance (regardless of whether any function calls are present). Short-circuiting operates by refusing to evaluate parts of an expression that cannot possibly affect its final result. To illustrate the concept, consider this example:</p>
<pre>if (ColorName != &quot;&quot; AND not FindColor(ColorName))
    MsgBox ColorName " could not be found."</pre>
<p>In the example above, the FindColor() function never gets called if the <em>ColorName</em> variable is empty. This is because the left side of the <em>AND</em> would be <em>false</em>, and thus its right side would be incapable of making the final outcome <em>true</em>.</p>
<p>Because of this behavior, it's important to realize that any side-effects produced by a function (such as altering a global variable's contents) might never occur if that function is called on the right side of an <em>AND</em> or <em>OR</em>.</p>
<p>It should also be noted that short-circuit evaluation cascades into nested <em>AND</em>s and <em>OR</em>s. For example, in the following expression, only the leftmost comparison occurs whenever <em>ColorName</em> is blank. This is because the left side would then be enough to determine the final answer with certainty:</p>
<pre>if (ColorName = &quot;&quot; <u>OR</u> FindColor(ColorName, Region1) <u>OR</u> FindColor(ColorName, Region2))
    break   <em>; Nothing to search for, or a match was found.</em></pre>
<p>As shown by the examples above, any expensive (time-consuming) functions should generally be called on the right side of an <em>AND</em> or <em>OR</em> to enhance performance. This technique can also be used to prevent a function from being called when one of its parameters would be passed a value it considers inappropriate, such as an empty string.</p>
<p>The <a href="Variables.htm#ternary">ternary conditional operator (?:)</a> also short-circuits by not evaluating the losing branch.</p>

<h2 id="nested">Nested Functions</h2>
<p>A <em>nested</em> function is one defined inside another function. For example:</p>
<pre>
outer(x) {
    inner(y) {
        MsgBox(y, x)
    }
    inner("one")
    inner("two")
}
outer("title")
</pre>
<p>A nested function is not accessible outside of the function which immediately encloses it, but is accessible anywhere inside that function, including inside other nested functions.</p>
<p>By default, a nested function may access non-dynamic local and static variables of any function which encloses it, but not ByRef parameters or variables which are created dynamically. <a href="#Global">Global</a> declarations in the outer function also apply to nested functions, except where overridden by <a href="#ForceLocal">force-local</a>.</p>
<p>If a function is declared <a href="#ForceLocal">force-local</a> or <a href="#AssumeGlobal">assume-global</a>, any local or static variables created <em>outside</em> that function are not directly accessible to the function itself or any of its nested functions.</p>
<p>Functions are <a href="#AssumeLocal">assume-local</a> by default, and this is true even for nested functions, even those inside an <a href="#AssumeStatic">assume-static</a> function. However, if the outer function is <a href="#AssumeGlobal">assume-global</a>, nested functions behave as though assume-global by default, except that they can refer to local and static variables of the outer function.</p>
<p>A nested function which is assume-static can still refer to variables from the outer function, unless it is also <a href="#ForceLocal">force-local</a>.</p>
<p>Dynamic variable references inside a nested function can resolve to variables from the outer function only if the nested function (or one of its own nested functions) also contains a non-dynamic reference to the variable.</p>
<p><a href="commands/Func.htm">Func</a> can be used to retrieve a reference to a nested function, which can be called even after the outer function returns. Nested functions can also be passed by name to built-in functions such as <a href="commands/SetTimer.htm">SetTimer</a> and <a href="commands/Sort.htm">Sort</a>.</p>

<h3 id="closures">Closures</h3>
<p>A <em>closure</em> is a nested function bound to a set of <em>free variables</em>. Free variables are local variables of the outer function which are also used by nested functions. Closures allow one or more nested functions to share variables with the outer function even after the outer function returns.</p>
<p>To create a closure, pass the name of a nested function to <a href="commands/Func.htm">Func</a>. For example:</p>
<pre>
make_greeter(f)
{
    greet(subject)  <em>; This will be a closure due to f.</em>
    {
        MsgBox Format(f, subject)
    }
    return Func("greet")  <em>; Create and return a closure.</em>
}

g := make_greeter("Hello, {}!")
g.call(A_UserName)
g.call("World")
</pre>
<p>A closure may also be created by passing the name of a nested function to a built-in function, such as <a href="commands/SetTimer.htm">SetTimer</a> or <a href="commands/Hotkey.htm">Hotkey</a>. For example:</p>
<pre>
app_hotkey(hotkey, app_title, app_path)
{
    activate()  <em>; This will be a closure due to app_title and app_path.</em>
    {
        if WinExist(app_title)
            WinActivate
        else
            Run app_path
    }
    Hotkey hotkey, "activate"
}
<em>; Win+N activates or launches Notepad.</em>
app_hotkey "#n", "ahk_class Notepad", "notepad.exe"
<em>; Win+W activates or launches WordPad.</em>
app_hotkey "#w", "ahk_class WordPadClass", "wordpad.exe"
</pre>
<p>If a function creates free variables (that is, if any of its local variables are referenced by nested functions), all of that function's nested functions become closures. This is because any nested function can call any other nested function or create a closure for it by name.</p>
<p>Whenever a function name is resolved to a closure, a <em>new</em> closure is created even if one had already been created with the same set of free variables. Do not pass a closure by name to <a href="commands/SetTimer.htm">SetTimer</a>, <a href="commands/OnClipboardChange.htm">OnClipboardChange</a>, <a href="commands/OnExit.htm">OnExit</a>, <a href="commands/OnMessage.htm">OnMessage</a> or <a href="objects/GuiOnEvent.htm">Gui.OnEvent</a> if that closure needs to be later removed, since doing so requires passing the same object back. For example:</p>
<pre>
timertest() {
    x := "tock!"
    tick() {
        MsgBox x               <em>; x causes this to become a closure.</em>
        <em>;SetTimer t, "Delete"  ; This would cause a circular reference.</em>
    }
    SetTimer "tick", 1000      <em>; Creates a timer.</em>
    SetTimer "tick", "Delete"  <em>; Fails.</em>
    t := Func("tick")
    SetTimer t, 1000           <em>; Creates a second timer.</em>
    SetTimer t, "Delete"       <em>; Deletes the second timer.</em>
}
timertest()
</pre>
<p id="circular-closure">It is best not to store a reference to a closure in any of the closure's own free variables, since that creates a <a href="Objects.htm#Circular_References">circular reference</a> which must be broken before the closure can be freed, such as by clearing the variable.</p>

<h3 id="gosub">Using Subroutines Within a Function</h3>
<p>A function can also contain subroutines, which are more limited but may perform faster than nested functions. As with other subroutines, use <a href="commands/Gosub.htm">Gosub</a> to launch them and <a href="commands/Return.htm">Return</a> to return (in which case the Return would belong to the Gosub and not the function).</p>
<p id="GosubPublic">If a function uses <a href="commands/Gosub.htm">Gosub</a> to jump to a public subroutine (one that lies outside of the function's braces), all variables outside are global and the function's own <a href="#Local">local variables</a> are not accessible until the subroutine returns. However, A_ThisFunc will still contain the name of the function.</p>
<p>Although <a href="commands/Goto.htm">Goto</a> cannot be used to jump from inside a function to outside, it is possible for a function to <a href="commands/Gosub.htm">Gosub</a> an external/public subroutine and then do a Goto from there.</p>
<p>Although the use of <a href="commands/Goto.htm">Goto</a> is generally discouraged, it can be used inside a function to jump to another position within the same function. This can help simplify complex functions that have many points of return, all of which need to do some clean-up prior to returning.</p>

<h2 id="remarks">Return, Exit, and General Remarks</h2>
<p>If the flow of execution within a function reaches the function's closing brace prior to encountering a <a href="commands/Return.htm">Return</a>, the function ends and returns a blank value (empty string) to its caller. A blank value is also returned whenever the function explicitly omits <a href="commands/Return.htm">Return</a>'s parameter.</p>
<p>When a function uses <a href="commands/Exit.htm">Exit</a> to terminate the <a href="misc/Threads.htm">current thread</a>, its caller does not receive a return value at all. For example, the statement <code>Var := Add(2, 3)</code> would leave <code>Var</code> unchanged if <code>Add()</code> exits. The same thing happens if a function causes a runtime error such as <a href="commands/Run.htm">running</a> a nonexistent file (when this error is not caught by a <a href="commands/Try.htm">Try</a>/<a href="commands/Catch.htm">Catch</a> statement).</p>
<p>A function may alter the value of <a href="misc/ErrorLevel.htm">ErrorLevel</a> for the purpose of returning an extra value that is easy to remember.</p>
<p>To call a function with one or more blank values (empty strings), use an empty pair of quotes as in this example: <code>FindColor(ColorName, &quot;&quot;)</code>.</p>
<p>Since calling a function does not start a new <a href="misc/Threads.htm">thread</a>, any changes made by a function to settings such as <a href="commands/SendMode.htm">SendMode</a> and <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a> will go into effect for its caller too.</p>
<p>The caller of a function may pass a nonexistent variable or <a href="misc/Arrays.htm">array</a> element to it, which is useful when the function expects the corresponding parameter to be <a href="#ByRef">ByRef</a>. For example, calling <code>GetNextLine(BlankArray%i%)</code> would create the variable <code>BlankArray%i%</code> automatically as a <a href="#Local">local</a> or global (depending on whether the caller is inside a function and whether it has the <a href="#AssumeGlobal">assume-global mode</a> in effect).</p>
<p>When used inside a function, <a href="commands/ListVars.htm">ListVars</a> displays a function's <a href="#Local">local variables</a> along with their contents. This can help debug a script.</p>
<h2>Style and Naming Conventions</h2>
<p>You might find that complex functions are more readable and maintainable if their special variables are given a distinct prefix. For example, naming each parameter in a function's parameter list with a leading &quot;p&quot; or &quot;p_&quot; makes their special nature easy to discern at a glance, especially when a function has several dozen <a href="#Local">local variables</a> competing for your attention. Similarly, the prefix &quot;r&quot; or &quot;r_&quot; could be used for <a href="#ByRef">ByRef parameters</a>, and &quot;s&quot; or &quot;s_&quot; could be used for <a href="#static">static variables</a>.</p>
<p>The <a href="commands/Block.htm#otb">One True Brace (OTB) style</a> may optionally be used to define functions. For example:</p>
<pre>Add(x, y) {
    return x + y
}</pre>
<h2 id="include">Using #Include to Share Functions Among Multiple Scripts</h2>
<p>The <a href="commands/_Include.htm">#Include</a> directive may be used (<em>even at the top of a script</em>) to load functions from an external file.</p>
<p>Explanation: When the script's flow of execution encounters a function definition, it jumps over it (using an instantaneous method) and resumes execution at the line after its closing brace. Consequently, execution can never fall into a function from above, nor does the presence of one or more functions at the very top of a script affect the <a href="Scripts.htm#auto">auto-execute section</a>.</p>
<h2 id="lib">Libraries of Functions: Standard Library and User Library</h2>
<p>A script may call a function in an external file without having to use <a href="commands/_Include.htm">#Include</a>. For this to work, a file of the same name as the function must exist in one of the following library directories:</p>
<pre><a href="Variables.htm#ScriptDir">A_ScriptDir</a> "\Lib\"  <em>; Local library.</em>
<a href="Variables.htm#MyDocuments">A_MyDocuments</a> "\AutoHotkey\Lib\"  <em>; User library.</em>
"directory-of-the-currently-running-AutoHotkey.exe\Lib\"  <em>; Standard library.</em></pre>
<p>For example, if a script calls a nonexistent function <code>MyFunc()</code>, the program searches for a file named &quot;MyFunc.ahk&quot; in the user library. If not found there, it searches for it in the standard library. If a match is still not found and the function's name contains an underscore (e.g. <code>MyPrefix_MyFunc</code>), the program searches both libraries for a file named <code>MyPrefix.ahk</code> and loads it if it exists. This allows <code>MyPrefix.ahk</code> to contain both the function <code>MyPrefix_MyFunc</code> and other related functions whose names start with <code>MyPrefix_</code>.</p>
<p>The local library is searched before the user library and standard library.</p>
<p>Only a direct function call such as <code>MyFunc()</code> can cause a library to be auto-included. If the function is only called dynamically or indirectly, such as by a timer or GUI event, the library must be explicitly included in the script.  For example: <code><a href="commands/_Include.htm">#Include</a> &lt;MyFunc&gt;</code></p>
<p>Although a library file generally contains only a single function of the same name as its filename, it may also contain private functions and subroutines that are called only by it. However, such functions should have fairly distinct names because they will still be in the global namespace; that is, they will be callable from anywhere in the script.</p>
<p>If a library file uses <a href="commands/_Include.htm">#Include</a>, the working directory for #Include is the library file's own directory. This can be used to create a redirect to a larger library file that contains that function and others related to it.</p>
<p>The <a href="Scripts.htm#ahk2exe">script compiler (ahk2exe)</a> also supports library functions. However, it requires that a copy of AutoHotkey.exe exist in the directory above the compiler directory (which is normally the case). If AutoHotkey.exe is absent, the compiler still works but library functions are not automatically included.</p>
<p>Functions included from a library perform just as well as other functions because they are pre-loaded before the script begins executing.</p>
<h2 id="BuiltIn">Built-in Functions</h2>
<p>Any optional parameters at the end of a built-in function's parameter list may be completely omitted. For example, <code>WinExist(&quot;Untitled - Notepad&quot;)</code> is valid because its other three parameters would be considered blank.</p>
<p>A built-in function is overridden if the script defines its own function of the same name. For example, a script could have its own custom WinExist function that is called instead of the standard one. However, the script would then have no way to call the original function.</p>
<p>External functions that reside in DLL files may be called with <a href="commands/DllCall.htm">DllCall</a>.</p>
<p>To get a list of all built-in functions, see <a href="commands/index.htm">Alphabetical Function Index</a>.</p>
</body>
</html>
