<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Soundcard Analysis Script -- by Lexikos</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>Soundcard Analysis Script -- by Lexikos</h1>

<p>Lists sound devices and various controls each one supports. In addition, generates example code that can be used in scripts to adjust the particular control.</p>
<p>Requires the VA library, version 2.2 (included in download version), and Windows Vista or greater.</p>
<p>A version compatible with older Windows versions can be found at the bottom of the page.</p>
<p><a href="Soundcard.zip">Download This Script</a> &nbsp;| &nbsp;<a href="index.htm">Other Sample Scripts</a> &nbsp;| &nbsp;<a href="http://www.autohotkey.com">Home</a></p>

<pre class="NoIndent"><em>/*
    Sound Card Analyzer v1.0
    
    Requirements:
        - AutoHotkey v1.1.10+
        - Windows Vista or later
        - VA v2.2  http://www.autohotkey.com/board/topic/21984-/
*/</em>
if A_OSVersion in WIN_2003,WIN_XP,WIN_2000
{
    MsgBox 48,, This script requires Windows Vista or later.
    ExitApp
}

global CLSID_MMDeviceEnumerator := &quot;{BCDE0395-E52F-467C-8E3D-C4579291692E}&quot;
      , IID_IMMDeviceEnumerator := &quot;{A95664D2-9614-4F35-A746-DE8DB63617E6}&quot;

OnMessage(0x100, &quot;OnKeyDown&quot;)
Gui +hwndGuiHwnd
Gui Add, ListView, vDeviceLV gDeviceLV AltSubmit r10 w500, #|Def|Endpoint|Adapter
Gui Add, ListView, vControlLV gControlLV AltSubmit r15 w500, Connector|ComponentType|ControlType|Value
Gui Add, Slider, vSlider gSlider Disabled w440 AltSubmit ToolTip
Gui Add, Checkbox, vToggle gToggle Disabled x+7 w53 h33 +0x1000, Toggle
Gui Font, s9, Courier New
Gui Font, s9, Consolas
Gui Add, Edit, vCommand xm r2 ReadOnly -Wrap -VScroll w500,
(
Select a device to list the components and controls it supports.
Press F5 to refresh the list of devices.
)
PopulateDeviceLV()
Gui Show,, Sound Controls

return

OnKeyDown(wParam)
{
    if A_Gui
    {
        if (wParam = 0x74) <em>; VK_F5</em>
        {
            PopulateDeviceLV()
            return true
        }
    }
}

DeviceLV:
    Gui ListView, DeviceLV
    if (A_GuiEvent = &quot;I&quot; &amp;&amp; InStr(ErrorLevel, &quot;F&quot;, true))
    {
        LV_GetText(device_num, A_EventInfo, 1)
        PopulateControlLV(device_num)
        GuiControl,, Command, Select a control to show usage.
        GuiControl, Disable, Toggle
        GuiControl, Disable, Slider
    }
return

ControlLV:
    Gui ListView, ControlLV
    if (A_GuiEvent = &quot;I&quot; &amp;&amp; InStr(ErrorLevel, &quot;F&quot;, true))
    {
        control_row := A_EventInfo
        LV_GetText(component_type, A_EventInfo, 2)
        LV_GetText(control_type, A_EventInfo, 3)
        LV_GetText(value, A_EventInfo, 4)
        if InStr(value, &quot; &quot;)
        {
            GuiControl,, Command, This control doesn't appear to be supported by AutoHotkey.
            GuiControl, Disable, Toggle
            GuiControl, Disable, Slider
            return
        }
        GuiControl,, Command,
        (LTrim
        SoundGet, OutputVar, %component_type%, %control_type%, %device_num%
        SoundSet, NewSetting, %component_type%, %control_type%, %device_num%
        )
        if value is number
        {
            GuiControl, Enable, Slider
            GuiControl, Disable, Toggle
        }
        else
        {
            GuiControl, Enable, Toggle
            GuiControl, Disable, Slider
        }
        GuiControl,, Slider, % value
        GuiControl,, Toggle, % value=&quot;On&quot;
    }
return

Toggle:
Slider:
if (A_GuiControl = &quot;Slider&quot;)
    GuiControlGet value,, Slider
else
    value := -1
SoundSet % value, %component_type%, %control_type%, %device_num%
SoundGet value, %component_type%, %control_type%, %device_num%
LV_Modify(control_row, &quot;Col4&quot;, ErrorLevel ? ErrorLevel : value)
return

GuiEscape:
GuiClose:
ExitApp

PopulateDeviceLV()
{
    Gui ListView, DeviceLV
    LV_Delete()
    enum := ComObjCreate(CLSID_MMDeviceEnumerator, IID_IMMDeviceEnumerator)
    if VA_IMMDeviceEnumerator_EnumAudioEndpoints(enum, 2, 9, devices) &gt;= 0
    {
        VA_IMMDeviceEnumerator_GetDefaultAudioEndpoint(enum, 0, 0, device)
        VA_IMMDevice_GetId(device, default_id)
        ObjRelease(device)
        
        VA_IMMDeviceCollection_GetCount(devices, count)
        Loop % count
        {
            if VA_IMMDeviceCollection_Item(devices, A_Index-1, device) &lt; 0
                continue
            VA_IMMDevice_GetId(device, id)
            name := VA_GetDeviceName(device)
            if !RegExMatch(name, &quot;^(.*?) \((.*?)\)$&quot;, m)
                m1 := name, m2 := &quot;&quot;
            LV_Add(&quot;&quot;, A_Index, id == default_id ? &quot;&gt;&gt;&quot; : &quot;&quot;, m1, m2)
            ObjRelease(device)
        }
        ObjRelease(devices)
    }
    ObjRelease(enum)
    Loop 2
        LV_ModifyCol(A_Index+2, &quot;AutoHdr&quot;)
}

PopulateControlLV(device_num)
{
    Gui ListView, ControlLV
    LV_Delete()
    SoundGet value, Master, Volume, %device_num%
    LV_Add(&quot;&quot;, &quot;&quot;, &quot;Master&quot;, &quot;Volume&quot;, ErrorLevel ? ErrorLevel : value)
    SoundGet value, Master, Mute, %device_num%
    LV_Add(&quot;&quot;, &quot;&quot;, &quot;Master&quot;, &quot;Mute&quot;, ErrorLevel ? ErrorLevel : value)
    if !(enum := ComObjCreate(CLSID_MMDeviceEnumerator, IID_IMMDeviceEnumerator))
        return 0
    if (hr := VA_IMMDeviceEnumerator_EnumAudioEndpoints(enum, 2, 9, devices)) &gt;= 0
    {
        hr := VA_IMMDeviceCollection_Item(devices, device_num-1, device)
        ObjRelease(devices)
    }
    ObjRelease(enum)
    if hr &lt; 0  <em>; Failed to get device.</em>
        return
    ScanDevice(device, device_num)
    ObjRelease(device)
    Loop 4
        LV_ModifyCol(A_Index, &quot;AutoHdr&quot;)
}

ScanDevice(device, device_num)
{
    VA_IMMDevice_Activate(device, &quot;{2A07407E-6497-4A18-9787-32F79BD0D98F}&quot;, 7, 0, deviceTopology)
    VA_IDeviceTopology_GetConnector(deviceTopology, 0, conn)
    ObjRelease(deviceTopology)
    VA_IConnector_GetConnectedTo(conn, conn_to)
    VA_IConnector_GetDataFlow(conn, data_flow)
    ObjRelease(conn)
    if !conn_to
        return
    part := ComObjQuery(conn_to, &quot;{AE2DE0E4-5BCA-4F2D-AA46-5D13F8FDB3A9}&quot;) <em>; IID_IPart</em>
    ObjRelease(conn_to)
    if !part
        return
    ScanPart(part, {data_flow: data_flow, device_num: device_num}, [])
    ObjRelease(part)
}

ScanPart(root, scan, controls)
{
    if (scan.data_flow = 0)
        hr := VA_IPart_EnumPartsIncoming(root, parts)
    else
        hr := VA_IPart_EnumPartsOutgoing(root, parts)
    if (hr &lt; 0)
        return
    
    VA_IPartsList_GetCount(parts, count)
    if (count &gt; 1)
        controls := []  <em>; Ignore controls seen by caller.</em>
    this_part_control := Round(controls.MaxIndex()) + 1
    
    Loop % count
    {
        if VA_IPartsList_GetPart(parts, A_Index-1, part) &lt; 0
            continue
        
        VA_IPart_GetPartType(part, type)
        VA_IPart_GetSubType(part, subtype)
        if (type = 0) <em>; Connector</em>
        {
            VA_IPart_GetName(part, name)
            
            component_type := GetComponentType(subtype)
            instance := Round(scan.found[component_type]) + 1
            scan.found[component_type] := instance
            if (instance &gt; 1)
                component_type .= &quot;:&quot; instance
            
            for i, control_type in controls
            {
                if RegExMatch(control_type, &quot;^\w+&quot;, ctl)
                    SoundGet value, %component_type%, %ctl%, % dn := scan.device_num
                else
                    ErrorLevel := &quot;n/a&quot;
                LV_Add(&quot;&quot;, name, component_type, control_type, ErrorLevel ? ErrorLevel : value)
            }
        }
        else <em>; Subunit</em>
        {
            GetControls(part, controls)
            
            ScanPart(part, scan, controls)
            
            controls.Remove(this_part_control, controls.MaxIndex())
        }
        
        ObjRelease(part)
    }
}

GetControls(part, controls)
{
    static IID_to_Name := {
    (C Join,
        <em>; Supported:</em>
        &quot;{7FB7B48F-531D-44A2-BCB3-5AD5A134B3DC}&quot;: &quot;Volume&quot;
        &quot;{DF45AEEA-B74A-4B6B-AFAD-2366B6AA012E}&quot;: &quot;Mute&quot;
        <em>; Unsupported:</em>
        &quot;{85401FD4-6DE4-4b9d-9869-2D6753A82F3C}&quot;: &quot;OnOff (AGC)&quot;
        &quot;{4F03DC02-5E6E-4653-8F72-A030C123D598}&quot;: &quot;0x70010001 (Mux)&quot;
        &quot;{BB515F69-94A7-429e-8B9C-271B3F11A3AB}&quot;: &quot;Demux&quot;
        &quot;{7D8B1437-DD53-4350-9C1B-1EE2890BD938}&quot;: &quot;Loudness&quot;
        &quot;{DD79923C-0599-45e0-B8B6-C8DF7DB6E796}&quot;: &quot;0x10020001 (PeakMeter)&quot;
        &quot;{A2B1A1D9-4DB3-425D-A2B2-BD335CB3E2E5}&quot;: &quot;Bass&quot;
        &quot;{5E54B6D7-B44B-40D9-9A9E-E691D9CE6EDF}&quot;: &quot;Midrange&quot;
        &quot;{0A717812-694E-4907-B74B-BAFA5CFDCA7B}&quot;: &quot;Treble&quot;
    )}
    VA_IPart_GetControlInterfaceCount(part, count)
    Loop % count
    {
        VA_IPart_GetControlInterface(part, A_Index-1, desc)
        <em>; Get IID and map it to a name, since GetName() seems to return nothing.</em>
        if VA_IControlInterface_GetIID(desc, iid) &gt;= 0
            controls.Insert(IID_to_Name[iid] ? IID_to_Name[iid] : iid)
        ObjRelease(desc)
    }
}

GetComponentType(guid)
{
    <em>; KSNODETYPE_* GUID : SoundGet/Set ComponentType</em>
    static TypeMap := {
    (Join,
        &quot;{DFF21BE1-F70F-11D0-B917-00A0C9223196}&quot;: &quot;Microphone&quot;
		&quot;{DFF21BE2-F70F-11D0-B917-00A0C9223196}&quot;: &quot;Microphone&quot;
		&quot;{DFF21FE4-F70F-11D0-B917-00A0C9223196}&quot;: &quot;Wave&quot;
		&quot;{6994AD04-93EF-11D0-A3CC-00A0C9223196}&quot;: &quot;Wave&quot;
		&quot;{DFF21CE1-F70F-11D0-B917-00A0C9223196}&quot;: &quot;Wave&quot;
		&quot;{DFF220E3-F70F-11D0-B917-00A0C9223196}&quot;: &quot;CD&quot;
		&quot;{DFF220F3-F70F-11D0-B917-00A0C9223196}&quot;: &quot;Synth&quot;
		&quot;{DFF21FE3-F70F-11D0-B917-00A0C9223196}&quot;: &quot;Line&quot;
		&quot;{DFF21EE2-F70F-11D0-B917-00A0C9223196}&quot;: &quot;Telephone&quot;
		&quot;{DFF21EE1-F70F-11D0-B917-00A0C9223196}&quot;: &quot;Telephone&quot;
		&quot;{DFF21EE3-F70F-11D0-B917-00A0C9223196}&quot;: &quot;Telephone&quot;
		&quot;{DFF21FE1-F70F-11D0-B917-00A0C9223196}&quot;: &quot;Analog&quot;
		&quot;{DFF21FE5-F70F-11D0-B917-00A0C9223196}&quot;: &quot;Digital&quot;
    )}
    type := TypeMap[guid]
    return type ? type : &quot;N/A&quot;
}
</pre>

<p>Windows versions older than Vista should use the following script:</p>

<pre class="NoIndent"><em>; SOUNDCARD ANALYSIS</em>
<em>; Use the following script to discover your soundcard's capabilities (component types and control types).</em>
<em>; It displays the results in a simple ListView.</em>

SetBatchLines -1
SplashTextOn,,, Gathering Soundcard Info...

<em>; Most of the pure numbers below probably don't exist in any mixer, but they're queried for completeness.</em>
<em>; The numbers correspond to the following items (in order): CUSTOM, BOOLEANMETER, SIGNEDMETER, PEAKMETER,</em>
<em>; UNSIGNEDMETER, BOOLEAN, BUTTON, DECIBELS, SIGNED, UNSIGNED, PERCENT, SLIDER, FADER, SINGLESELECT, MUX,</em>
<em>; MULTIPLESELECT, MIXER, MICROTIME, MILLITIME</em>
ControlTypes = VOLUME,ONOFF,MUTE,MONO,LOUDNESS,STEREOENH,BASSBOOST,PAN,QSOUNDPAN,BASS,TREBLE,EQUALIZER,0x00000000, 0x10010000,0x10020000,0x10020001,0x10030000,0x20010000,0x21010000,0x30040000,0x30020000,0x30030000,0x30050000,0x40020000,0x50030000,0x70010000,0x70010001,0x71010000,0x71010001,0x60030000,0x61030000

ComponentTypes = MASTER,HEADPHONES,DIGITAL,LINE,MICROPHONE,SYNTH,CD,TELEPHONE,PCSPEAKER,WAVE,AUX,ANALOG,N/A

<em>; Create a ListView and prepare for the main loop:</em>
Gui, Add, Listview, w400 h400 vMyListView, Component Type|Control Type|Setting|Mixer
LV_ModifyCol(4, &quot;Integer&quot;)
SetFormat, Float, 0.2  <em>; Limit number of decimal places in percentages to two.</em>

Loop  <em>; For each mixer number that exists in the system, query its capabilities.</em>
{
    CurrMixer := A_Index
    SoundGet, Setting,,, %CurrMixer%
    if ErrorLevel = Can't Open Specified Mixer  <em>; Any error other than this indicates that the mixer exists.</em>
        break

    <em>; For each component type that exists in this mixer, query its instances and control types:</em>
    Loop, parse, ComponentTypes, `,
    {
        CurrComponent := A_LoopField
        <em>; First check if this component type even exists in the mixer:</em>
        SoundGet, Setting, %CurrComponent%,, %CurrMixer%
        if ErrorLevel = Mixer Doesn't Support This Component Type
            continue  <em>; Start a new iteration to move on to the next component type.</em>
        Loop  <em>; For each instance of this component type, query its control types.</em>
        {
            CurrInstance := A_Index
            <em>; First check if this instance of this instance even exists in the mixer:</em>
            SoundGet, Setting, %CurrComponent%:%CurrInstance%,, %CurrMixer%
            <em>; Checking for both of the following errors allows this script to run on older versions:</em>
            if ErrorLevel in Mixer Doesn't Have That Many of That Component Type,Invalid Control Type or Component Type
                break  <em>; No more instances of this component type.</em>
            <em>; Get the current setting of each control type that exists in this instance of this component:</em>
            Loop, parse, ControlTypes, `,
            {
                CurrControl := A_LoopField
                SoundGet, Setting, %CurrComponent%:%CurrInstance%, %CurrControl%, %CurrMixer%
                <em>; Checking for both of the following errors allows this script to run on older versions:</em>
                if ErrorLevel in Component Doesn't Support This Control Type,Invalid Control Type or Component Type
                    continue
                if ErrorLevel  <em>; Some other error, which is unexpected so show it in the results.</em>
                    Setting := ErrorLevel
                ComponentString := CurrComponent
                if CurrInstance &gt; 1
                    ComponentString = %ComponentString%:%CurrInstance%
                LV_Add(&quot;&quot;, ComponentString, CurrControl, Setting, CurrMixer)
            }  <em>; For each control type.</em>
        }  <em>; For each component instance.</em>
    }  <em>; For each component type.</em>
}  <em>; For each mixer.</em>

Loop % LV_GetCount(&quot;Col&quot;)  ; Auto-size each column to fit its contents.
    LV_ModifyCol(A_Index, &quot;AutoHdr&quot;)

SplashTextOff
Gui, Show
return

GuiClose:
ExitApp
</pre>
</body>
</html>