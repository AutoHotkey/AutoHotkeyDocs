<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Changes &amp; New Features</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Changes &amp; New Features</h1>
<p>Changes and new features introduced by the current branch of AutoHotkey development (a.k.a. AutoHotkey_L) are listed below.</p>
<p>For older changes, see <a href="ChangeLogHelp.htm">Archived Changes</a>.</p>

<!--new revisions go here-->
<h2>1.1.09.03 - February 9, 2013</h2>
<p>Fixed <a href="http://www.autohotkey.com/board/index.php?showtopic=89624">two bugs</a> which affected certain assignments where the target variable contains an unflushed binary number but has zero capacity.</p>
<p>Fixed GuiControl and GuiControlGet acting on the wrong control when given a HWND which does not belong to the current Gui. Instead, the condition is treated as an error.</p>
<p>Fixed OnMessage functions to set A_Gui and A_GuiControl correctly when the target Gui is a child window.</p>

<h2>1.1.09.02 - December 24, 2012</h2>
<p>Fixed MsgBox to show an error message when given invalid Options, instead of silently exiting the thread.</p>
<p>Fixed syntax errors in class var initializers causing the program to crash without the proper error message.</p>

<h2>1.1.09.01 - December 15, 2012</h2>
<p>Fixed AND/OR following a multi-statement comma, like <code>((x, y) and z)</code>.</p>
<p>Fixed RegExReplace to support duplicate subpattern names correctly.</p>
<p>Fixed Object.Remove() not freeing string keys.</p>
<p>Fixed base.Invoke() to not depend on dynamic variable resolution.</p>

<h2>1.1.09.00 - November 7, 2012</h2>

<h4>Breaking changes:</h4>
<p>Removed <a href="misc/AutoIt2Compat.htm">.aut file compatibility</a> and #AllowSameLineComments.</p>
<p>Removed undocumented AutoIt v2 commands.</p>

<h4>Backward-compatible changes:</h4>
<p>Allow optional parameters to be declared with <code>:=</code> instead of <code>=</code>, for consistency with variable declarations and expressions.</p>
<p>Allow non-ASCII characters in unquoted keys (<code>{<b>key</b>: x}</code> and <code>obj.<b>key</b></code>).</p>
<p>Changed name in version info from "AutoHotkey_L" to "AutoHotkey".</p>

<h4>Bug-fixes:</h4>
<p>Fixed instability caused by warning dialogs appearing part-way through evaluation of a command's args.</p>
<p>Fixed PixelSearch Fast mode treating "not found" as an error.</p>
<p>Fixed ahk_exe to allow other ahk_ criteria after it.</p>
<p>Fixed <code>else continue 2</code> and similar requiring braces around the loop.</p>
<p>Fixed RegRead indicating failure after successfully reading binary data.</p>
<p>Fixed <code>File.Length</code> to compensate for or flush any buffered data.</p>
<p>Fixed Gui sizing to account for scrollbars when present.</p>

<h4>Debugger:</h4>
<p>Added support for asynchronous commands.</p>
<p>Improved handling of breakpoints on lines like <code>else foo()</code> or <code>{ bar()</code> so that the debugger will actually break when appropriate.</p>
<p>Optimized code size, fixed several bugs and made the debugger generally more robust.</p>


<h2>1.1.08.01 - August 3, 2012</h2>
<p>Debugger: Fixed max_depth being either half the intended limit or unlimited.</p>

<h2>1.1.08.00 - July 14, 2012</h2>

<h4>Breaking changes:</h4>
<p>Changed the default script codepage to ANSI, as the previous behaviour was a common source of confusion. UTF-8 files must now have a byte order mark (BOM) to be recognized correctly. Notepad adds a BOM to any file saved as UTF-8.</p>
<p>Changed <code>return x</code> to preserve formatting of numeric strings; it is now equivalent to <code>return (x)</code>.</p>
<p>Changed <code>Gui, Name: New</code> to set the new GUI as the default.</p>

<h4>Other changes:</h4>
<p>Changed ClipboardAll to prefer CF_UNICODETEXT over other text formats.</p>
<p>Changed Gui Show to allow floating-point numbers.</p>
<p>Changed A_OSVersion to return WIN_8 on Windows 8.</p>
<p>Changed AutoHotkey.exe file description to include "ANSI/Unicode 32/64-bit".</p>
<p>Changed the parser to allow lines like <code>new MyObject()</code> with no assignment.</p>
<p>Upgraded PCRE to 8.30.</p>
<p>Improved wording of some <a href="commands/_Warn.htm">warnings</a> and added a pointer to the documentation at the bottom of the warning dialog.</p>
<p>Improvements to the debugger:</p>
<ul>
  <li>Added basic support for inspecting Func, ComObject and RegExMatchObject objects.</li>
  <li>Fixed the "attach debugger" message being ignored in some situations. See commit <a href="https://github.com/Lexikos/AutoHotkey_L/commit/83f0a0e39a0f69fc8861f8c4234690557c4ab347">83f0a0e</a>.</li>
</ul>

<h4>New features:</h4>
<p>Added support for the PCRE construct <code>(*MARK:NAME)</code> via <code>RegExMatchObject.Mark</code>.</p>
<p>Added support for <code>classvar.x := y</code> assignments in class definitions (after declaring <em>classvar</em>).</p>
<p>Added <a href="Variables.htm#Is64bitOS">A_Is64bitOS</a>.</p>
<p>Added <a href="commands/SetRegView.htm">SetRegView</a> and <a href="Variables.htm#RegView">A_RegView</a>.</p>

<h4>Fixes:</h4>
<p>Fixed <code>Func.()</code> to merely skip the function call if mandatory parameters were omitted instead of causing the thread to silently exit.</p>
<p>Fixed <code>Object.Remove()</code> not releasing object keys.</p>
<p>Fixed key-down/key-up hotkey pairs to suppress input correctly when only one hotkey in the pair is enabled.</p>
<p>Fixed <code>#Include &lt;Lib&gt;</code> to not affect the working directory used by subsequent #include directives.</p>
<p>Fixed <code>objaddref()</code> acting like <code>ObjRelease()</code> when called with a lower-case 'a'.</p>
<p>Fixed A_AhkPath in 32-bit compiled scripts to detect 64-bit AutoHotkey installations and vice versa.</p>
<p>Fixed TreeView controls with <code>-Background</code> option rendering incorrectly on older OSes.</p>
<p>Fixed error messages shown during execution of While/Until to identify the appropriate line.</p>

<h2>1.1.07.03 - March 25, 2012</h2>
<p>Fixed Ctrl/Alt/Shift key-down hotkey breaking any corresponding key-up hotkey defined before it.</p>
<p>Fixed key-down hotkeys to always use the hook if defined after a key-up hotkey of the same key. If the key-down hotkey used the "reg" method, the hook would block the key-down event and trigger only the key-up hotkey.</p>
<p>Fixed load-time checks interpreting expressions with no derefs as raw text. For example, <code>gosub % "foo"</code> resolved to <code>"foo":</code> at load-time. Similarly, <code>% ""</code> was seen as invalid in various cases even if an empty string should be allowed.</p>

<h2>1.1.07.02 - March 22, 2012</h2>
<p>Fixed a rare crash which can occur when GetClipboardData() fails.</p>
<p>Fixed ComObjArray() to return an empty string on failure instead of an arbitrary integer.</p>
<p>Fixed <code>Object.Remove(i, "")</code> affecting integer keys when <code>!Object.HasKey(i)</code>.</p>

<h2>1.1.07.01 - March 2, 2012</h2>
<p>Fixed FileRead to ignore #MaxMem when reading UTF-16 on Unicode builds.</p>
<p>Fixed dynamic function calls with built-in vars such as <code>%A_ThisLabel%()</code>.</p>

<h2>1.1.07.00 - February 27, 2012</h2>
<p>Enhanced <code><a href="Functions.htm#DynCall">%var%()</a></code> to support <a href="objects/Func.htm">function references</a>, <a href="Objects.htm#Objects_as_Functions">objects imitating functions</a> and the <a href="Objects.htm#Default_Base_Object">default __Call meta-function</a>.</p>
<p>Fixed <a href="commands/ControlGet.htm#List">ControlGet List</a> to work for ListViews where the script and the target process aren't both 32-bit or both 64-bit.</p>
<p>Fixed <a href="commands/Send.htm#SendEvent">SendEvent</a> with a key delay of 0; a change introduced by v1.1.05.04 caused it to be slower than intended.</p>
<p>Fixed <a href="objects/Object.htm#Remove">Object.Remove(i)</a> not adjusting keys if Object[i] doesn't exist.</p>
<p>Fixed an error in <a href="commands/ComObjType.htm">ComObjType()</a> which may have caused unpredictable behaviour when it is called via an <a href="commands/ComObjActive.htm#Remarks">alternative name</a>.</p>
<p>Fixed <a href="commands/ExitApp.htm">ExitApp</a> to exit the thread if an <a href="commands/OnExit.htm">OnExit</a> subroutine prevents the script from terminating, instead of resuming execution after the <a href="commands/Block.htm">block</a> which contained ExitApp.</p>
<p>Calling a function via an object no longer acts as a barrier to exiting the thread. Consequently, if <a href="commands/Exit.htm">Exit</a> is used or a runtime error occurs within a <a href="Objects.htm#Custom_Classes_method">class method</a>, the entire thread exits instead of just the function.</p>
<p>Calling a base-class method using <a href="Objects.htm#Custom_Classes_base">base.Method()</a> or similar inside a class definition no longer causes a <a href="commands/_Warn.htm">UseUnset</a> warning if the method doesn't exist. Consequently, instantiating an object which has <a href="Objects.htm#Custom_Classes_var">instance variables</a> no longer causes a warning about the internal <em>base.__Init</em> method if the base class has no instance variables.</p>

<h2>1.1.06.02 - February 13, 2012</h2>
<p>Fixed IniRead crashing when Section is omitted but Key isn't.</p>
<p>Fixed accuracy of FileGetSize with files which are 4GB or larger.</p>

<h2>1.1.06.01 - February 12, 2012</h2>
<p>Fixed MsgBox smart comma handling to require numeric Options, not Title.</p>

<h2>1.1.06.00 - February 12, 2012</h2>
<h4>New features:</h4>
<p>Integrated <a href="commands/_InputLevel.htm">#InputLevel</a> directive and <a href="commands/SendLevel.htm">SendLevel</a> command <a href="https://github.com/Lexikos/AutoHotkey_L/pull/7">by Russell Davis</a>.</p>
<p>Integrated support for <a href="commands/GuiControls.htm#Link">Link</a> controls <a href="https://github.com/Lexikos/AutoHotkey_L/pull/9">by ChrisS85</a>.</p>
<h4>Breaking changes:</h4>
<p>Changed command parser to avoid trimming escaped characters such as <code>`t</code> or <code>`&nbsp;</code> at the beginning or end of an arg.</p>
<p>Changed <a href="commands/MsgBox.htm">MsgBox</a>'s smart comma handling to improve flexibility and consistency.</p>
<ul>
  <li><code>%</code> can now be used to make Options or Timeout an expression.</li>
  <li>If the first arg is an expression, any unescaped comma which is not
    enclosed in quote marks or parentheses/brackets/braces will cause
    multi-arg mode to be used.  These commas were formerly interpreted
    as multi-statement operators within the first-and-only arg (Text).</li>
  <li>When Title is an expression, unescaped commas contained within the
    expression no longer interfere with smart comma handling.</li>
  <li>If there are exactly two args and the first is empty or an integer,
    multi-arg mode is used.  The former behaviour was to combine both
    into a single arg (Text).</li>
  <li>Timeout can be a literal number or a single deref (and optionally
    part of a number; for example, <code>%Timeout%.500</code>).  Contrary to the
    documentation, the former behaviour interpreted most other cases
    beginning with <code>%</code> as expressions (containing a double-deref).</li>
  <li>Title can be an expression even if Text and Options are omitted.</li>
</ul>
<p>Changed A_IsUnicode/A_IsCompiled to be defined as an empty string in ANSI versions/uncompiled scripts instead of being left undefined. This allows them to be checked without triggering <a href="commands/_Warn.htm">#Warn</a> warnings. Side effects include:</p>
<ul>
  <li>Attempting to assign directly to A_IsCompiled or A_IsUnicode always causes a load-time error. Dynamic assignments always fail, either silently or with an error dialog as appropriate. Previously assignments were allowed in uncompiled/non-Unicode scripts.</li>
  <li>Attempting to take the address of A_IsCompiled or A_IsUnicode always fails.</li>
  <li>A_IsCompiled and A_IsUnicode no longer appear in ListVars when referenced by a script which is not compiled/Unicode.</li>
</ul>
<p>Changed <a href="commands/Send.htm">Send</a> and related commands to respect <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a> when changing modifier keystates.</p>
<h4>Other changes:</h4>
<p>Changed <a href="commands/GuiControl.htm#Choose">GuiControl Choose</a> to remove the ListBox/ComboBox/DDL's current selection when N=0.</p>
<p>Changed <a href="commands/RegisterCallback.htm">RegisterCallback</a> to allow a <a href="objects/Func.htm">Func object</a> in place of a name.</p>
<p>Changed <a href="commands/ListLines.htm">ListLines</a> to show filenames (except when compiled).</p>
<p>Improved <a href="commands/Run.htm">Run</a> to output a process ID if possible when ShellExecuteEx is used.</p>
<h4>Fixes:</h4>
<p>Fixed handle leaks in RegRead.</p>
<p>Fixed <code>x.y++</code> and similar to assign an empty string if x.y is non-numeric.</p>
<p>Fixed SendInput Win+L workaround causing Win key to "stick down".</p>
<p>Fixed Ahk2Exe auto-including the wrong file if an auto-include used <a href="commands/_Include.htm">#Include &lt;Lib&gt;</a>.</p>

<h2>1.1.05.06 - December 31, 2011</h2>
<p>Fixed inc (++) and dec (--) having no effect when used on an object field containing a string.</p>
<p>Fixed inc (++) and dec (--) to cause a warning when used on an uninitialized variable.</p>

<h2>1.1.05.05 - December 17, 2011</h2>
<p>Fixed <code>continue <i>n</i></code> misbehaving when an inner loop has no braces.</p>
<p>Fixed <code>RegExMatchObject[Name]</code> to work correctly with duplicate names.</p>

<h2>1.1.05.04 - December 5, 2011</h2>
<p>Fixed: Selected sub-command of ControlGet was unreliable on x64.</p>
<p>Fixed: CPU was maxed out while waiting if an underlying thread displayed a dialog (and possibly in other cases).</p>

<h2>1.1.05.03 - November 30, 2011</h2>
<p>Fixed <code>Loop ... Until VarContainingObject</code>.</p>

<h2>1.1.05.02 - November 20, 2011</h2>
<p>Fixed false detection of end-of-file when loading a compiled script in some cases.</p>
<p>Fixed SendInput to automatically release modifier keys when sending special characters or {U+xxxx} (which was broken by v1.1.00.01).</p>
<p>Fixed ComObjConnect to filter out non-dispatch interfaces instead of allowing the script to crash.</p>
<p>Fixed <code>new %VarContainingClassName%()</code>.</p>

<h2>1.1.05.01 - October 16, 2011</h2>
<p>Fixed class declarations to allow directives such as #Include.</p>

<h2>1.1.05.00 - October 8, 2011</h2>
<p>Added <a href="commands/CoordMode.htm">Client coordinate mode</a>.</p>
<p>Added <a href="commands/RegExMatch.htm#ObjectMode">object output mode</a> for RegExMatch and RegEx callouts.</p>
<p>Added <a href="Functions.htm#SuperGlobal">super-global</a> declarations, which avoid the need to repeat global declarations.</p>
<p><strong>Breaking change:</strong> Class declarations such as <code>Class c</code> now create a super-global variable instead of an ordinary global.</p>
<p>Added more detail to unhandled exception error dialogs.</p>
<p>Changed <code><a href="commands/Gui.htm#Owner">Gui +Owner</a></code> to work even after the GUI is created.</p>
<p>Changed instance var declarations in class definitions to avoid leaving empty key-value pairs in the class object.</p>
<p>Changed #Include to use standard error message formatting when it fails (more detail; also respects ErrorStdOut).</p>
<p>Changed <a href="commands/Throw.htm">Throw</a> to throw an Exception object by default when its parameter is omitted.</p>
<p>Changed format of runtime error messages slightly to improve consistency and code size.</p>
<p>Modified PCRE to use UTF-16 for input on Unicode builds, for performance.</p>
<p>Upgraded PCRE to 8.13.</p>
<p>Fixed thread not exiting as intended when an assignment in an expression fails.</p>
<p>Fixed #MaxMem preventing assignments to variables which don't require expansion.</p>
<p>Fixed inability of Try/Catch to catch COM errors.</p>
<p>Fixed GuiControlGet incorrectly treating parameter #2 as invalid in some cases.</p>
<p>Fixed input vars being resolved too soon, allowing them to be invalidated by an expression later on the same line.</p>
<p>Fixed RegEx callouts not causing matching to abort when an exception is thrown.</p>
<p>Fixed DllCall setting ErrorLevel to -4 when it should be -3.</p>
<p>Fixed While appearing twice in ListLines for its first iteration.</p>
<p>Fixed Try/Catch to allow If/Loop/For/While with no enclosing block.</p>
<p>Fixed enumerator object not being released when Until is used to break a For-loop.</p>

<h2>1.1.04.01 - September 15, 2011</h2>
<p>Fixed FileRemoveDir setting ErrorLevel incorrectly.</p>

<h2>1.1.04.00 - September 11, 2011</h2>
<p><strong>This release contains a number of potentially script-breaking changes.</strong></p>
<p>Added exception handling support: <a href="commands/Try.htm">try</a>/<a href="commands/Catch.htm">catch</a>/<a href="commands/Throw.htm">throw</a> and <a href="commands/Throw.htm#Exception">Exception()</a>.</p>
<p>Added StdOut mode for <a href="commands/_Warn.htm">#Warn</a>.</p>
<p>Added <a href="commands/Gui.htm#GuiHwndOutputVar">Gui +HwndVARNAME</a> option.</p>
<p>Added <a href="commands/Gui.htm#New">Gui, New [, Options, Title]</a>.</p>
<p>Added automatic support for keyboard accelerators such as Ctrl+O in <a href="commands/Gui.htm#Menu">Gui menus</a>.</p>
<p>Changed handling of <code>#Include &lt;Lib&gt;</code> when the /iLib command-line switch is present to resolve a <a href="https://github.com/fincs/Ahk2Exe/issues/4">problem</a> with Ahk2Exe.</p>
<p>Changed GuiControl to retain the Progress control's current value when its style is changed.</p>
<p>Changed GuiControl and GuiControlGet to allow a HWND to be passed in the <em>ControlID</em> parameter.</p>
<p>Removed the 1GB limit from FileRead.</p>
<p>Improved error detection:</p>
<ul>
  <li><code>Hotkey, If, <i>Expression</i></code>, where <i>Expression</i> does not match an existing #If expression, is caught at load-time when possible.</li>
  <li><code>Hotkey, If<i>Something</i></code>, where <i>Something</i> is invalid, is caught at load-time.</li>
  <li>Class definitions with missing braces are detected as errors.</li>
  <li>If a function call is used on the first line of a class definition, it is now correctly treated as an error.</li>
  <li>GroupAdd now shows an error message when the group name is blank, instead of silently exiting the thread.</li>
  <li>Removed some redundant "unset var" warnings which appeared when using the OutputDebug or StdOut warning modes.</li>
  <li>If an unrecognized option is used with <a href="commands/Gui.htm#Options">Gui</a>, <a href="commands/Gui.htm#Show">Gui Show</a>, <a href="commands/Gui.htm#New">Gui New</a> or <a href="commands/GuiControl.htm">GuiControl</a>, an error message is shown and the thread exits unless <a href="commands/Try.htm">try</a> is used. This validation is not done at load-time due to complexity (it is common for the option parameters to contain variable references).</li>
  <li>RegRead, RegWrite and RegDelete now set A_LastError to the result of the operating system's GetLastError() function.</li>
  <li><a href="commands/Gui.htm#LastFoundExist">+LastFoundExist</a> is now treated as an error if it is combined with another option (<a href="commands/Gui.htm#LastFound">+LastFound</a> should be used in that case).</li>
</ul>
<p>Fixed a <a href="http://www.autohotkey.com/forum/topic76133.html">bug</a> affecting recursive variadic functions.</p>

<h2>1.1.03.00 - August 28, 2011</h2>
<p>Added support for GUI names.</p>
<p>Added support for identifying a GUI by its HWND.</p>
<p>Added <code>+Parent%ParentGui%</code> Gui option.</p>
<p>Added support for external windows as Gui owners via <code>+Owner%HWND%</code>.</p>
<p>Added Name sub-command for GuiControlGet.</p>
<p>Added support for ActiveX controls via the Gui command.</p>
<p>Fixed: Empty hotkey control returned "vk00".</p>
<p>Fixed: Crashes and memory leaks related to COM events/ComObjConnect.</p>
<p>Fixed: <code>GuiControlGet OutputVar, Subcmd, <b>%OutputVar%</b></code> always failed.</p>
<p>Changed "Missing (/[/{" error messages to "Unexpected )/]/}" for greater clarity.</p>
<p>Changed ListLines to display While and Until lines which are executed each iteration.</p>
<p>Changed ~= to have higher precedence than =/!=/&lt;/&gt;/&lt;=/&gt;= but lower than concat, and added it to the documentation.</p>

<h2>1.1.02.03 - August 21, 2011</h2>
<p>Fixed (Debugger): numchildren attribute did not include Object.Base.</p>

<h2>1.1.02.02 - August 20, 2011</h2>
<p>Fixed: Variable capacity was capped at 2GB on x64 builds.</p>
<p>Fixed: Last Found Window not set by <code>#if WinExist(T)</code>.</p>

<h2>1.1.02.01 - August 13, 2011</h2>
<p>Changed A_PriorKey to exclude key-up events.</p>
<p>Fixed process name/path retrieval in certain cases, including:</p>
<ul>
  <li>Retrieving name/path of a 64-bit process from a 32-bit script.</li>
  <li>Retrieving name/path of an elevated process from a non-elevated process (UAC).</li>
</ul>

<h2>1.1.02.00 - August 6, 2011</h2>
<p>Added TV_SetImageList().</p>
<p>Characters which require non-standard shift states 16 and 32 now use a fallback method instead of producing the wrong keystrokes.</p>
<p>Revised handling of dead keys to solve problems which occur when multiple scripts with hotstrings are active.</p>

<h2>1.1.01.00 - July 30, 2011</h2>
<p>Added support for instance variables in class definitions, using simple assignment syntax.</p>
<p><b>Removed</b> <code>var</code> keyword used in class definitions; use <code>static</code> instead.</p>
<p>Added new built-in variables: A_ScriptHwnd and A_PriorKey.</p>
<p>Added new built-in functions: GetKeyName(), GetKeyVK(), GetKeySC() and IsByRef().</p>
<p>Added new sub-command: WinGet, OutputVar, ProcessPath.</p>
<p>Added the capability to specify a window by process name or path: <code>ahk_exe %Name%.exe</code> or <code>ahk_exe %FullPath%</code>.</p>
<p>Optimized ProcessName sub-command of WinGet.</p>
<p>Changed SetTimer to use A_ThisLabel if Label is omitted.</p>
<p>Updated ComObjConnect() to support using an object in place of a function name prefix.</p>
<p>Improved ComObjConnect() to allow the prefix/object to be updated without first disconnecting.</p>
<p>Improved parsing of continuation sections to allow expressions like <code>(x.y)[z]()</code> without escaping "(".</p>
<p>Replaced the method used to store script text in 32-bit compiled scripts; now consistent with 64-bit.</p>
<p>Fixed detection of AltGr in the active window's keyboard layout (on Unicode builds).</p>
<p>Fixed SendInput applying a redundant LCtrl-up some time after AltGr-up.</p>



<h2>1.1.00.01 - July 17, 2011</h2>
<p>Fixed: Modifier keys weren't auto-released when sending special chars.</p>
<p>Fixed: Scancode/modifier-key mapping conflicts such as sc1xx vs ^sc0xx.</p>
<p>Fixed: $ and #UseHook had no effect if used only on the second or subsequent instance(s) of a hotkey.</p>
<p>Fixed: Potential crash when returning a value from a __Delete meta-function.</p>
<p>Fixed: "Uninitialized variable" warnings were triggered by the debugger.</p>
<p>Changed: <code>base.Method()</code> no longer triggers a default meta-function or a warning.</p>
<p>Changed: <code>Gui +(Ex)Style</code> no longer hides/shows the Gui.</p>
<p>Changed the debugger to report type="undefined" for uninitialized variables.</p>
<p>Added check to avoid incorrectly sending keystrokes for characters which actually require the "hankaku" key.
<p>Added support for integers as class variable names.</p>
<p>Added "Static" keyword for declaring class variables.</p>

<h2>1.1.00.00 - May 1, 2011</h2>
<h4>New features:</h4>
<p>Implemented basic <a href="Objects.htm#Custom_Classes">class definition syntax</a>.</p>
<p>Implemented the <code><a href="Objects.htm#Custom_NewDelete">new</a></code> keyword for creating a derived object.</p>
<p>Added <a href="Functions.htm#Func">Func()</a> for retrieving a reference to an existing function and improved <a href="Functions.htm#IsFunc">IsFunc</a> to recognize <a href="Objects.htm#Function_References">function references</a>.</p>
<p>Added support for <code>++</code> and <code>--</code> with object fields, such as <code>x.y[z]++</code>.</p>

<h4>Changes:</h4>
<p>Changed __Delete to not trigger __Call.</p>
<p>Changed OnClipboardChange to use AddClipboardFormatListener when available (i.e. on Windows Vista and later) to improve reliability.</p>
<p>Auto-concat with <code>(</code> is more selective, so some invalid expressions like <code>12(34)</code> will no longer work.</p>

<h4>Fixes:</h4>
<p>Fixed <code>SetTimer Label, -0</code> to be treated as "run-once, very soon".</p>
<p>Fixed A_MyDocuments etc. to use SHGetFolderPath instead of undocumented registry keys.</p>
<p>Fixed non-empty ExcludeText causing windows with no text to be excluded.</p>

<h2>1.0.97.02 - April 14, 2011</h2>
<p>Fixed misinterpretation of comma as an arg delimiter when enclosed in <code>{}</code> in an expression.</p>
<p>Fixed For-loop to set A_Index only after the <i>Expression</i> arg is evaluated, so that the outer loop's value can be used.</p>
<p>Fixed default script location to be based on the directory containing the EXE (as documented), not the working directory.</p>
<p>Improved load-time validation to detect invalid attempts to jump out of a function with Goto.</p>

<h2>1.0.97.01 - April 2, 2011</h2>
<p>Fixed the 64-bit build to not truncate HWNDs or SendMessage/PostMessage params to 32 bits.</p>
<p>Fixed <code>*/::</code> being treated as an invalid hotkey (broken since L54).</p>
<p>Fixed the icons.</p>
<h2>1.0.97.00 - March 28, 2011</h2>
<p>Added <code>{key: value}</code> as syntax sugar for <code>Object("key", value)</code>.</p>
<p>Added <code>[x, y, z]</code> as syntax sugar for <code>Array(x, y, z)</code>, which is a new function equivalent to  <code>Object(1, x, 2, y, 3, z)</code>.</p>
<p>Added slight optimization: resolve any reference to True, False, A_PtrSize or A_IsUnicode in expressions at load-time.</p>
<p>Fixed hotkey parser to treat <code>x & ^y</code> as an error instead of ignoring <code>^</code>.</p>

<h2>1.0.96.00 - March 21, 2011</h2>
<h4><b>New features:</b></h4>
<p><a href="commands/ComObjQuery.htm">ComObjQuery</a>: Queries a COM object for an interface or service.</p>
<p><a href="commands/ComObjFlags.htm">ComObjFlags</a>: Retrieves or changes flags which control a COM wrapper object's behaviour.</p>
<p><a href="commands/ComObjCreate.htm">ComObjCreate</a> allows non-dispatch objects to be created if an interface identifier (IID) is given.</p>
<p><a href="commands/ComObjArray.htm">COM arrays</a> support for-loops and the Clone() method.</p>
<p>ListVars shows the inner variant type and value of each COM wrapper object, in addition to the wrapper's address.</p>
<h4><b>Changes:</b></h4>
<p>When a literal integer or variable containing both a numeric string and cached binary integer is assigned to a field of an object, an integer is stored instead of a string. This particularly benefits scripts calling COM methods which accept integers but not strings, or have different behaviour depending on the type of value.</p>
<p>NULL values are now allowed with ComObjParameter for the VT_UNKNOWN and VT_DISPATCH types.</p>
<p>Improved support for Common Language Runtime (.NET) objects via COM.</p>
<p>FileRecycle should now warn before deleting a file which is too large to recycle.</p>
<p>When a SafeArray created with ComObjArray is assigned to an element of another SafeArray, a separate copy is created. This prevents the script from crashing due to a second attempt at "destroying" the array. ComObjFlags allows this behaviour to be avoided.</p>
<h4><b>Fixes:</b></h4>
<p>Assigning to a COM array of VT_DISPATCH or VT_UNKNOWN crashed the script.</p>
<p>Break and Continue were tolerated outside of loops in some cases.</p>
<p>Standalone carriage-return (`r) was not correctly interpreted as end-of-line.</p>
<p>MouseMove miscalculated negative coordinates with the Input and Event send modes.</p>
<p>Selecting <i>Edit This Script</i> from the tray menu or using the Edit command crashed the script (broken by v1.0.95).</p>
<p>Error dialogs pointed at irrelevant lines of code in some cases.</p>

<h2>1.0.95.00 - March 12, 2011</h2>
<p>All file I/O has been heavily optimized.</p>
<p>Added <a href="commands/_Warn.htm">#Warn</a> to assist with debugging; initial design by <a href="http://www.autohotkey.com/forum/profile.php?mode=viewprofile&amp;u=48847">ac</a>.</p>
<p>By default, if <i>name_var</i> contains a function name, <code>name_var.()</code> calls the function. This can be overidden via the <a href="Objects.htm#Default_Base_Object">default base object</a>, as before.</p>
<p>Run supports verbs with parameters, such as <code>Run *RunAs %A_ScriptFullPath% /Param</code>.</p>
<p>If an operator which can accept either one operand (<code>&amp;x</code>) or two <i>numeric</i> operands (<code>x & y</code>) follows a quoted literal string, auto-concat occurs and the operator is applied only to the right-hand operand. This is because quoted literal strings are always considered non-numeric and are therefore not valid input for numeric operators. For example, expressions like <code>"x" &amp;y</code> and <code>"x" ++y</code> now work.</p>
<p><b>Fixed:</b></p>
<ul>
<li>Wildcard hotkeys were not respecting modifiers such as <code>^!+</code> in specific cases.</li>
<li>File.Pos returned garbage for non-seeking file types; now it returns -1.</li>
<li>File.AtEOF was incorrectly true in some cases.</li>
<li>COM wrapper objects left A_LastError unset in some cases.</li>
<li>Gui submenu icons did not work on Windows 2000/XP/Server 2003.</li>
<li>SplashImage clipped the image if height > width.</li>
<li>ComObjConnect did not alert when the first parameter is invalid.</li>
<li>SplashImage now uses GDI+ only when the other methods fail, for compatibility.</li>
<li>Tilde in <code>~x::</code> now affects <code>x & y::</code> in the same way that <code>~x & z::</code> would, instead of having no effect.</li>
<li>A_PriorHotkey and A_TimeSincePriorHotkey now have the expected values when used with #If.</li>
<li>RegExReplace did not advance through the string correctly after a match failure if the string contained non-ASCII characters.</li>
</ul>
<h2>1.0.92.02 - January 19, 2011</h2>
<p>Fixed a memory leak which occurred when the return value of an object invocation or built-in function was not used, such as <code>file.ReadLine()</code> or <code>SubStr(x,y,z)</code> alone on a line.</p>
<p>Replaced the fix from v1.0.92.01 with a better fix, which also fixes <code>k::MsgBox(),x:=y</code> and doesn't break <code>if()</code>.</p>
<h2>1.0.92.01 - January 18, 2011</h2>
<p>Changed: FileCreateDir now sets A_LastError.</p>
<p>Fixed: <code>GuiControl()</code> or similar was sometimes misinterpreted as a command.</p>

<h2>1.0.92.00 - January 13, 2011</h2>
<p>Added support for compound assignments with objects, such as <code>x.y += z</code>.</p>
<p>Improved IniWrite in Unicode builds to prevent an empty line from appearing at the top of each new file.</p>
<p>Improved the parser to be more permissive about what can follow <code>{</code>/<code>}</code>/<code>Else</code>, especially when combined.</p>

<h2>1.0.91.05 - January 1, 2011</h2>
<p>Fixed: Cleanup code in COM method calls was freeing the wrong parameters.</p>
<p>Fixed (ANSI): DllCall set incorrect length for wstr parameters on output.</p>
<p>Fixed: Variadic function calls were unstable when param object was empty.</p>

<h2>1.0.91.04 - December 29, 2010</h2>
<p>Fixed (Unicode): RegExReplace omitted all text up to StartingPosition (broken by v1.0.90.00).</p>

<h2>1.0.91.03 - December 27, 2010</h2>
<p>Fixed: RegEx callout subpattern vars - broken by v1.0.90.00.</p>

<h2>1.0.91.02 - December 26, 2010</h2>
<p>COM: Added protection against NULL IDispatch/IUnknown pointers.</p>
<p>COM: Skip QueryInterface for IDispatch if VT_DISPATCH is passed explicitly.</p>
<p>Minor fix for maintainability: <code>obj.field := var</code> now correctly yields SYM_STRING, not SYM_OPERAND.</p>

<h2>1.0.91.01 - December 24, 2010</h2>
<p>Fixed: Unexpected results with <code>File.Write(Str)</code> after text-reading.</p>
<p>Fixed: UTF BOM check caused unexpected results in files without a BOM.</p>
<p>Fixed (ANSI): Parsing loops and <code>File.ReadLine()</code> treated <code>Chr(255)</code> as EOF.</p>
<p>Fixed (Unicode): RegExReplace errors where the UTF-8 and UTF-16 lengths differed.</p>
<p>Fixed: Disabling the last hook hotkey breaks Input.</p>
<p>Added: Simple optimization for RegExMatch/Replace.</p>

<h2>1.0.91.00 - December 21, 2010</h2>
<p><i>All changes in this release are COM-related.</i></p>
<p>Added: <a href="commands/ComObjError.htm">ComObjError</a> now returns the previous setting.</p>
<p>Added: <a href="commands/ComObjType.htm">ComObjType(co)</a> and <a href="commands/ComObjValue.htm">ComObjValue(co)</a>.</p>
<p>Added: <a href="commands/ComObjActive.htm">ComObjMissing()</a>.</p>
<p>Added: <a href="commands/ComObjArray.htm">ComObjArray()</a> and basic SAFEARRAY support.</p>
<p>Added: "Take ownership" parameter for <a href="commands/ComObjActive.htm">ComObjParameter()</a>.</p>
<p>Changed: Values passed to COM functions via ComObjParameter are no longer freed in the process of calling the function.</p>
<p>Changed: <code>ComObj.x()</code> now falls back to PROPERTYGET if member 'x' is not found. This fixes for-loops for some objects.</p>
<p>Changed: Wrap unhandled variant types in an object rather than returning integer value.</p>
<p>Changed: Manage VT_UNKNOWN/VT_ARRAY lifetime automatically, by default.</p>

<h2>1.0.90.00 - November 27, 2010</h2>
<p>Fixed: UrlDownloadToFile in Unicode builds on Windows &lt; 7.</p>
<p>Fixed: Upper-ANSI characters were sent as Alt+0 in ANSI build.</p>
<p>Fixed: File.Pos was incorrect after attempting to read past EOF.</p>
<p>Fixed: Escape sequences in #If expressions and static initializers.</p>
<p>Fixed: ClipboardAll sometimes crashed the script with certain formats.</p>
<p>Fixed: Transform HTML calculated length incorrectly for &amp;#NNN; entities.</p>
<p>Fixed: VarSetCapacity now correctly ignores #MaxMem for ByRef variables.</p>
<p>Fixed: <code>FileAppend,,file.txt</code> set ErrorLevel=1 even on success.</p>
<p>Fixed: Match length was miscalculated for RegEx callouts with the P) option.</p>
<p>Integrated Sean's improvements to number handling in COM interop.</p>
<p>Optimized RegExReplace and RegExMatch in Unicode builds.</p>

<h2>Revision 61 - October 3, 2010</h2>
<p>Added: <code>ObjClone(Object)</code>, forgotten when <code>Object.Clone()</code> was implemented.</p>
<p>Added: Support for RegEx Unicode properties in Unicode builds. Also upgraded PCRE to 8.10.</p>
<p>Added: <code>Object.Remove(int, "")</code> removes <code>Object[int]</code> without affecting other keys.</p>
<p>Changed: <code>ComObj.xyz()</code> is now always treated as a method-call.</p>
<p>Changed: <code>Var := 123</code> is now left as an expression, for consistency. This makes <code>Var := 123</code> and <code>Var := (123)</code> equivalent, whereas previously the former assigned only a string and the latter assigned both a string and a cached binary integer. In particular, this avoids some confusing type mismatch errors with COM objects.</p>
<p>Fixed: Dynamic variadic calls to functions with mandatory parameters.</p>
<p>Fixed: The final parameter of an assume-global variadic function had to be explicitly declared local.</p>
<p>Fixed: Static initializers interfering with setting of breakpoints.</p>
<p>Fixed: More pointer size-related errors with PCRE callouts on x64 builds.</p>
<p>Fixed: Input with 'M' option treated Ctrl-M (<code>`r</code>) as Ctrl-J (<code>`n</code>).</p>
<p>Fixed: <code>Object.Remove(n)</code> returned 0 (not "") if <code>Object[n]</code> didn't exist.</p>

<h2>Revision 60 - September 24, 2010</h2>
<p>Added: <a href="objects/File.htm#Encoding">File.Encoding</a> for changing or retrieving the codepage in use by a File object.</p>
<p>Added: <a href="Functions.htm#Variadic">Variadic functions and function-calls</a> and <a href="commands/RegisterCallback.htm#Indirect">indirect mode</a> for callbacks.</p>
<p>Added: <a href="objects/Object.htm#Clone">Object.Clone()</a></p>
<p>Changed: ByRef parameters no longer require the caller to supply a variable.</p>
<p>Changed: <code>Obj.foo := ""</code> now frees foo's contents as originally intended (but still doesn't remove the field).</p>
<p>Changed: OnMessage functions now tolerate optional and ByRef parameters.</p>
<p>Changed: RegisterCallback now enables execute access on callbacks in 32-bit builds (already did in 64-bit builds).</p>
<p>Changed: RegisterCallback now treats explicit ParamCount="" as omitted.</p>
<p>Fixed: For-loop was treating non-expression "0" as true for scripted enumerators.</p>
<p>Fixed: ComEvent (ComObjConnect) not working on the ANSI build.</p>
<p>Fixed: ComEvent (ComObjConnect) not correctly backing up/restoring local vars when calling a function which is already running.</p>
<p>Fixed: Buffer overflow in A_EndChar when there is no end char.</p>
<p>Fixed: Func->mNextFunc not inititialized to NULL (used only by LowLevel scripts).</p>
<p>Debugger: Added the capability to retrieve an object's contents (with a supported debugger client).</p>
<p>Debugger: Fixed a few bugs.</p>

<h2>Revision 59 - September 12, 2010</h2>
<p>Fixed: #If <i>expression</i> should now evaluate each <i>expression</i> at most once per keypress in all cases.
<p>Changed: SplashImage uses common image-loading routines; now supports PNG and similar, but results may differ from before for icon files.</p>
<p>Added: <code><a href="commands/For.htm">For</a> x,y in z</code>.</p>
<p>Added: <code>Loop .. <a href="commands/Until.htm">Until</a> <i>expression</i></code>, usable with any Loop or For-loop.</p>
<p>Added: Named loops; <code><a href="commands/Continue.htm">continue</a> outer_loop</code>, <code><a href="commands/Break.htm">break</a> 2</code>, etc.</p>
<p>Debugger: Encode stdout and stderr packets as UTF-8.</p>
<p>Debugger: Allow user to Abort, <b>Retry</b> or Ignore when the initial connection fails.</p>
<p>Debugger: Allow <a href="Scripts.htm#debug_attach">attaching a debugger client</a> by sending the script a registered window message.</p>
<p>Debugger: Allow detaching debugger client by sending the "detach" DBGp command.</p>

<h2>Revision 58 - September 5, 2010</h2>
<p>Added: <code>static var := expression</code></p>
<h2>Revision 57 - September 4, 2010</h2>
<p>Fixed Str*, WStr* and AStr* DllCall return types on x64.</p>
<p>Added functionality to <a href="Functions.htm#InStr">InStr</a> to bring it in line with StringGetPos:</p>
<ul>
  <li>If <i>StartingPos</i> is negative, the search is conducted right-to-left beginning at that offset from the end.</li>
  <li>An additional parameter is available to specify which <i>occurrence</i> of the string to find.</li>
</ul>
<p>Added <code><a href="commands/_Include.htm">#include</a> &lt;<i>LibName</i>&gt;</code> for explicitly including a script from a <a href="Functions.htm#lib">function library folder</a>.</p>
<p>Added functionality to <a href="commands/IniRead.htm">IniRead</a> and <a href="commands/IniWrite.htm">IniWrite</a> allowing an entire section to be read or written.</p>
<p>Added functionality to <a href="commands/IniRead.htm">IniRead</a> allowing a list of section names to be retrieved.</p>
<p>Added support for <a href="commands/Run.htm#verbs">custom verbs</a> to Run/RunWait: <code>Run *<i>verb file</i></code>.</p>
<p>Made <a href="Compat.htm#Run">improvements</a> to the way Run/RunWait extracts the action and its parameters from the <i>Target</i> parameter.</p>
<p>Changed <a href="Functions.htm#NumGet">NumGet</a>/<a href="Functions.htm#NumPut">NumPut</a> to allow <i>Offset</i> to be omitted entirely since <i>Type</i> is always non-numeric.</p>
<p>Removed the restriction that a label can't point to the end of a block.</p>

<h2>Revision 56 - August 29, 2010</h2>
<p>Added support for x64 compiled scripts. Requires Ahk2Exe_L and x64 AutoHotkeySC.bin.</p>
<p>Fixed: Deref operator (<code>*addr</code>) rejected addresses outside 32-bit range.</p>
<p>Fixed: <code>#If <i>expression</i></code> memory allocation error on x64.</p>
<p>Fixed: Custom hotstring end chars with code points greater than U+00FF.</p>
<p>Fixed: Special characters being sent out of sequence by SendInput/Play.</p>
<p>Fixed: <code>*/</code> being discarded in continuation sections (see L54).</p>

<h2>Revision 55 - August 19, 2010</h2>
<p>Fixed: GroupActivate not setting ErrorLevel=1 if no Label was specified.</p>
<p>Fixed: Tab controls in x64 build.</p>
<p>Fixed: String-copy mode of StrPut when length is omitted; broken by L53.</p>
<p>Fixed: Data-alignment issues in x64 builds.</p>
<p>Changed: Set A_LastError for more File* commands to assist debugging.</p>
<p>Includes FileAppend, FileRead, FileReadLine, FileDelete, FileCopy, FileMove, FileGetAttrib/Time/Size/Version and FileSetAttrib/Time.</p>
<p>Excludes FileCopyDir, FileRecycle, FileMoveDir, FileRemoveDir, FileRecycleEmpty, FileCreateDir and FileInstall as the APIs used do not consistently set or return a Win32 error code.</p>

<h2>Revision 54 - August 15, 2010</h2>
<p>Fixed: RunAs in Unicode build. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=372973#372973">[jackieku]</a></p>
<p>Fixed: RegisterCallback in x64 build. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=374773#374773">[fincs]</a></p>
<p>Fixed: Executables failing to run on Win2k and WinXP prior to SP2. Win2k requires SP4 and updates (probably <a href="http://support.microsoft.com/kb/816542">KB 816542</a>). XP not tested.</p>
<p>Fixed: Dialogs such as MsgBox became unresponsive when interrupted by another script thread. Message filter/workaround added in L45 had to be removed. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=358029#358029">[Bug report]</a></p>
<p>Fixed: Multi-byte characters in default ANSI codepage; this was also causing a memory leak. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=375342#375342">[Bug report]</a></p>
<p>Fixed: ComObject now allows purely numeric property/method names. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=375393#375393">[Bug report]</a></p>
<p>Enhanced usability and capabilities of FileOpen/File object.</p>
<ul>
  <li>FileOpen's <i>Flags</i> parameter accepts a human-readable string of flags.</li>
  <li>FileOpen's "update" mode has been renamed "read/write" and now creates the file if it didn't already exist.</li>
  <li>FileOpen sets A_LastError as appropriate.</li>
  <li><code>File := FileOpen(handle,"h")</code> wraps an existing file handle in an object.</li>
  <li><code>File.Seek(n)</code> defaults to SEEK_END when n is negative.</li>
  <li><code>File.Pos</code> (or <code>File.Position</code>) can be used in place of Tell and Seek.</li>
  <li><code>File.Pos</code>, <code>File.Length</code>, <code>File.AtEOF</code> and <code>File.__Handle</code> can be used without empty parentheses<code>()</code>.</li>
  <li><code>File.Length</code> can be set, as in <code>File.Length:=n</code>.</li>
  <li><code>File.Read<i>Num</i>()</code> and <code>File.Write<i>Num</i>(n)</code> read or write a number, where <i>Num</i> is a NumGet-compatible type name.</li>
  <li><code>File.WriteLine(s)</code> is equivalent to <code>File.Write(s "`n")</code>, for symmetry with <code>File.ReadLine()</code>.</li>
  <li><code>File.Read()</code> reads and returns the remainder of the file when used without parameters.</li>
  <li>File object now returns "" for unrecognized methods and invalid syntax rather than the numeric <i>address</i> of "".</li>
</ul>
<p>Changed: GroupAdd's Label parameter now applies to the whole group. <a href="http://www.autohotkey.com/forum/topic61362.html">[Discussion]</a></p>
<p>Changed: GroupActivate sets ErrorLevel on success/failure. (Same thread as above.)</p>
<p>Changed: <code>*/</code> at the beginning of a line is ignored if there was no <code>/*</code>. <a href="http://www.autohotkey.com/forum/topic61109.html">[Discussion]</a></p>
<p>Removed ToCodePage and FromCodePage subcommands of Transform.</p>

<h2>Revision 53 - August 8, 2010</h2>

<p><b>Merged AutoHotkey64</b> - COM support and x64 compatibility.</p>
<p><b>x64</b> (<i>changes since AutoHotkey64</i>):</p>
<ul>
  <li>Fixed floating-point return values and exception handling for DllCall.</li>
  <li>Fixed RegEx callouts.</li>
  <li>Re-enabled GetProcAddress optimisation for DllCall.</li>
  <li>NumPut and NumGet default to "Int64" in x64 builds.</li>
</ul>
<p><b>COM</b> (<i>changes since AutoHotkey64</i>):</p>
<ul>
  <li>Allow ComObjParameter to wrap 64-bit values in 32-bit builds.</li>
  <li>Implemented more standard ref counting conventions in ComObjActive.</li>
  <li>Prevent extraneous AddRef for new ComObjects in certain cases.</li>
  <li>Don't treat pdispVal==NULL return value from Invoke as an error.</li>
  <li>Fail more predictably when given wrong type of object.</li>
  <li>Require explicit second param in ComObjType, don't assume "IID".</li>
  <li>Free local vars after ComEvent calls a function.</li>
  <li>Remove pVarResult param from ComEvent; use return value instead.</li>
  <li>Pass the original wrapper ComObject in each ComEvent call.</li>
  <li>Add context to ComError dialog; let the buttons make more sense.</li>
</ul>
<p>Implemented common syntax validation code for enumerators. <code>Enum[]</code> and <code>Enum.Next()</code> are now supported with or without parameters. <code>Enum[]:=val</code> and similar obscure forms which worked in AutoHotkey_COM/AutoHotkey64 are not allowed.</p>
<p>"Ptr" type is still signed (unlike AutoHotkey64), for maximum flexibility and consistency.</p>
<p><b>Other changes:</b></p>
<p>Added: <code>Object.<b>HasKey</b>(key)</code>.</p>
<p>Added: <code>Object(obj)</code> increments obj's reference count and returns its address.</p>
<p>Added: <code>ObjAddRef()</code> and <code>ObjRelease()</code>.</p>
<p>Fixed: A_ThisHotkey now has the expected value when used with #If.</p>
<p>Fixed: RunAs in Unicode build (fixed by jackieku).</p>
<p>Changed: Default script codepage for ANSI builds is now CP0 (ANSI).</p>
<p>Changed: <code>x.y[]</code> is now equivalent to <code>(x.y)[]</code> rather than <code>x["y"]</code>.</p>
<p>Changed: Built-in methods can now be called with or without the underscore prefix (e.g. <code>obj.MaxIndex()</code> or <code>obj._MaxIndex()</code>).</p>

<h2>Revision 52 (again) - July 10, 2010</h2>
<p>Added support for built-in and environment variables in double-derefs.</p>
<p>Improved support for multi-byte characters in certain codepages (previously only 932, 936, 949, 950 and 1361 were supported).</p>
<p>Fixed: StrPut failed for codepages which don't support WC_NO_BEST_FIT_CHARS, such as UTF-7.</p>
<p>Fixed: Double-deref as object - <code>literal%var%.literal</code>.</p>
<p>Fixed: <code>StrPut("", Encoding)</code> null-terminated an invalid address.</p>

<h2>Revision 52 - June 12, 2010</h2>
<p>Fixed: ObjRemove's Key parameter is now optional, as with <a href="objects/Object.htm#Remove">Object._Remove</a>.</p>
<p>Fixed: Files were improperly locked while reading, unlike in older versions.</p>
<p>Fixed: Uppercase Hex format caused negative integers to become unsigned.</p>
<p>Fixed: RegExMatch was corrupting output array items when specific conditions were met. See <a href="http://www.autohotkey.com/forum/topic59120.html">bug report</a>.</p>

<h2>Revision 51 - April 11, 2010</h2>
<p>Changed: Use &lt;EXENAME&gt;.ahk instead of AutoHotkey.ini or AutoHotkey.ahk.</p>
<p>Changed: Default to UTF-8 for script files; override with /CPnnn.</p>
<p>Fixed: Unpause when the script exits so that object __Delete meta-functions can run.</p>

<h2>Revision 50 - March 27, 2010</h2>
<p>Improved flexibility of <a href="objects/Object.htm#Insert">Object._Insert</a>.
<ul>
  <li><code>Object._Insert(x)</code> - inserts x at <code>_MaxIndex()="" ? 1 : _MaxIndex() + 1</code>.</li>
  <li><code>Object._Insert(i,x,y,z)</code> - inserts <code>x,y,z</code> at <code>i,i+1,i+2</code>.</li>
</ul>
<p>Improved flexibility of <a href="objects/Object.htm#Remove">Object._Remove</a>.
<ul>
  <li><code>Object._Remove(k)</code> - removes and returns the value associated with k.</li>
  <li><code>Object._Remove()</code> - removes and returns the value at _MaxIndex().</li>
</ul>
<p>Added file share mode flags to FileOpen [by jackieku].</p>
<p>Fixed: 'P' option of RegExMatch incorrectly output 1 for subpatterns which did not match anything.</p>
<p>Fixed: <code>Object._SetCapacity(key,n)</code> was not null-terminating in some cases.</p>
<p>Fixed: StatusBarGetText returned only half of the text in Unicode builds.</p>

<h2>Revision 49 - March 14, 2010</h2>
<p>Added <a href="objects/Object.htm#NewEnum">obj._NewEnum()</a>.</p>
<p>Added <a href="objects/Object.htm">ObjMethod(obj)</a> for each built-in <code>obj._Method()</code>.</p>
<p>Changed: ObjSet/Get/Call can no longer be called/overridden by script.</p>
<p>Fixed: Potential crash caused by VK_PACKET check added in L48.</p>
<p>Fixed: Character codes in VK_PACKET events were potentially misinterpreted as scancodes.</p>
<p>Fixed: ExcludeText was ineffective after the first matching control.</p>

<h2>Revision 48 - February 21, 2010</h2>
<p>Fixed: Standalone <code>obj.()</code> was not recognized as a valid expression.</p>
<p>ControlSend now uses WM_CHAR to support characters which have no associated keycode.  For instance, this applies to "&#133;" (en-US), "&#x221e;" in a Unicode build and <code>{U+221e}</code> in either build.</p>
<p>KeyHistory now shows the full 16-bit character code for VK_PACKET (VK=E7) events.  <a href="commands/Send.htm#Unicode">Send</a> may indirectly cause these to be generated for Unicode characters.</p>

<h2>Revision 47 - February 13, 2010</h2>
<p>Fixed (Unicode): ControlGet,List with ListView controls.</p>

<h2>Revision 46 - February 11, 2010</h2>
<p>Added A_FileEncoding, which returns the current default file encoding.</p>
<p>Added <a href="commands/StrPutGet.htm">StrPut</a> and extended <a href="commands/StrPutGet.htm">StrGet</a> with additional features.</p>

<h2>Revision 45 - February 8, 2010</h2>
<p>Added _GetAddress; _SetCapacity/_GetCapacity may now operate on a given field.  <a href="objects/Object.htm">[more info]</a></p>
<p>Added workaround for WM_PAINT infinite loop often caused by subclassing.</p>
<p>Allow <code>obj.()</code> as a means to call the default method of an object; equivalent to <code>obj[""]()</code>.</p>
<p>Dev: Added solution and project files for MSBuild 4.0 & VS2010.  <a href="http://github.com/Lexikos/AutoHotkey_L/commit/ed81ea089c223b46c883036c14454aa4386d3801">[more info]</a></p>
<p>Fixed (Unicode): 'Running' column in ListHotkeys.</p>

<h2>Revision 44 - February 7, 2010</h2>
<p>Fixed: Attempting to set "nothing" crashed the script. For instance, <code>x[]:=z</code>.</p>
<p>Fixed (Unicode): Unable to find default script (Documents\AutoHotkey.ahk).</p>
<p>Fixed (Unicode): A_Desktop, A_ProgramFiles and several other built-in variables which read their value from the registry caused strings to be incorrectly terminated.</p>
<p>Fixed (ANSI): Characters in the range 0x80-0xFF couldn't be found by InStr or StringReplace.</p>
<p>Changed (ANSI): Treat ToCodePage/FromCodePage like other unsupported/invalid subcommands.</p>

<h2>Revision 43 - January 29, 2010</h2>
<p>Fixed: obj.Func() resulting in a random integer when it should be an empty string.</p>

<h2>Revision 42 - January 28, 2010</h2>
<p>Merged with AutoHotkeyU.</p>
<p>Numerous bug-fixes and improvements, some relating to the merge.</p>

<h2>Revision 41 - December 20, 2009</h2>
<p>Fixed: Floating-point numbers were equivalent to an empty string when used as keys in objects.  They are now converted to numeric strings in the current <a href="commands/SetFormat.htm">float format</a>, as originally intended.</p>

<h2>Revision 40 - December 13, 2009</h2>
<p>Changed meta-functions and multi-param behaviour to improve flexibility.  Meta-functions are now invoked *before* searching for an appropriate field in each base object; however, values in x.base will override meta-functions defined in x.base.base.  Chaining meta-functions (inheritence) is now possible by avoiding "Return"</p>
<p>Improved Default Base functionality to be more consistent with real objects.</p>
<p>Changed (Debugger): While stepping through code, skip all braces except those which end a function.</p>
<p>Changed (Debugger): When stepping onto the hidden "Exit" at end of the script, consider it to be *below* the last physical line to avoid confusion.</p>

<h2>Revision 39 - December 2, 2009</h2>
<p>Fixed (Debugger): Error in Base64 decoding used by property_set.</p>

<h2>Revision 38 - November 17, 2009</h2>
<p>Added: <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a> directive to change which key is used to mask Alt/Win keyup events.  See <a href="http://www.autohotkey.com/forum/topic22378.html">this thread</a> for background information.</p>
<p>Changed: If <code>x[1,2]:=3</code> creates an object for <code>x[1]</code>, it's base is no longer automatically set to <code>x.base</code>.  See <a href="Objects.htm#Subclassing_aoa">the documentation</a> for a method of controlling this behaviour.</p>  

<h2>Revision 37 - November 7, 2009</h2>
<p>Added: Support for <code>obj[method_name](params)</code> object-call syntax.</p>

<h2>Revision 36 - November 4, 2009</h2>
<p>Changed: If <code>x.y</code> or similar is immediately followed by an open-bracket (<code>[</code>), the right-most identifier preceding the bracket is treated as the first parameter of the operation.  For instance, <code>a.b.c[d]</code> is equivalent to <code>ObjGet(a.b,"c",d)</code> and <code>x.y[z]:=v</code> is equivalent to <code>ObjSet(x,"y",z,v)</code>. Previously each sub-expression preceding a bracket was evaluated separately.</p>
<p>Changed: If a method-call such as <code>x.y()</code> is followed immediately by an assignment, the parentheses are treated as brackets. For instance, <code>x.y(z):=v</code> is now equivalent to <code>ObjSet(x,"y",z,v)</code>.</p>
<p>Fixed: If(expr) and While(expr) with no delimiting space or comma.</p>  

<h2>Revision 35 - October 25, 2009</h2>
<p>Fixed: Standalone expressions beginning with two or more "dots", such as <code>x.y.z()</code>. (Broken by L34.) Note that '(' or '[' or ':=' is still required.</p>

<h2>Revision 34 - October 24, 2009</h2>
<p>Changed: Setting a value within an object to an empty string now stores the empty string rather than removing the key-value pair from the object.  _Remove can still be used to completely remove key-value pairs.</p>
<p>Changed: Command names must be terminated with a space, tab or comma.  The following characters no longer bypass this requirement: <span class="Code">&lt;&gt;:+-*/!~&|^[]</span>.  For instance, syntax errors such as <span class="Code">MsgBox< foo</span> and <code>If!foo</code> are now caught at load-time.</p>
<p>Fixed: Return now properly handles expressions which result in a variable containing an object.  For instance, <code>Return x:=y</code>, <code>Return (x)</code>, <code>Return x,...</code> and similar should work now (<code>Return x</code> already worked).</p>
<p>Fixed: Multi-parameter get/set did not correctly support meta-functions for multiple objects (such as for <code>x</code> <i>and</i> <code>x[y]</code> in the expression <code>x[y,z]</code>).</p>
<p>Fixed: Cascading object-assignments such as the <code>x[y]:=z</code> in <code>r:=x[y]:=z</code> could not yield numbers or objects - broken by L33.</p>
<p>Fixed: <code>x._Remove(y)</code> crashed the script or removed the wrong item if <code>x</code> did not contain <code>y</code>.</p>
<p>Fixed: <code>x.=y</code>, <code>if x.y=...</code> and similar.  May affect other expressions.</p>
<p>Fixed: Standalone ternary expressions no longer requires spaces.  For instance, <code>x? F(1) : F(2)</code> is now allowed.</p>
<p>Debugger: On script exit, disconnect debugger *after* releasing objects to allow debugging of __Delete handlers.</p>

<h2>Revision 33 - October 3, 2009</h2>
<p>Fixed: Local variables were not automatically freed for functions which return objects or pure numbers.</p>
<p>Fixed: Two separate reference-counting errors related to ternary operator and Object().</p>
<p>Fixed: If a string returned by a scripted object function was assigned directly to a variable, the variable's length was set incorrectly.</p>
<p>Fixed: If the last operation in an expression retrieved a string from a temporary object, the object and string were freed prematurely.</p>
<p>Fixed: Numeric strings with special formatting were not preserved when returned from a function via a variable or passed to a recursive function.</p>
<p>Fixed: If the final result of an expression (other than for Return) is an object, correctly yield an empty string instead of silently aborting the thread.</p>
<p>Fixed: __Delete meta-functions sometimes overwrote temporary values in the deref buffer.</p>
<p>Added: An address retrieved via &amp;object may be cast back into an object reference by using Object(address).</p>  

<h2>Revision 32 - September 26, 2009</h2>
<p>Fixed: Send/PostMessage crash when less than three parameters were specified.</p>

<h2>Revision 31 - September 26, 2009</h2>
<p>Added: Object/array support and numerous minor changes to make this possible.</p>
<p>Added: Support for While(expression) with no delimiting space.</p>
<p>Added: Trim, LTrim, RTrim.</p>
<p>Added: A ~= B; equivalent to RegExMatch(A, B).  May be removed in a future revision.</p>
<p>Fixed: An incompatibility with LowLevel.</p>
<p>Changed: Characters [, ] and ? are no longer valid in variable names.  Consequently, ? (ternary) no longer requires a space on either side.</p>
<p>Changed: Optional parameters may now be omitted at any position in the parameter list of a non-dynamic function call. Since this works by automatically inserting the parameter's default value at load-time, it is not supported or allowed for dynamic function-calls.</p>
<p>Debugger: Various minor changes to make program flow easier to follow while stepping through code.</p>
<p>Optimization: If DllCall's first parameter is a literal string which identifies a function already present in memory, it is replaced with the actual address of the function.</p>
<p>Updated from v1.0.48.03 to v1.0.48.04.</p>

<h2>Revision 30 - May 31, 2009</h2>
<p>Updated from v1.0.48.02 to v1.0.48.03.</p>

<h2>Revision 29 - May 2, 2009</h2>
<p>All supported image formats may now be used as menu icons.  Currently it is necessary to specify "actual size" when setting the icon to preserve transparency on Windows Vista and later. For example:</p>
<pre>Menu, Icon, MenuItemName, Filename.png,, 0</pre>  

<h2>Revision 28 - May 2, 2009</h2>
<p>Improved average-case performance of dynamic function calls by implementing binary search for function name look-ups. This change also applies to other areas, such as load-time resolution of function references in expressions and run-time resolution by OnMessage, RegisterCallback, etc.</p>  

<h2>Revision 27 - April 26, 2009</h2>
<p>Updated from v1.0.48.00 to v1.0.48.02.</p>  

<h2>Revision 26 - April 11, 2009</h2>
<p>Fixed: Menu icons were not drawn on items which have sub-menus if owner-drawing was in use.</p>
<p>Fixed: Menu icons were not freed if all menu items were deleted at once.</p>
<p>Changed (Source): Renamed AutoHotkey.sln to AutoHotkey_L.sln to allow VS window to be identified more easily.</p>  

<h2>Revision 25 - March 30, 2009</h2>
<p>Fixed: Send {U+xxxx} correctly sets modifier key-state as with any normal key.</p>
<p>Fixed: Send {U+..xx} no longer triggers hotkey SCxx.</p>

<h2>Revision 24 - March 30, 2009</h2>
<p>Added: Support for Send {U+xxxx}. SendInput() is used where available for proper unicode support, otherwise falls back to Alt+Numpad.</p>

<h2>Revision 23 - March 30, 2009</h2>
<p>Fixed: GuiControl, Enable/Disable now only resets focus if the focused control was disabled.</p>  

<h2>Revision 22 - March 26, 2009</h2>
<p>Optimized If var [not] in/contains MatchList, especially for long lists containing shorter fields.</p>  

<h2>Revision 21 - March 16, 2009</h2>
<p>Minor optimizations to While. [thanks Chris]</p>
<p>Fixed (Debugger): Revisions 19 and 20 omitted timer threads from the call stack.</p>
<p>Fixed (Debugger): XML-reserved characters were not escaped in most situations.</p>
<p>Fixed (Debugger): Incorrect command and transaction_id were used in the final response before exiting the script.</p>  

<h2>Revision 20 - February 27, 2009</h2>
<p>Changed: If an icon cannot be loaded with the new method, fall back to the old method.</p>

<h2>Revision 19 - February 26, 2009</h2>
<p>Added: Gui, Font, qN option to set font quality/control anti-aliasing, where N is between 0 and 5.</p>
<p>Fixed: IL_Add now loads icons at the most appropriate size when multiple sizes exist.</p>
<p>Merged with AutoHotkey v1.0.48, introducing bug fixes, optimizations and other changes by Chris. Some AutoHotkey_L features were integrated into the mainstream release; changes to these features since previous revisions are as follows:</p>
<ul>
  <li>Legacy behaviour is no longer applied to While - e.g. "While %x%" is correctly interpreted as a double-deref rather than as "While x".</li>
  <li>One-True-Brace style is now supported for While.</li>
  <li>Static vars may now be declared and initialized in assume-static functions.</li>
  <li>Passing too <em>few</em> parameters in a dynamic function call is no longer allowed, as it allows the function's caller to second-guess the function's designer, reduces the ability to detect script bugs at runtime, and may cause the application to crash if calling a built-in function.</li>
</ul>

<h2>Revision 18 - February 21, 2009</h2>
<p>Fixed: Incomplete bug-fix in previous revision causing concat followed by assignment to skip the rest of the expression in some cases.</p>

<h2>Revision 17 - February 20, 2009</h2>
<p>Added: Menu icons via Icon and NoIcon sub-commands of the Menu command.</p>
<p>Changed: Negative icon numbers can now be used to indicate a resource ID within an executable.</p>
<p>Changed: Set default style of menus to include MNS_CHECKORBMP.</p>
<p>Changed: Load both small and large versions of custom tray icons to allow the correct icons to be shown in the appropriate places.</p>
<p>Fixed: Loading of icons from executable files at sizes other than the system small/large.</p>

<h2>Revision 16 - February 4, 2009</h2>
<p>Fixed: Deleting a menu item partially deleted its associated sub-menu.</p>  

<h2>Revision 15 - February 1, 2009</h2>
<p>Fixed: SetFormat's presence in a *compiled* script was not disabling binary number write-caching. SetFormat should now work correctly in compiled scripts.</p>

<h2>Revision 14 - February 1, 2009</h2>
<p>Numerous bug-fixes and optimizations by Chris (pre-v1.0.48 beta).</p>
<p>Added: Support for regex callouts and the auto-callout option 'C'.</p>
<p>Changed: A_AhkVersion now includes the revision number. For instance, this is 1.0.47.07.L14.</p>
<p>Fixed: HWND's/window ID's were sign-extended to 64-bit. For instance, 0xb482057e became 0xffffffffb482057e.</p>

<h2>Revision 13 - November 29, 2008</h2>
<p>Fixed: Invalid DllCall types were treated as INT in some build environments.</p>
<p>Added: Workaround for GuiEscape issue when disabling focused control.</p>
<p>Changed version info: InternalName, ProductName and FileDescription are now "AutoHotkey_L" instead of "AutoHotkey".</p>

<h2>Revision 12 - September 6, 2008</h2>
<p>Fixed: Potential access violation when using property_get on a built-in variable. -- DBGP</p>

<h2>Revision 11 - September 5, 2008</h2>
<p>Fixed: Remove checksum from AutoHotkeySC.bin via post-build script (AutoHotkey must be installed).</p>
<p>Added: .L suffix to A_AhkVersion.</p>
<p>Added: Preliminary support for DBGp (interactive debugging).</p>

<h2>Revision 10 - August 2, 2008</h2>
<p>Fixed: WheelLeft/WheelRight support, which was broken in revision 9.</p>

<h2>Revision 9 - July 29, 2008</h2>
<p>Fixed: Allow Break/Continue in While.</p>
<p>Fixed: TrayTip in non-English Windows and possibly other side-effects of using Vista headers.</p>

<h2>Revision 8 - July 27, 2008</h2>
<p>Added: #IfTimeout directive to set the timeout for evaluation of #If expressions, in milliseconds. Default is 1000.</p>
<p>Added: Assume-static mode for functions. "Static" must precede any local/global variable declarations.</p>
<p>Added: One-true-brace support for While.</p>
<p>Changed: While now sets A_Index to the iteration about to begin.</p>

<h2>Revision 7 - July 26, 2008</h2>
<p>Added: IsFunc(FuncName) - Returns a non-zero number if FuncName exists in the script or as a built-in function.</p>

<h2>Revision 5 - July 19, 2008</h2>
<p>Cleaned up obsolete references to test scripts.</p>
<p>Added basic default test script.</p>

<h2>Revision 4 - July 18, 2008</h2>
<p>Added: #if (expression) - Similar to #IfWinActive, but for arbitrary expressions.</p>
<p>Added: WheelLeft, WheelRight - Support for WM_MOUSEHWHEEL, which was introduced with Windows Vista. (Requires Vista.)</p>
<p>Added: While, expression - Loop while a condition is true.</p>
<p>Added: A_IsPaused - True if the underlying thread is paused.</p>
<p>Added: A_IsCritical - True if the current thread has been marked uninterruptible by the "Critical" command.</p>
<p>Changed: Allow any number of parameters to be passed in dynamic function calls.</p>
<p>Fixed: Access Violation caused by WinGetClass and subclassed windows.</p>
<p>Fixed: Access Violation caused by empty dynamic function references.</p>

<p>&nbsp;</p>
</body>
</html>
