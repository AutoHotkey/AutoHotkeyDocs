<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Remapping Keys (Keyboard, Mouse and Joystick) | AutoHotkey</title>
<meta name="description" content="Free keyboard remapper that can also remap mouse and joystick buttons. It can also automate repetitive tasks by sending keystrokes &amp; mouse clicks.">
<meta name="keywords" content="keyboard,remapper,remap,remapping,keys,key,keystrokes,clicks,mouse,buttons,button,joystick,hotkeys,hotkey">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Remapping Keys <span class="headnote">(Keyboard, Mouse and Joystick)</span></h1>

<h2 id="toc">Table of Contents</h2>
<ul>
  <li><a href="#intro">Introduction</a></li>
  <li><a href="#Remap">Remapping the Keyboard and Mouse</a></li>
  <li><a href="#remarks">Remarks</a></li>
  <li><a href="#moving-the-mouse-cursor">Moving the Mouse Cursor via the Keyboard</a></li>
  <li><a href="#registry">Remapping via the Registry's "Scancode Map"</a></li>
  <li><a href="#related">Related Topics</a></li>
</ul>

<h2 id="intro">Introduction</h2>
<p><strong>Limitation</strong>: AutoHotkey's remapping feature described below is generally not as pure and effective as remapping directly via the Windows registry. For the advantages and disadvantages of each approach, see <a href="#registry">registry remapping</a>.</p>
<h2 id="Remap">Remapping the Keyboard and Mouse</h2>
<p>The syntax for the built-in remapping feature is <code>OriginKey::DestinationKey</code>. For example, a <a href="../Scripts.htm">script</a> consisting only of the following line would make <kbd>A</kbd> behave like <kbd>B</kbd>:</p>
<pre>a::b</pre>
<p>The above example does not alter <kbd>B</kbd> itself. <kbd>B</kbd> would continue to send the "b" keystroke unless you remap it to something else as shown in the following example:</p>
<pre>a::b
b::a</pre>
<p>The examples above use lowercase, which is recommended for most purposes because it also remaps the corresponding uppercase letters (that is, it will send uppercase when <kbd>CapsLock</kbd> is "on" or <kbd>Shift</kbd> is held down). By contrast, specifying an uppercase letter on the right side forces uppercase. For example, the following line would produce an uppercase B when you type either "a" or "A" (as long as <kbd>CapsLock</kbd> is off):</p>
<pre>a::B</pre>
<p id="blind-pitfall">However, a remapping opposite to the one above would not work as one might expect, as a remapping never "releases" the modifier keys which are used to trigger it. For example, <code>A::b</code> is typically equivalent to <code>A::B</code> and <code>^a::b</code> is equivalent to <code>^a::^b</code>. This is because each remapping <a href="#actually">internally uses {Blind}</a> to allow the key or key combination to be combined with other modifiers.</p>

<h3 id="RemapMouse">Mouse Remapping</h3>
<p>To remap the mouse instead of the keyboard, use the same approach. For example:</p>
<table class="info">
  <tr>
    <th style="min-width: 11em;">Example</th>
    <th abbr="Descr">Description</th>
  </tr>
  <tr>
    <td><code>MButton::Shift</code></td>
    <td>Makes the middle button behave like <kbd>Shift</kbd>.</td>
  </tr>
  <tr>
    <td><code>XButton1::LButton</code></td>
    <td>Makes the fourth mouse button behave like the left mouse button.</td>
  </tr>
  <tr>
    <td><code>RAlt::RButton</code></td>
    <td>Makes the right <kbd>Alt</kbd> behave like the right mouse button.</td>
  </tr>
</table>

<h3 id="other-useful-remappings">Other Useful Remappings</h3>
<table class="info">
  <tr>
    <th style="min-width: 11em;">Example</th>
    <th abbr="Descr">Description</th>
  </tr>
  <tr>
    <td><code>CapsLock::Ctrl</code></td>
    <td>Makes <kbd>CapsLock</kbd> become <kbd>Ctrl</kbd>. To retain the ability to turn <kbd>CapsLock</kbd> on and off, add the remapping <code>+CapsLock::CapsLock</code> first. This toggles <kbd>CapsLock</kbd> on and off when you hold down <kbd>Shift</kbd> and press <kbd>CapsLock</kbd>. Because both remappings allow additional modifier keys to be held down, the more specific <code>+CapsLock::CapsLock</code> remapping must be placed first for it to work.</td>
  </tr>
  <tr>
    <td><code>XButton2::^LButton</code></td>
    <td>Makes the fifth mouse button (XButton2) produce a control-click.</td>
  </tr>
  <tr>
    <td><code>RAlt::AppsKey</code></td>
    <td>Makes the right <kbd>Alt</kbd> become <kbd>Menu</kbd> (which is the key that opens the context menu).</td>
  </tr>
  <tr>
    <td><code>RCtrl::RWin</code></td>
    <td>Makes the right <kbd>Ctrl</kbd> become the right <kbd>Win</kbd>.</td>
  </tr>
  <tr>
    <td><code>Ctrl::Alt</code></td>
    <td>Makes both <kbd>Ctrl</kbd> behave like <kbd>Alt</kbd>. However, see <a href="#AltTab">alt-tab issues</a>.</td>
  </tr>
  <tr>
    <td><code>^x::^c</code></td>
    <td>Makes <kbd>Ctrl</kbd>+<kbd>X</kbd> produce <kbd>Ctrl</kbd>+<kbd>C</kbd>. It also makes <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>X</kbd> produce <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>C</kbd>, etc.</td>
  </tr>
  <tr>
    <td><code>RWin::Return</code></td>
    <td>Disables the right <kbd>Win</kbd> by having it simply <a href="../commands/Return.htm">return</a>.</td>
  </tr>
</table>
<p>You can try out any of these examples by copying them into a new text file such as "Remap.ahk", then launching the file.</p>
<p>See the <a href="../KeyList.htm">Key List</a> for a complete list of key and mouse button names.</p>
<h2 id="remarks">Remarks</h2>
<p>The directives <a href="../commands/_IfWinActive.htm">#IfWinActive/Exist</a> can be used to make selected remappings active only in the windows you specify. For example:</p>
<pre>#IfWinActive ahk_class Notepad
a::b  <em>; Makes the 'a' key send a 'b' key, but only in Notepad.</em>
#IfWinActive  <em>; This puts subsequent remappings and hotkeys in effect for all windows.</em></pre>
<p>Remapping a key or button is "complete" in the following respects:</p>
<ul>
  <li>Holding down a modifier such as <kbd>Ctrl</kbd> or <kbd>Shift</kbd> while typing the origin key will put that modifier into effect for the destination key. For example, <code>b::a</code> would produce <kbd>Ctrl</kbd>+<kbd>A</kbd> if you press <kbd>Ctrl</kbd>+<kbd>B</kbd>.</li>
  <li><kbd>CapsLock</kbd> generally affects remapped keys in the same way as normal keys.</li>
  <li>The destination key or button is held down for as long as you continue to hold down the origin key. However, some games do not support remapping; in such cases, the keyboard and mouse will behave as though not remapped.</li>
  <li>Remapped keys will auto-repeat while being held down (except keys remapped to become mouse buttons).</li>
</ul>
<p id="HookHotkeys">Although a remapped key can trigger normal hotkeys, by default it cannot trigger mouse hotkeys or <a href="../commands/_UseHook.htm">hook hotkeys</a> (use <a href="../commands/ListHotkeys.htm">ListHotkeys</a> to discover which hotkeys are "hook"). For example, if the remapping <code>a::b</code> is in effect, pressing <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd> would trigger the <code>^!b</code> hotkey only if <code>^!b</code> is not a hook hotkey. If <code>^!b</code> is a hook hotkey, you can define <code>^!a</code> as a hotkey if you want <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd> to perform the same action as <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>B</kbd>. For example:</p>
<pre>a::b
^!a::
^!b::
ToolTip You pressed %A_ThisHotkey%.
return</pre>
<p>Alternatively, in <span class="ver">[v1.1.06]</span> and later, <a href="../commands/_InputLevel.htm">#InputLevel</a> can be used to override the default behaviour. For example:</p>
<pre>#InputLevel 1
a::b

#InputLevel 0
^!b::
ToolTip You pressed %A_ThisHotkey%.
return</pre>
<p id="SendPlay">If <a href="../commands/SendMode.htm">SendMode</a> is used in the auto-execute section (top part of the script), it affects all remappings. However, since remapping uses <a href="../commands/Send.htm#blind">Send {Blind}</a> and since the <a href="../commands/SendMode.htm">SendPlay mode</a> does not fully support  {Blind}, some remappings might not function properly in SendPlay mode (especially <kbd>Ctrl</kbd>, <kbd>Shift</kbd>, <kbd>Alt</kbd>, and <kbd>Win</kbd>). To work around this, avoid SendPlay in auto-execute section when you have remappings; then use the command <a href="../commands/Send.htm#SendPlay">SendPlay</a> vs. Send in other places throughout the script. Alternatively, you could translate your remappings into hotkeys (as described below) that explicitly call SendEvent vs. Send.</p>
<p id="actually">When a script is launched, each remapping is translated into a pair of <a href="../Hotkeys.htm">hotkeys</a>. For example, a script containing <code>a::b</code> actually contains the following two hotkeys instead:</p>
<pre>*<strong>a</strong>::
SetKeyDelay -1   <em>; If the destination key is a mouse button, SetMouseDelay is used instead.</em>
Send <a href="../commands/Send.htm#blind">{Blind}</a>{<strong>b</strong> DownR}  <em>; <a href="../commands/Send.htm#DownR">DownR</a> is like Down except that other Send commands in the script won't assume "b" should stay down during their Send.</em>
return

*<strong>a up</strong>::
SetKeyDelay -1  <em>; See note below for why press-duration is not specified with either of these SetKeyDelays.</em>
Send {Blind}{<strong>b</strong> up}
return</pre>
<p>However, the above hotkeys vary under the following circumstances:</p>
<ol>
  <li>When the source key is the left <kbd>Ctrl</kbd> and the destination key is <kbd>Alt</kbd>, the line <code>Send {Blind}{LAlt DownR}</code> is replaced by <code>Send {Blind}<strong>{LCtrl up}</strong>{LAlt DownR}</code>. The same is true if the source is the right <kbd>Ctrl</kbd>, except that <code>{RCtrl up}</code> is used.</li>
  <li>When a keyboard key is being remapped to become a mouse button (e.g. <code>RCtrl::RButton</code>), the hotkeys above use SetMouseDelay in place of SetKeyDelay. In addition, the first hotkey above is replaced by the following, which prevents the keyboard's auto-repeat feature from generating repeated mouse clicks:
    <pre>*RCtrl::
SetMouseDelay -1
if not GetKeyState("RButton")  <em>; i.e. the right mouse button isn't down yet.</em>
    Send {Blind}{RButton DownR}
return</pre>
  </li>
  <li>When the source is a <a href="../Hotkeys.htm#combo">custom combination</a> in <span class="ver">[v1.1.27.01+]</span>, the wildcard modifier (*) is omitted to allow the hotkeys to work.</li>
</ol>
<p>Prior to <span class="ver">[v1.1.27]</span>, <a href="../commands/Send.htm#DownTemp">DownTemp</a> was used instead of <a href="../commands/Send.htm#DownR">DownR</a>.</p>
<p>Note that SetKeyDelay's second parameter (<a href="../commands/SetKeyDelay.htm#dur">press duration</a>) is omitted in the hotkeys above. This is because press-duration does not apply to down-only or up-only events such as <code>{b down}</code> and <code>{b up}</code>. However, it does apply to changes in the state of the modifier keys (Shift, Ctrl, Alt, and Win), which affects remappings such as <code>a::B</code> or <code>a::^b</code>. Consequently, any press-duration a script puts into effect via its <a href="../Scripts.htm#auto">auto-execute section</a> will apply to all such remappings.</p>
<p>Since remappings are translated into hotkeys as described above, the <a href="../commands/Suspend.htm">Suspend</a> command affects them. Similarly, the <a href="../commands/Hotkey.htm">Hotkey</a> command can disable or modify a remapping. For example, the following two commands would disable the remapping <code>a::b</code>.</p>
<pre>Hotkey, *a, Off
Hotkey, *a up, Off</pre>
<p id="AltTab">Alt-tab issues: If you remap a key or mouse button to become <kbd>Alt</kbd>, that key will probably not be able to alt-tab properly. A possible work-around is to add the hotkey <code>*Tab::Send {Blind}{Tab}</code> -- but be aware that it will likely interfere with using the real <kbd>Alt</kbd> to alt-tab. Therefore, it should be used only when you alt-tab solely by means of remapped keys and/or <a href="../Hotkeys.htm#alttab">alt-tab hotkeys</a>.</p>
<p>In addition to the keys and mouse buttons on the <a href="../KeyList.htm">Key List</a> page, the source key may also be a virtual key (VKnn) or scan code (SCnnn) as described on the <a href="../KeyList.htm#SpecialKeys">special keys</a> page. The same is true for the destination key except that it may optionally specify a scan code after the virtual key. For example, <code>sc01e::vk42sc030</code> is equivalent to <code>a::b</code> on most keyboard layouts.</p>
<p>To disable a key rather than remapping it, make it a hotkey that simply <a href="../commands/Return.htm">returns</a>. For example, <code>F1::return</code> would disable <kbd>F1</kbd>.</p>
<p>The following keys are not supported by the built-in remapping method:</p>
<ul>
  <li>The mouse wheel (WheelUp/Down/Left/Right).</li>
  <li>Pause and Break as destination key names (since they match the names of commands). <span class="ver">[v1.1.32+]:</span> <code>vk13</code> or the corresponding scan code can be used instead.</li>
  <li>Curly braces {} as destination keys. Instead use the <a href="../commands/Send.htm#vk">VK/SC method</a>; e.g. <code>x::+sc01A</code> and <code>y::+sc01B</code>.</li>
  <li>A percent sign (%) as a destination key. Instead use the <a href="../commands/Send.htm#vk">VK/SC method</a>.</li>
  <li>"Return" as a destination key. Instead use "Enter".</li>
</ul>
<h2 id="moving-the-mouse-cursor">Moving the Mouse Cursor via the Keyboard</h2>
<p>The keyboard can be used to move the mouse cursor as demonstrated by the fully-featured <a href="../scripts/index.htm#NumpadMouse">Keyboard-To-Mouse script</a>. Since that script offers smooth cursor movement, acceleration, and other features, it is the recommended approach if you plan to do a lot of mousing with the keyboard. By contrast, the following example is a simpler demonstration:</p>
<pre>*#up::MouseMove, 0, -10, 0, R  <em>; Win+UpArrow hotkey =&gt; Move cursor upward</em>
*#Down::MouseMove, 0, 10, 0, R  <em>; Win+DownArrow =&gt; Move cursor downward</em>
*#Left::MouseMove, -10, 0, 0, R  <em>; Win+LeftArrow =&gt; Move cursor to the left</em>
*#Right::MouseMove, 10, 0, 0, R  <em>; Win+RightArrow =&gt; Move cursor to the right</em>

*&lt;#RCtrl::  <em>; LeftWin + RightControl =&gt; Left-click (hold down Control/Shift to Control-Click or Shift-Click).</em>
SendEvent {Blind}{LButton down}
KeyWait RCtrl  <em>; Prevents keyboard auto-repeat from repeating the mouse click.</em>
SendEvent {Blind}{LButton up}
return

*&lt;#AppsKey::  <em>; LeftWin + AppsKey =&gt; Right-click</em>
SendEvent {Blind}{RButton down}
KeyWait AppsKey  <em>; Prevents keyboard auto-repeat from repeating the mouse click.</em>
SendEvent {Blind}{RButton up}
return</pre>
<h2 id="registry">Remapping via the Registry's "Scancode Map"</h2>
<p><strong>Advantages:</strong></p>
<ul>
  <li>Registry remapping is generally more pure and effective than <a href="#Remap">AutoHotkey's remapping</a>. For example, it works in a broader variety of games, it has no known <a href="#AltTab">alt-tab issues</a>, and it is capable of firing AutoHotkey's hook hotkeys  (whereas AutoHotkey's remapping requires a <a href="#HookHotkeys">workaround</a>).</li>
  <li>If you choose to make the registry entries manually (explained below), absolutely no external software is needed to remap your keyboard. Even if you use <a href="https://www.bleepingcomputer.com/download/keytweak/">KeyTweak</a> to make the registry entries for you, KeyTweak does not need to stay running all the time (unlike AutoHotkey).</li>
</ul>
<p><strong>Disadvantages:</strong></p>
<ul>
  <li>Registry remapping is relatively permanent: a reboot is required to undo the changes or put new ones into effect.</li>
  <li>Its effect is global: it cannot create remappings specific to a particular user, application, or locale.</li>
  <li>It cannot send keystrokes that are modified by <kbd>Shift</kbd>, <kbd>Ctrl</kbd>, <kbd>Alt</kbd>, or <kbd>AltGr</kbd>. For example, it cannot remap a lowercase character to an uppercase one.</li>
  <li>It supports only the keyboard (AutoHotkey has <a href="#RemapMouse">mouse remapping</a> and some <a href="RemapJoystick.htm">limited joystick remapping</a>).</li>
</ul>
<p><strong>How to Apply Changes to the Registry:</strong> There are at least two methods to remap keys via the registry:</p>
<ol>
  <li>Use a program like <a href="https://www.bleepingcomputer.com/download/keytweak/">KeyTweak</a> (freeware) to visually remap your keys. It will change the registry for you.</li>
  <li>Remap keys manually by creating a .reg file (plain text) and loading it into the registry. This is demonstrated in the <a href="https://www.autohotkey.com/board/index.php?showtopic=8359#entry52760">archived forums</a>.</li>
</ol>
<h2 id="related">Related Topics</h2>
<ul>
  <li><a href="../KeyList.htm#Joystick">List of keys and mouse buttons</a></li>
  <li><a href="../commands/GetKeyState.htm#function">GetKeyState()</a></li>
  <li><a href="RemapJoystick.htm">Remapping a joystick</a></li>
</ul>
</body>
</html>
