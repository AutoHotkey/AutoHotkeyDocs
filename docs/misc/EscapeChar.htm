<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Escape Sequences - Definition &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="Escape sequences are used to indicate that specific characters should be interpreted differently than they normally would." />
<meta name="ahk:equiv-v1" content="commands/_EscapeChar.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Escape Sequences</h1>

<p>The escape character ` (back-tick or grave accent) is used to indicate that the character immediately following it should be interpreted differently than it normally would. This character is at the upper left corner of most English keyboards. Using this character rather than backslash avoids the need for double blackslashes in file paths.</p>

<table class="info">
  <tr>
    <th style="width:15%">Type This</th>
    <th>To Get This</th>
  </tr>
  <tr>
    <td>``</td>
    <td>` (literal accent; i.e. two consecutive escape characters result in a single literal character)</td>
  </tr>
  <tr>
    <td>`;</td>
    <td>&nbsp;; (literal semicolon). <strong>Note:</strong> This is necessary <u>only</u> if a semicolon has a space or tab to its left. If it does not, it will be recognized correctly without being escaped.</td>
  </tr>
  <tr>
    <td>`:</td>
    <td>: (literal colon). This is necessary only in a hotstring's triggering abbreviation.</td>
  </tr>
  <tr>
    <td>`n</td>
    <td>newline (linefeed/LF)</td>
  </tr>
  <tr>
    <td>`r</td>
    <td>carriage return (CR)</td>
  </tr>
  <tr>
    <td>`b</td>
    <td>backspace</td>
  </tr>
  <tr>
    <td>`t</td>
    <td>tab (the more typical horizontal variety)</td>
  </tr>
  <tr>
    <td>`s</td>
    <td>space</td>
  </tr>
  <tr>
    <td>`v</td>
    <td>vertical tab -- corresponds to Ascii value 11. It can also be manifest in some applications by typing <kbd>Control</kbd>+<kbd>K</kbd>.</td>
  </tr>
  <tr>
    <td>`a</td>
    <td>alert (bell) -- corresponds to Ascii value 7. It can also be manifest in some applications by typing <kbd>Control</kbd>+<kbd>G</kbd>.</td>
  </tr>
  <tr>
    <td>`f</td>
    <td>formfeed -- corresponds to Ascii value 12. It can also be manifest in some applications by typing <kbd>Control</kbd>+<kbd>L</kbd>.</td>
  </tr>
  <tr>
    <td>Send</td>
    <td>When the <a href="../commands/Send.htm">Send function</a> or <a href="../Hotstrings.htm">Hotstrings</a> are used in their default (non-raw) mode, characters such as {}^!+# have special meaning. Therefore, to use them literally in these cases, enclose them in braces. For example: <code>Send "{<strong>^</strong>}{<strong>!</strong>}{<strong>{</strong>}"</code>.</td>
  </tr>
  <tr id="quote">
    <td>`&quot; or `&apos;</td>
    <td>Single-quote marks (') and double-quote marks (") function identically, except that a string enclosed in single-quote marks can contain literal double-quote marks and vice versa. Therefore, to include an actual quote mark inside a literal string, escape the quote mark or enclose the string in the opposite type of quote mark. For example: <code>Var := "The color `"red`" was found."</code> or <code>Var := 'The color "red" was found.'</code>.</td>
  </tr>
</table>

<h2>Examples</h2>
<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a></p>
<pre>MsgBox "Line 1<strong>`n</strong>Line 2"</pre>
</div>

</body>
</html>
