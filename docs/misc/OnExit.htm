<!DOCTYPE HTML>
<html lang="en">
<head>
<title>OnExit() / OnExit - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The OnExit function or command specifies a callback function or subroutine to run automatically when the script exits." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>OnExit() / OnExit</h1>
<p>Specifies a <a href="../Functions.htm">callback function</a> or <a href="Gosub.htm">subroutine</a> to run automatically when the script exits.</p>

<h2 id="function">OnExit() <span class="ver">[v1.1.20+]</span></h2>
<pre class="Syntax"><span class="func">OnExit</span>(Func <span class="optional">, AddRemove</span>)</pre>

<h3 id="Function_Parameters">Parameters</h3>
<dl>

  <dt>Func</dt>
  <dd><p>A function name or <a href="../objects/Functor.htm">function object</a> to call when the script is exiting. The function can optionally define parameters as shown below. If an OnExit function returns a non-zero integer, the script does not exit (with some <a href="#close">rare exceptions</a>) and no more functions are called. Otherwise, the script exits after all registered functions are called.</p>
  <pre class="Syntax"><span class="func">ExitFunc</span>(<a href="#ExitReason">ExitReason</a>, <a href="ExitApp.htm">ExitCode</a>)</pre></dd>
  
  <dt>AddRemove</dt>
  <dd><p>If blank or omitted, it defaults to 1 (call the function after any previously registered functions). Otherwise, specify one of the following numbers:</p>
    <ul>
      <li>1 = Call the function after any previously registered functions.</li>
      <li>-1 = Call the function before any previously registered functions.</li>
      <li>0 = Do not call the function.</li>
    </ul>
  <p>If a label (subroutine) has been registered, it is always called first.</p>
  </dd>

</dl>

<h3 id="Function_Remarks">Remarks</h3>
<p>New scripts should use a function instead of a subroutine -- this reduces the risk of accidentally creating a script which can't be exited, and ensures that the exit code passed to Exit or ExitApp is preserved.</p>
<p>Any number of OnExit functions can be registered. If a label (subroutine) is also registered, the functions are called after the subroutine calls <a href="ExitApp.htm">ExitApp</a>. An OnExit function usually should not call ExitApp; if it does, the script terminates immediately.</p>

<h2 id="command">OnExit</h2>
<p class="warning"><strong>Deprecated:</strong> This command is not recommended for use in new scripts. Use the <a href="#function">OnExit</a> function instead.</p>
<pre class="Syntax"><span class="func">OnExit</span> <span class="optional">, Label</span></pre>

<h3 id="Command_Parameters">Parameters</h3>
<dl>

  <dt>Label</dt>
  <dd><p>If omitted, any previously registered label is unregistered. Otherwise, specify the name of the <a href="../misc/Labels.htm">label</a> whose contents will be executed (as a new <a href="../misc/Threads.htm">thread</a>) when the script exits by any means.</p></dd>
  
</dl>

<h3 id="Command_Remarks">Remarks</h3>
<p><strong>IMPORTANT:</strong> Since the specified subroutine is called instead of terminating the script, that subroutine must use the <a href="ExitApp.htm">ExitApp</a> command if termination is desired.</p>
<p>The built-in variable <strong>A_ExitReason</strong> is blank unless the OnExit subroutine  is currently running or has been called at least once by a prior exit attempt. If not blank, it is one of the words from the <a href="#ExitReason">table below</a>.</p>

<h2 id="Remarks">Remarks</h2>
<p>The OnExit callback function or subroutine is called when the script exits by any means (except when it is killed by something like "End Task"). It is also called whenever the <a href="_SingleInstance.htm">#SingleInstance</a> and <a href="Reload.htm">Reload</a> commands ask a previous instance to terminate.</p>
<p>A script can detect and optionally abort a system shutdown or logoff via <code>OnMessage(0x0011, "WM_QUERYENDSESSION")</code> (see <a href="OnMessage.htm#shutdown">OnMessage example #2</a> for a working script).</p>
<p>The OnExit <a href="../misc/Threads.htm">thread</a> does not obey <a href="_MaxThreads.htm">#MaxThreads</a> (it will always launch when needed). In addition, while it is running, it cannot be interrupted by any <a href="../misc/Threads.htm">thread</a>, including <a href="../Hotkeys.htm">hotkeys</a>, <a href="Menu.htm">custom menu items</a>, and <a href="SetTimer.htm">timed subroutines</a>. However, it will be interrupted (and the script will terminate) if the user chooses Exit from the tray menu or main menu, or the script is asked to terminate as a result of <a href="Reload.htm">Reload</a> or <a href="_SingleInstance.htm">#SingleInstance</a>. Because of this, the OnExit callback function or subroutine should be designed to finish quickly unless the user is aware of what it is doing.</p>
<p>If the OnExit <a href="../misc/Threads.htm">thread</a> encounters a failure condition such as a runtime error, the script will terminate. This prevents a flawed OnExit callback function or subroutine from making a script impossible to terminate.</p>
<p>If the OnExit <a href="../misc/Threads.htm">thread</a> was launched due to an <a href="Exit.htm">Exit</a> or <a href="ExitApp.htm">ExitApp</a> command that specified an exit code, in <span class="ver">[v1.1.19]</span> and earlier that code is ignored and no longer available. In <span class="ver">[v1.1.20+]</span> the initial exit code is used unless overridden by calling <a href="ExitApp.htm">ExitApp</a> with a new exit code.</p>
<p>Whenever an exit attempt is made, each OnExit callback function or subroutine starts off fresh with the default values for settings such as <a href="SendMode.htm">SendMode</a>. These defaults can be changed in the <a href="../Scripts.htm#auto">auto-execute section</a>.</p>

<h2 id="ExitReason">Exit Reasons</h2>
<table class="info">
  <tr>
    <th>Reason</th>
    <th abbr="Descr">Description</th>
  </tr>
  <tr id="logoff">
    <td>Logoff</td>
    <td>The user is logging off.</td>
  </tr>
  <tr>
    <td>Shutdown</td>
    <td>The system is being shut down or restarted, such as by the <a href="Shutdown.htm">Shutdown</a> command.</td>
  </tr>
  <tr id="close">
    <td>Close</td>
    <td>
      <p>The script was sent a WM_CLOSE or WM_QUIT message, had a critical error, or is being closed in some other way. Although all of these are unusual, WM_CLOSE might be caused by <a href="WinClose.htm">WinClose</a> having been used on the script's main window. To close (hide) the window without terminating the script, use <a href="WinHide.htm">WinHide</a>.</p>
      <p>If the script is exiting due to a critical error or its <a href="../Program.htm#main-window">main window</a> being destroyed, it will unconditionally terminate after the OnExit thread completes.</p>
      <p>If the main window is being destroyed, it may still exist but cannot be displayed. This condition can be detected by monitoring the WM_DESTROY message with <a href="OnMessage.htm">OnMessage()</a>.</p>
    </td>
  </tr>
  <tr>
    <td>Error</td>
    <td>A runtime error  occurred in a script that has no hotkeys and that is not <a href="_Persistent.htm">persistent</a>. An example of a runtime error is <a href="Run.htm">Run/RunWait</a> being unable to launch the specified program or document.</td>
  </tr>
  <tr>
    <td>Menu</td>
    <td>The user selected Exit from the main window's menu or from the standard tray menu.</td>
  </tr>
  <tr>
    <td>Exit</td>
    <td>The <a href="Exit.htm">Exit</a> or <a href="ExitApp.htm">ExitApp</a> command was used (includes <a href="Menu.htm">custom menu items</a>).</td>
  </tr>
  <tr>
    <td>Reload</td>
    <td>The script is being reloaded via the <a href="Reload.htm">Reload</a> command or menu item.</td>
  </tr>
  <tr>
    <td>Single</td>
    <td>The script is being replaced by a new instance of itself as a result of <a href="_SingleInstance.htm">#SingleInstance</a>.</td>
  </tr>
</table>

<h2 id="Related">Related</h2>
<p><a href="OnError.htm">OnError()</a>, <a href="OnMessage.htm">OnMessage()</a>, <a href="RegisterCallback.htm">RegisterCallback()</a>, <a href="OnClipboardChange.htm#function">OnClipboardChange()</a>, <a href="OnClipboardChange.htm#label">OnClipboardChange Label</a>, <a href="ExitApp.htm">ExitApp</a>, <a href="Shutdown.htm">Shutdown</a>, <a href="_Persistent.htm">#Persistent</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Gosub.htm">Gosub</a>, <a href="Return.htm">Return</a>, <a href="Menu.htm">Menu</a></p>

<h2 id="Examples">Examples</h2>
<div class="ex" id="ExFnVsCmd">
<p><a class="ex_number" href="#ExFnVsCmd"></a> Function vs. command.</p>
<p>Despite the different approach, both examples have the same effect; that is, they ask the user before exiting the script. To test them, right-click the tray icon and click Exit.</p>
<pre class="NoIndent"><a href="_Persistent.htm">#Persistent</a>  <em>; Prevent the script from exiting automatically.</em>
OnExit("ExitFunc")

ExitFunc(ExitReason, ExitCode)
{
    if ExitReason not in Logoff,Shutdown
    {
        MsgBox, 4, , Are you sure you want to exit?
        IfMsgBox, No
            return 1  <em>; OnExit functions must return non-zero to prevent exit.</em>
    }
    <em>; Do not call ExitApp -- that would prevent other OnExit functions from being called.</em>
}</pre>
<pre><a href="_Persistent.htm">#Persistent</a>  <em>; Prevent the script from exiting automatically.</em>
OnExit, ExitSub  
return

ExitSub:
if A_ExitReason not in Logoff,Shutdown  <em>; Avoid spaces around the comma in this line.</em>
{
    MsgBox, 4, , Are you sure you want to exit?
    IfMsgBox, No
        return
}
ExitApp  <em>; A script with an OnExit subroutine will not terminate unless the subroutine uses ExitApp.</em></pre>
</div>

<div class="ex" id="ExFnObj">
<p><a class="ex_number" href="#ExFnObj"></a> Registers an object to be called on exit.</p>
<pre><a href="_Persistent.htm">#Persistent</a>  <em>; Prevent the script from exiting automatically.</em>
OnExit(<a href="ObjBindMethod.htm">ObjBindMethod</a>(MyObject, "Exiting"))

class MyObject
{
    Exiting()
    {
        MsgBox, MyObject is cleaning up prior to exiting...
        <em>/*
        this.SayGoodbye()
        this.CloseNetworkConnections()
        */</em>
    }
}</pre>
</div>

</body>
</html>
