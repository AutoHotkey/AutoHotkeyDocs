<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Threads</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Threads</h1>

<p>The <em>current thread</em> is defined as the flow of execution invoked by the most recent event; examples include <a href="../Hotkeys.htm">hotkeys</a>, <a href="../commands/SetTimer.htm">SetTimer subroutines</a>, <a href="../commands/Menu.htm">custom menu items</a>, and <a href="../commands/Gui.htm#Events">GUI events</a>. The <em>current thread</em> can be executing commands within its own subroutine or within other subroutines called by that subroutine.</p>
<p>Although AutoHotkey doesn't actually use multiple threads, it simulates some of that behavior: If a second thread is started -- such as by pressing another hotkey while the previous is still running -- the <em>current thread</em> will be interrupted (temporarily halted) to allow the new thread to become <em>current</em>. If a third thread is started while the second is still running, both the second and first will be in a dormant state, and so on.</p>
<p>When the <em>current thread</em> finishes, the one most recently interrupted will be resumed, and so on, until all the threads finally finish. When resumed, a thread's settings for things such as <a href="ErrorLevel.htm">ErrorLevel</a> and <a href="../commands/SendMode.htm">SendMode</a> are automatically restored to what they were just prior to its interruption; in other words, a thread will experience no side-effects from having been interrupted (except for a possible change in the <a href="../commands/WinActivate.htm">active window</a>).</p>
<p>Note: The <a href="../commands/KeyHistory.htm">KeyHistory</a> command/menu-item shows how many threads are in an interrupted state and the <a href="../commands/ListHotkeys.htm">ListHotkeys</a> command/menu-item shows which hotkeys have threads.</p>
<p>A single script can have multiple simultaneous <a href="../commands/MsgBox.htm">MsgBox</a>, <a href="../commands/InputBox.htm">InputBox</a>, <a href="../commands/FileSelectFile.htm">FileSelectFile</a>, and <a href="../commands/FileSelectFolder.htm">FileSelectFolder</a> dialogs. This is achieved by launching a new thread (via <a href="../Hotkeys.htm">hotkey</a>, <a href="../commands/SetTimer.htm">timed subroutine</a>, <a href="../commands/Menu.htm">custom menu item</a>, etc.) while a prior thread already has a dialog displayed.</p>
<p>By default, a given <a href="../Hotkeys.htm">hotkey</a> or <a href="../Hotstrings.htm">hotstring</a> subroutine cannot be run a second time if it is already running. Use <a href="../commands/_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> to change this behavior.</p>
<h2>Thread Priority</h2>
<p>Any thread (<a href="../Hotkeys.htm">hotkey</a>, <a href="../commands/SetTimer.htm">timed subroutine</a>, <a href="../commands/Menu.htm">custom menu item</a>, etc.) with a priority lower than that of the <em>current thread</em> cannot interrupt it. During that time, such timers will not run, and any attempt by the user to create a thread (such as by pressing a <a href="../Hotkeys.htm">hotkey</a> or <a href="../commands/GuiControls.htm#Button">GUI button</a>) will have no effect, nor will it be buffered. Because of this, it is usually best to design high priority threads to finish quickly, or use <a href="../commands/Critical.htm">Critical</a> instead of making them high priority.</p>
<p>The default priority is 0. All threads use the default priority unless changed by one of the following methods:<br>
  1) A timed subroutine is given a specific priority via <a href="../commands/SetTimer.htm">SetTimer</a>.<br>
  2) A hotkey is given a specific priority via the <a href="../commands/Hotkey.htm">Hotkey</a> command.<br>
  3) 
  A <a href="../Hotstrings.htm">hotstring</a> is given a specific priority when it is defined, or via the <a href="../commands/_Hotstring.htm">#Hotstring</a> directive. <br>
  4) A custom menu item is given a specific priority via the <a href="../commands/Menu.htm">Menu</a> command.<br>
  5) The <em>current thread</em> sets its own priority via the <a href="../commands/Thread.htm">Thread</a> command.</p>
<p>The <a href="../commands/OnExit.htm">OnExit</a> subroutine (if any) will always run when called for, regardless of the <em>current thread</em>'s priority.</p>
</body>
</html>
