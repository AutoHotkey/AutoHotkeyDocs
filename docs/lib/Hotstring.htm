<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Hotstring - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The Hotstring function creates, modifies, enables, or disables a hotstring while the script is running." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Hotstring</h1>

<p>Creates, modifies, enables, or disables a <a href="../Hotstrings.htm">hotstring</a> while the script is running.</p>

<pre class="Syntax"><span class="func">Hotstring</span> String <span class="optional">, Replacement, OnOffToggle</span>
<span class="func">Hotstring</span> <a href="#NewOptions">NewOptions</a>
OldValue := <span class="func">Hotstring</span>("<a href="#EndChars">EndChars</a>" <span class="optional">, NewValue</span>)
OldValue := <span class="func">Hotstring</span>("<a href="#MouseReset">MouseReset</a>" <span class="optional">, NewValue</span>)
<span class="func">Hotstring</span> "Reset"
</pre>
<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>String</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The hotstring's trigger string, preceded by <a href="../Hotstrings.htm">the usual colons</a> and <a href="../Hotstrings.htm#Options">option characters</a>. For example, <code>"::btw"</code> or <code>":*:]d"</code>.</p>
    <p><em>String</em> may be matched to an existing hotstring by considering <a href="../Hotstrings.htm#C">case-sensitivity (C)</a>, <a href="../Hotstrings.htm#Question">word-sensitivity (?)</a>, activation criteria (as set by <a href="_HotIf.htm">#HotIf</a> or <a href="HotIf.htm">HotIf</a>) and the trigger string. For example, <code>"::btw"</code> and <code>"::BTW"</code> match unless the case-sensitive mode was enabled as a default, while <code>":C:btw"</code> and <code>":C:BTW"</code> never match. The <code>C</code> and <code>?</code> options may be included in <em>String</em> or set as defaults by the <a href="_Hotstring.htm">#Hotstring</a> directive or a previous call to <a href="#NewOptions">this function</a>.</p>
    <p>If the hotstring already exists, any options specified in <em>String</em> are put into effect, while all other options are left as is. However, since hotstrings with <code>C</code> or <code>?</code> are considered distinct from other hotstrings, it is not possible to add or remove these options. Instead, turn off the existing hotstring and create a new one.</p>
    <p>When a hotstring is first created -- either by the Hotstring function or the <a href="../Hotstrings.htm">double-colon syntax</a> in the script -- its trigger string and sequence of option characters becomes the permanent name of that hotstring as reflected by <a href="../Hotkeys.htm#ThisHotkey">ThisHotkey</a>. This name does not change even if the Hotstring function later accesses the hotstring with different option characters.</p>
  </dd>

  <dt>Replacement</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a> or <a href="../misc/Functor.htm">Function Object</a></p>
    <p>The replacement string, or a <a href="../Functions.htm">function</a> or <a href="../misc/Functor.htm">function object</a> to call (as a new <a href="../misc/Threads.htm">thread</a>) when the hotstring triggers.</p>
    <p>If <em>Replacement</em> is a function, it is called with one parameter, the <a href="../Hotkeys.htm#ThisHotkey">name</a> of the hotstring. Hotstrings defined with the <a href="../Hotstrings.htm">double-colon syntax</a> automatically use the parameter name <code>ThisHotkey</code>. Hotstrings can also be <a href="../Hotstrings.htm#Function">assigned a function name</a> without the Hotstring function.</p>
    <p>All strings are treated as replacement text. To make a hotstring call a function when triggered, pass the function by reference. Note that after reassigning the function of a hotstring, its original function can only be restored if it was <a href="../Hotstrings.htm#Function">given a name</a>.</p>
    <p>This parameter can be omitted if the hotstring already exists, in which case its replacement will not be changed. This is useful to change only the hotstring's options, or to turn it on or off.</p>
    <p class="note"><strong>Note</strong>: If this parameter is specified but the hotstring is disabled from a previous use of this function, the hotstring will remain disabled. To prevent this, include the word <code>"On"</code> in <em>OnOffToggle</em>.</p>
  </dd>

  <dt>OnOffToggle</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a> or <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>One of the following values:</p>
    <p><strong>On</strong> or <strong>1</strong> (true): Enables the hotstring.</p>
    <p><strong>Off</strong> or <strong>0</strong> (false): Disables the hotstring.</p>
    <p><strong>Toggle</strong> or <strong>-1</strong>: Sets the hotstring to the opposite state (enabled or disabled).</p>
  </dd>

</dl>

<h2 id="Errors">Errors</h2>
<p>This function throws an exception if the parameters are invalid or a memory allocation fails.</p>
<p>A <a href="Error.htm#TargetError">TargetError</a> is thrown if <em>Replacement</em> is omitted and <em>String</em> is valid but does not match an existing hotstring. This can be utilized to test for the existence of a hotstring. For example:</p>
<pre>try
    Hotstring "::btw"
catch TargetError
    MsgBox "The hotstring does not exist or it has no variant for the current IfWin criteria."</pre>

<h2 id="Remarks">Remarks</h2>
<p>The <a href="HotIf.htm">current HotIf setting</a> determines the <a href="#variant">variant</a> of a hotstring upon which the Hotstring function will operate.</p>
<p>If the script is <a href="Suspend.htm">suspended</a>, newly added/enabled hotstrings will also be suspended until the suspension is turned off (unless they are exempt as described in the <a href="Suspend.htm">Suspend</a> section).</p>
<p>The <a href="InstallKeybdHook.htm">keyboard</a> and/or <a href="InstallMouseHook.htm">mouse</a> hooks will be installed or removed if justified by the changes made by this function.</p>
<p>This function cannot directly enable or disable hotstrings in scripts other than its own.</p>
<p>Once a script has at least one hotstring, it becomes persistent, meaning that <a href="ExitApp.htm">ExitApp</a> rather than Exit should be used to terminate it. Hotstring scripts are also automatically <a href="_SingleInstance.htm">#SingleInstance</a> unless <code>#SingleInstance Off</code> has been specified.</p>

<h2 id="variant">Variant (Duplicate) Hotstrings</h2>
<p>A particular hotstring can be created more than once if each definition has different <a href="HotIf.htm">HotIf</a> criteria, <a href="../Hotstrings.htm#C">case-sensitivity</a> (<code>C</code> vs. <code>C0</code>/<code>C1</code>), or <a href="../Hotstrings.htm#Question">word-sensitivity</a> (<code>?</code>). These are known as <em>hotstring variants</em>. For example:</p>
<pre>HotIfWinActive "ahk_group CarForums"
Hotstring "::btw", "behind the wheel"
HotIfWinActive "Inter-Office Chat"
Hotstring "::btw", "back to work"
HotIfWinActive
Hotstring "::btw", "by the way"</pre>
<p>If more than one variant of a hotstring is eligible to fire, only the one created earliest will fire.</p>
<p>For more information about IfWin, see <a href="_HotIf.htm#general-remarks">#HotIf's General Remarks</a>.</p>

<h2 id="EndChars">EndChars</h2>
<pre class="Syntax">OldValue := <span class="func">Hotstring</span>("EndChars" <span class="optional">, NewValue</span>)</pre>
<p>Retrieves or modifies the set of characters used as <a href="../Hotstrings.htm#EndChars">ending characters</a> by the hotstring recognizer. For example:</p>
<pre>prev_chars := Hotstring("EndChars", "-()[]{}':;`"/\,.?!`n `t")
MsgBox "The previous value was: " prev_chars</pre>
<p><a href="Hotstring.htm#EndChars">#Hotstring EndChars</a> also affects this setting.</p>
<p>It is currently not possible to specify a different set of end characters for each hotstring.</p>

<h2 id="MouseReset">MouseReset</h2>
<pre class="Syntax">OldValue := <span class="func">Hotstring</span>("MouseReset" <span class="optional">, NewValue</span>)</pre>
<p>Retrieves or modifies the global setting which controls whether mouse clicks reset the hotstring recognizer, as described <a href="../Hotstrings.htm#NoMouse">here</a>. <em>NewValue</em> should be 1 (true) to enable mouse click detection and resetting of the hotstring recognizer, or 0 (false) to disable it. The return value is the setting which was in effect before the function was called.</p>
<p>The <a href="InstallMouseHook.htm">mouse</a> hook may be installed or removed if justified by the changes made by this function.</p>
<p><a href="_Hotstring.htm">#Hotstring NoMouse</a> also affects this setting, and is equivalent to specifying <code>false</code> for <em>NewValue</em>.</p>

<h2 id="Reset">Reset</h2>
<pre class="Syntax"><span class="func">Hotstring</span> "Reset"</pre>
<p>Immediately resets the hotstring recognizer. In other words, the script will begin waiting for an entirely new hotstring, eliminating from consideration anything you previously typed.</p>

<h2 id="NewOptions">Setting Default Options</h2>
<pre class="Syntax"><span class="func">Hotstring</span> NewOptions</pre>
<p>To set new default options for subsequently created hotstrings, pass the options to the Hotstring function without any leading or trailing colon. For example: <code>Hotstring "T"</code>.</p>
<p>Turning on <a href="../Hotstrings.htm#C">case-sensitivity (C)</a> or <a href="../Hotstrings.htm#Question">word-sensitivity (?)</a> also affects which existing hotstrings will be found by any subsequent calls to the Hotstring function. For example, <code>Hotstring ":T:btw"</code> will find <code>::BTW</code> by default, but not if <code>Hotstring "C"</code> or <code><a href="_Hotstring.htm">#Hotstring</a> C</code> is in effect. This can be undone or overridden by passing a mutually-exclusive option; for example, <code>C0</code> and <code>C1</code> override <code>C</code>.</p>

<h2 id="Related">Related</h2>
<p><a href="../Hotstrings.htm">Hotstrings</a>, <a href="_HotIf.htm">#HotIf</a>, <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a>, <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>, <a href="Suspend.htm">Suspend</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Thread.htm">Thread</a>, <a href="Critical.htm">Critical</a></p>

<h2 id="Examples">Examples</h2>

<div class="ex" id="ExHelper">
<p><a class="ex_number" href="#ExHelper"></a> Hotstring Helper. The following script might be useful if you are a heavy user of hotstrings. It's based on the v1 script created by Andreas Borutta. By pressing <kbd>Win</kbd>+<kbd>H</kbd> (or another hotkey of your choice), the currently selected text can be turned into a hotstring.  For example, if you have "by the way" selected in a word processor, pressing <kbd>Win</kbd>+<kbd>H</kbd> will prompt you for its abbreviation (e.g. btw), add the new hotstring to the script and activate it.</p>
<pre>#h::  <em>; Win+H hotkey</em>
{
    <em>; Get the text currently selected. The clipboard is used instead of
    ; EditGetSelectedText because it works in a greater variety of editors
    ; (namely word processors).  Save the current clipboard contents to be
    ; restored later. Although this handles only plain text, it seems better
    ; than nothing:</em>
    ClipboardOld := A_Clipboard
    A_Clipboard := "" <em>; Must start off blank for detection to work.</em>
    Send "^c"
    if !ClipWait(1)  <em>; ClipWait timed out.</em>
    {
        A_Clipboard := ClipboardOld <em>; Restore previous contents of clipboard before returning.</em>
        return
    }
    <em>; Replace CRLF and/or LF with `n for use in a "send-raw" hotstring:
    ; The same is done for any other characters that might otherwise
    ; be a problem in raw mode:</em>
    ClipContent := StrReplace(A_Clipboard, "``", "````")  <em>; Do this replacement first to avoid interfering with the others below.</em>
    ClipContent := StrReplace(ClipContent, "`r`n", "``n")
    ClipContent := StrReplace(ClipContent, "`n", "``n")
    ClipContent := StrReplace(ClipContent, "`t", "``t")
    ClipContent := StrReplace(ClipContent, "`;", "```;")
    A_Clipboard := ClipboardOld  <em>; Restore previous contents of clipboard.</em>
    ShowInputBox(":T:`::" ClipContent)
}

ShowInputBox(DefaultValue)
{
    <em>; This will move the input box's caret to a more friendly position:</em>
    SetTimer MoveCaret, 10
    <em>; Show the input box, providing the default hotstring:</em>
    IB := InputBox("
    (
    Type your abreviation at the indicated insertion point. You can also edit the replacement text if you wish.

    Example entry: :T:btw`::by the way
    )", "New Hotstring",, DefaultValue)
    if IB.Result = "Cancel"  <em>; The user pressed Cancel.</em>
        return

    if RegExMatch(IB.Value, "(?P&lt;Label&gt;:.*?:(?P&lt;Abbreviation&gt;.*?))::(?P&lt;Replacement&gt;.*)", &amp;Entered)
    {
        if !Entered.Abbreviation
            MsgText := "You didn't provide an abbreviation"
        else if !Entered.Replacement
            MsgText := "You didn't provide a replacement"
        else
        {
            Hotstring Entered.Label, Entered.Replacement  <em>; Enable the hotstring now.</em>
            FileAppend "`n" IB.Value, A_ScriptFullPath  <em>; Save the hotstring for later use.</em>
        }
    }
    else
        MsgText := "The hotstring appears to be improperly formatted"

    if IsSet(MsgText)
    {
        Result := MsgBox(MsgText ". Would you like to try again?",, 4)
        if Result = "Yes"
            ShowInputBox(DefaultValue)
    }
    
    MoveCaret()
    {
        WinWait "New Hotstring"
        <em>; Otherwise, move the input box's insertion point to where the user will type the abbreviation.</em>
        Send "{Home}{Right 3}"
        SetTimer , 0
    }
}</pre>
</div>

</body>
</html>
