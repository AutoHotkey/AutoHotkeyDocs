<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Gui Object - Methods &amp; Properties | AutoHotkey v2</title>
<meta name="description" content="The Gui object provides an interface to create a window, add controls, modify the window, and retrieve information about the window. Such windows can be used as data entry forms or custom user interfaces." />
<meta name="ahk:equiv-v1" content="lib/Gui.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Gui Object</h1>
<pre class="NoIndent">class Gui extends Object</pre>

<p>Provides an interface to create a window, add controls, modify the window, and retrieve information about the window. Such windows can be used as data entry forms or custom user interfaces.</p>
<p>Gui objects can be created with <a href="#Call">Gui()</a> and retrieved with <a href="GuiFromHwnd.htm">GuiFromHwnd</a>.</p>

<p>"MyGui" is used below as a placeholder for any Gui object (and a variable name in examples), as "Gui" is the class itself.</p>
<p>In addition to the methods and property inherited from <a href="Object.htm">Object</a>, Gui objects have the following predefined methods and properties.</p>

<h2 id="toc">Table of Contents</h2>
<ul class="indent">
  <li><a href="#Static_Methods">Static Methods</a>:
    <ul>
      <li><a href="#Call">Call</a>: Creates a new window.</li>
    </ul>
  </li>
  <li><a href="#Methods">Methods</a>:
    <ul>
      <li><a href="#Add">Add</a>: Creates a new control and adds it to the window.</li>
      <li><a href="#Destroy">Destroy</a>: Deletes the window.</li>
      <li><a href="#Flash">Flash</a>: Blinks the window and its taskbar button.</li>
      <li><a href="#GetClientPos">GetClientPos</a>: Retrieves the position and size of the window&#39;s client area.</li>
      <li><a href="#GetPos">GetPos</a>: Retrieves the position and size of the window.</li>
      <li><a href="#Hide">Hide</a>: Hides the window.</li>
      <li><a href="#Maximize">Maximize</a>: Unhides and maximizes the window.</li>
      <li><a href="#Minimize">Minimize</a>: Unhides and minimizes the window.</li>
      <li><a href="#Move">Move</a>: Moves and/or resizes the window.</li>
      <li><a href="#OnEvent">OnEvent</a>: Registers a function or method to be called when the given event is raised.</li>
      <li><a href="#Opt">Opt</a>: Sets various options and styles for the appearance and behavior of the window.</li>
      <li><a href="#Restore">Restore</a>: Unhides and unminimizes or unmaximizes the window.</li>
      <li><a href="#SetFont">SetFont</a>: Sets the typeface, size, style, and text color for subsequently created controls.</li>
      <li><a href="#Show">Show</a>: Displays the window. It can also minimize, maximize, or move the window.</li>
      <li><a href="#Submit">Submit</a>: Collects the values from named controls and composes them into an <a href="Object.htm">Object</a>. Optionally hides the window.</li>
      <li><a href="#__Enum">__Enum</a>: Enumerates the window's controls.</li>
      <li><a href="#__New">__New</a>: Constructs a new Gui instance.</li>
    </ul>
  </li>
  <li><a href="#Properties">Properties</a>:
    <ul>
      <li><a href="#BackColor">BackColor</a>: Retrieves or sets the background color of the window.</li>
      <li><a href="#FocusedCtrl">FocusedCtrl</a>: Retrieves the <a href="GuiControl.htm">GuiControl object</a> of the window's focused control.</li>
      <li><a href="#Hwnd">Hwnd</a>: Retrieves the window handle (HWND) of the window.</li>
      <li><a href="#MarginX">MarginX</a>: Retrieves or sets the size of horizontal margins between sides and subsequently created controls.</li>
      <li><a href="#MarginY">MarginY</a>: Retrieves or sets the size of vertical margins between sides and subsequently created controls.</li>
      <li><a href="#MenuBar">MenuBar</a>: Retrieves or sets the window's menu bar.</li>
      <li><a href="#Name">Name</a>: Retrieves or sets a custom name for the window.</li>
      <li><a href="#Title">Title</a>: Retrieves or sets the window's title.</li>
      <li><a href="#__Item">__Item</a>: Retrieves the <a href="GuiControl.htm">GuiControl object</a> associated with the specified name, text, ClassNN or HWND.</li>
    </ul>
  </li>
  <li>General:
    <ul>
      <li><a href="#Navigate">Keyboard Navigation</a></li>
      <li><a href="#Appear">Window Appearance</a></li>
      <li><a href="#GenRemarks">General Remarks</a></li>
      <li><a href="#Related">Related</a></li>
      <li><a href="#Examples">Examples</a></li>
    </ul>
  </li>
</ul>

<h2 id="Static_Methods">Static Methods</h2>
<div class="methodShort" id="Call">
<h3>Call</h3>
<p>Creates a new window.</p>
<pre class="Syntax">MyGui := Gui(<span class="optional">Options, Title, EventObj</span>)
MyGui := Gui.<span class="func">Call</span>(<span class="optional">Options, Title, EventObj</span>)</pre>
<h4 id="Call_Parameters">Parameters</h4>
<dl>
  <dt>Options</dt><dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>Any of the options supported by <a href="#Opt">Gui.Opt</a>.</p>
  </dd>
  <dt>Title</dt><dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If omitted, it defaults to <a href="../Variables.htm#ScriptName">A_ScriptName</a>. Otherwise, specify the window title.</p>
  </dd>
  <dt id="EventObj">EventObj</dt><dd>
    <p>Type: <a href="../Concepts.htm#objects">Object</a></p>
    <p>An "event sink", or object to bind events to. If <em>EventObj</em> is specified, <a href="GuiOnEvent.htm">OnEvent</a>, <a href="GuiOnNotify.htm">OnNotify</a> and <a href="GuiOnCommand.htm">OnCommand</a> can be used to register methods of <em>EventObj</em> to be called when an event is raised.</p>
  </dd>
</dl>
<h4 id="Call_Return_Value">Return Value</h4>
<p>Type: <a href="../Concepts.htm#objects">Object</a></p>
<p>This method or function returns a Gui object.</p>
</div>

<h2 id="Methods">Methods</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>Creates a new control and adds it to the window.</p>
<pre class="Syntax"><a href="GuiControl.htm">GuiCtrl</a> := MyGui.<span class="func">Add</span>(ControlType <span class="optional">, Options, Text</span>)
<a href="GuiControl.htm">GuiCtrl</a> := MyGui.<span class="func">Add</span>ControlType(<span class="optional">Options, Text</span>)</pre>
<h4 id="Add_Parameters">Parameters</h4>
<dl>
  <dt>ControlType</dt><dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>This is one of the following: <a href="GuiControls.htm#ActiveX">ActiveX</a>, <a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#CheckBox">CheckBox</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#Custom">Custom</a>, <a href="GuiControls.htm#DateTime">DateTime</a>, <a href="GuiControls.htm#DropDownList">DropDownList (or DDL)</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Hotkey">Hotkey</a>, <a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#ListBox">ListBox</a>, <a href="GuiControls.htm#ListView">ListView</a>, <a href="GuiControls.htm#MonthCal">MonthCal</a>, <a href="GuiControls.htm#Picture">Picture (or Pic)</a>, <a href="GuiControls.htm#Progress">Progress</a>, <a href="GuiControls.htm#Radio">Radio</a>, <a href="GuiControls.htm#Slider">Slider</a>, <a href="GuiControls.htm#StatusBar">StatusBar</a>, <a href="GuiControls.htm#Tab">Tab</a>, <a href="GuiControls.htm#Tab">Tab2</a>, <a href="GuiControls.htm#Tab">Tab3</a>, <a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#TreeView">TreeView</a>, <a href="GuiControls.htm#UpDown">UpDown</a></p>
  <p>For example:</p>
  <pre>MyGui := Gui()
MyGui.Add("Text",, "Please enter your name:")
MyGui.AddEdit("vName")
MyGui.Show</pre></dd>
  <dt>Options</dt><dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If blank or omitted, the control starts off at its defaults. Otherwise, specify one or more of the following options and styles, each separated from the next with one or more spaces or tabs.</p>
    <p id="PosSize"><strong>Positioning and Sizing of Controls</strong></p>
  <p>If some dimensions and/or coordinates are omitted from <em>Options</em>, the control will be positioned relative to the previous control and/or sized automatically according to its nature and contents.</p>
  <p>The following options are supported:</p>
  <p id="R"><strong>R</strong><em>n</em>: Rows of text (where <em>n</em> is any number, even a floating point number such as <code class="no-highlight">r2.5</code>). R is often preferable to specifying H (Height). If both the R and H options are present, R will take precedence. For a GroupBox, this setting is the number of controls for which to reserve space inside the box. For <a href="GuiControls.htm#DropDownList">DropDownLists</a>, <a href="GuiControls.htm#ComboBox">ComboBoxes</a>, and <a href="GuiControls.htm#ListBox">ListBoxes</a>, it is the number of items visible at one time inside the list portion of the control (but it is often desirable to omit both the R and H options for DropDownList and ComboBox, as the popup list will automatically take advantage of the available height of the user's desktop). For other control types, R is the number of rows of text that can visibly fit inside the control.</p>
  <p><strong>W</strong><em>n</em>: Width (where <em>n</em> is any number in pixels). If omitted, the width is calculated automatically for some control types based on their contents; tab controls default to 30 times the current font size, plus 3 times the <a href="#MarginX">X-margin</a>; vertical Progress Bars default to two times the current font size; and horizontal Progress Bars, horizontal Sliders, DropDownLists, ComboBoxes, ListBoxes, GroupBoxes, Edits, and Hotkeys default to 15 times the current font size (except GroupBoxes, which multiply by 18 to provide room inside for margins).</p>
  <p><strong>H</strong><em>n</em>: Height (where <em>n</em> is any number in pixels). If both the H and R options are absent, DropDownLists, ComboBoxes, ListBoxes, and empty multi-line Edit controls default to 3 rows; GroupBoxes default to 2 rows; vertical Sliders and Progress Bars default to 5 rows; horizontal Sliders default to 30 pixels (except if a thickness has been specified); horizontal Progress Bars default to 2 times the current font size; Hotkey controls default to 1 row; and Tab controls default to 10 rows. For the other control types, the height is calculated automatically based on their contents. Note that for DropDownLists and ComboBoxes, H is the combined height of the control's always-visible portion and its list portion (but even if the height is set too low, at least one item will always be visible in the list). Also, for all types of controls, specifying the number of rows via the R option is usually preferable to using H because it prevents a control from showing partial/incomplete rows of text.</p>
  <p><strong>WP</strong><em>&#177;n</em>, <strong>HP</strong><em>&#177;n</em> (where <em>n</em> is any number in pixels) can be used to set the width and/or height of a control equal to the previously added control's width or height, with an optional plus or minus adjustment. For example, <code>wp</code> would set a control's width to that of the previous control, and <code class="no-highlight">wp-50</code> would set it equal to 50 less than that of the previous control.</p>
  <p id="XY"><strong>X</strong><em>n</em>, <strong>Y</strong><em>n</em>: X-position, Y-position (where <em>n</em> is any number in pixels). For example, specifying <code>x0 y0</code> would position the control in the upper left corner of the window's client area, which is the area beneath the title bar and menu bar (if any).</p>
  <p id="PosPlus"><strong>X+</strong><em>n</em>, <strong>Y+</strong><em>n</em> (where <em>n</em> is any number in pixels): An optional plus sign can be included to position a control relative to the right or bottom edge (respectively) of the control that was previously added. For example, specifying <code class="no-highlight">y+10</code> would position the control 10 pixels beneath the bottom of the previous control rather than using the standard padding distance. Similarly, specifying <code class="no-highlight">x+10</code> would position the control 10 pixels to the right of the previous control's right edge. Since negative numbers such as <code class="no-highlight">x-10</code> are reserved for absolute positioning, to use a negative offset, include a plus sign in front of it. For example: <code class="no-highlight">x+-10</code>.</p>
  <p id="PosPlusMargin">For X+ and Y+, the letter <strong>M</strong> can be used as a substitute for the window's current <a href="#MarginX">margin</a>. For example, <code>x+m</code> uses the right edge of the previous control plus the standard padding distance. <code>xp y+m</code> positions a control below the previous control, whereas specifying a relative X coordinate on its own (with XP or X+) would normally imply <code>yp</code> by default.</p>
  <p id="xp"><strong>XP</strong><em>&#177;n</em>, <strong>YP</strong><em>&#177;n</em> (where <em>n</em> is any number in pixels) can be used to position controls relative to the previous control's upper left corner, which is often useful for enclosing controls in a <a href="GuiControls.htm#GroupBox">GroupBox</a>.</p>
  <p id="xm"><strong>XM</strong><em>&#177;n</em> and <strong>YM</strong><em>&#177;n</em> (where <em>n</em> is any number in pixels) can be used to position a control at the leftmost and topmost <a href="#MarginX">margins</a> of the window, respectively, with an optional plus or minus adjustment.</p>
  <p id="xs"><strong>XS</strong><em>&#177;n</em> and <strong>YS</strong><em>&#177;n</em> (where <em>n</em> is any number in pixels): These are similar to XM and YM except that they refer to coordinates that were saved by having previously added a control with the word <a href="#Section">Section</a> in its options (the first control of the window always starts a new section, even if that word isn't specified in its options). For example:</p>
  <pre>MyGui := Gui()
MyGui.Add("Edit", "w600")  <em>; Add a fairly wide edit control at the top of the window.</em>
MyGui.Add("Text", "<strong>Section</strong>", "First Name:")  <em>; Save this control's position and start a new section.</em>
MyGui.Add("Text",, "Last Name:")
MyGui.Add("Edit", "<strong>ys</strong>")  <em>; Start a new column within this section.</em>
MyGui.Add("Edit")
MyGui.Show</pre>
  <p>XS and YS may optionally be followed by a plus/minus sign and a number. Also, it is possible to specify both the word <a href="#Section">Section</a> and XS/YS in a control's options; this uses the previous section for itself but establishes a new section for subsequent controls.</p>
  <p>Omitting either X, Y or both is useful to make a GUI layout automatically adjust to any future changes you might make to the size of controls or font. By contrast, specifying an absolute position for every control might require you to manually shift the position of all controls that lie beneath and/or to the right of a control that is being enlarged or reduced.</p>
  <p>If both X and Y are omitted, the control will be positioned beneath the previous control using a standard padding distance (the current <a href="#MarginX">margin</a>). Consecutive Text or Link controls are given additional vertical padding, so that they typically align better in cases where a column of Edit, DDL or similar-sized controls are later added to their right. To use only the standard vertical margin, specify <code>y+m</code> or any value for X.</p>
  <p>If only one component is omitted, its default value depends on which option was used to specify the other component:</p>
  <table class="info">
    <tr><th>Specified X</th><th>Default for Y</th></tr>
    <tr><td>X<em>n</em> or XM</td><td>Beneath all previous controls (maximum Y extent plus margin).</td></tr>
    <tr><td>XS</td><td>Beneath all previous controls since the most recent use of the <a href="#Section">Section</a> option.</td></tr>
    <tr><td>X+<em>n</em> or XP+<em>nonzero</em></td><td>Same as the previous control's top edge (<a href="#xp">YP</a>).</td></tr>
    <tr><td>XP or XP+0</td><td>Below the previous control (bottom edge plus margin).</td></tr>
    <tr><th>Specified Y</th><th>Default for X</th></tr>
    <tr><td>Y<em>n</em> or YM</td><td>To the right of all previous controls (maximum X extent plus margin).</td></tr>
    <tr><td>YS</td><td>To the right of all previous controls since the most recent use of the <a href="#Section">Section</a> option.</td></tr>
    <tr><td>Y+<em>n</em> or YP+<em>nonzero</em></td><td>Same as the previous control's left edge (<a href="#xp">XP</a>).</td></tr>
    <tr><td>YP or YP+0</td><td>To the right of the previous control (right edge plus margin).</td></tr>
  </table>
  
  <p id="Events"><strong>Storing and Responding to User Input</strong></p>
  <p id="var"><strong>V:</strong> Sets the control's <a href="GuiControl.htm#Name">Name</a>. Specify the name immediately after the letter V, which is not included in the name. For example, specifying <code><strong>v</strong>MyEdit</code> would name the control "MyEdit".</p>
  <p id="label"><strong>Events:</strong> Event handlers (such as a function which is called automatically when the user clicks or changes a control) cannot be set within the control's <em>Options</em>. Instead, <a href="#OnEvent">OnEvent</a> can be used to register a callback function or method for each event of interest.</p>
  
  <p id="OtherOptions"><strong>Common Options and Styles for Controls</strong></p>
  <p>Note: In the absence of a preceding sign, a plus sign is assumed; for example, <code>Wrap</code> is the same as <code>+Wrap</code>. By contrast, <code>-Wrap</code> would remove the word-wrapping property.</p>
  <p id="AltSubmit"><strong>AltSubmit:</strong> Uses alternate submit method. For DropDownList, ComboBox, ListBox and Tab, this causes <a href="#Submit">Gui.Submit</a> to store the position of the selected item rather than its text. If no item is selected, a ComboBox will still store the text of its edit field.</p>
  <p><strong>C:</strong> Color of text (has no effect on <a href="GuiControls.htm#Button">buttons</a> and <a href="GuiControls.htm#StatusBar">status bars</a>). Specify the letter C followed immediately by a color name (see <a href="../misc/Colors.htm">color chart</a>) or RGB value (the 0x prefix is optional). Examples: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
  <p id="Disabled"><strong>Disabled:</strong> Makes an input-capable control appear in a disabled state, which prevents the user from focusing or modifying its contents. Use <a href="GuiControl.htm#Enabled">GuiCtrl.Enabled</a> to enable it later. Note: To make an Edit control read-only, specify the string <code>ReadOnly</code> instead. Also, the word Disabled may optionally be followed immediately by a 0 or 1 to indicate the starting state (0 for enabled and 1 for disabled). In other words, <code>Disabled</code> and <code>"Disabled" VarContainingOne</code> are the same.</p>
  <p id="Hidden"><strong>Hidden:</strong> The control is initially invisible. Use <a href="GuiControl.htm#Visible">GuiCtrl.Visible</a> to show it later. The word Hidden may optionally be followed immediately by a 0 or 1 to indicate the starting state (0 for visible and 1 for hidden).  In other words, <code>Hidden</code> and <code>"Hidden" VarContainingOne</code> are the same.</p>
  <p><strong>Left:</strong> Left-justifies the control's text within its available width. This option affects the following controls: Text, Edit, Button, CheckBox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime.</p>
  <p><strong>Right:</strong> Right-justifies the control's text within its available width. For checkboxes and radio buttons, this also puts the box itself on the right side of the control rather than the left. This option affects the following controls: Text, Edit, Button, CheckBox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime, Link.</p>
  <p><strong>Center:</strong> Centers the control's text within its available width. This option affects the following controls: Text, Edit, Button, CheckBox, Radio, Slider, GroupBox.</p>
  <p id="Section"><strong>Section:</strong> Starts a new section and saves this control's position for later use with the XS and YS positioning options described <a href="#xs">above</a>.</p>
  <p id="Tabstop"><strong>Tabstop:</strong> Use <code>-Tabstop</code> (minus Tabstop) to have an input-capable control skipped over when the user presses <kbd>Tab</kbd> to navigate.</p>
  <p id="Wrap"><strong>Wrap:</strong> Enables word-wrapping of the control's contents within its available width. Since nearly all control types start off with word-wrapping enabled, use <code>-Wrap</code> to disable word-wrapping.</p>
  <p><strong>VScroll:</strong> Provides a vertical scroll bar if appropriate for this type of control.</p>
  <p><strong>HScroll:</strong> Provides a horizontal scroll bar if appropriate for this type of control. The rest of this paragraph applies to <a href="GuiControls.htm#ListBox">ListBox</a> only. The horizontal scrolling width defaults to 3 times the width of the ListBox. To specify a different scrolling width, include a number immediately after the word HScroll. For example, <code>HScroll500</code> would allow 500 pixels of scrolling inside the ListBox. However, if the specified scrolling width is smaller than the width of the ListBox, no scroll bar will be shown (though the mere presence of <code>HScroll</code> makes it possible for the horizontal scroll bar to be added later via <code>MyScrollBar.<a href="GuiControl.htm#Opt">Opt</a>("+HScroll500")</code>, which is otherwise impossible).</p>
  
  <p><strong>Uncommon Options and Styles for Controls</strong></p>
  <p id="BackgroundTrans"><strong>BackgroundTrans:</strong> Uses a transparent background, which allows any control that lies behind a Text, Picture, or GroupBox control to show through. For example, a transparent Text control displayed on top of a Picture control would make the text appear to be part of the picture. Use <code>GuiCtrl.<a href="GuiControl.htm#Opt">Opt</a>("+Background")</code> to remove this option later. See <a href="GuiControls.htm#PicAltSubmit">Picture control's AltSubmit section</a> for more information about transparent images. Known limitation: BackgroundTrans might not work properly for controls inside a <a href="GuiControls.htm#Tab">Tab control</a> that contains a <a href="ListView.htm">ListView</a>. If a control type does not support this option, an error is thrown.</p>
  <p id="Background"><strong>Background</strong><em>Color</em>: Changes the background color of the control. Replace <em>Color</em> with a color name (see <a href="../misc/Colors.htm">color chart</a>) or RGB value (the 0x prefix is optional). Examples: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. If this option is not used, or if <code>+Background</code> is used with no suffix, a <a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#Picture">Picture</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#CheckBox">CheckBox</a>, <a href="GuiControls.htm#Radio">Radio</a>, <a href="GuiControls.htm#Slider">Slider</a>, <a href="GuiControls.htm#Tab">Tab</a> or <a href="GuiControls.htm#Link">Link</a> control uses the background color set by <a href="#BackColor">Gui.BackColor</a> (or if none or other control type, the system's default background color). Specifying <code>BackgroundDefault</code> or <code>-Background</code> applies the system's default background color. For example, a control can be restored to the system's default color via <code>LV.Opt("+BackgroundDefault")</code>. If a control type does not support this option, an error is thrown.</p>
  <p><strong>Border:</strong> Provides a thin-line border around the control. Most controls do not need this because they already have a type-specific border. When adding a border to an <em>existing</em> control, it might be necessary to increase the control's width and height by 1 pixel.</p>
  <p id="Redraw"><strong>Redraw:</strong> When used with <a href="GuiControl.htm#Opt">GuiCtrl.Opt</a>, this option enables or disables redraw (visual updates) for a control by sending it a <a href="https://learn.microsoft.com/windows/win32/gdi/wm-setredraw">WM_SETREDRAW message</a>. See <a href="GuiControl.htm#redraw-remarks">Redraw</a> for more details.</p>
  <p><strong>Theme:</strong> This option can be used to override the window's current theme setting for the newly created control. It has no effect when used on an existing control; however, this may change in a future version. See GUI's <a href="#Theme">+/-Theme</a> option for details.</p>
  <p><strong>(Unnamed Style):</strong> Specify a plus or minus sign followed immediately by a decimal or hexadecimal <a href="../misc/Styles.htm">style number</a>. If the sign is omitted, a plus sign is assumed.</p>
  <p><strong>(Unnamed ExStyle):</strong> Specify a plus or minus sign followed immediately by the letter E and a decimal or hexadecimal extended style number. If the sign is omitted, a plus sign is assumed. For example, <code>E0x200</code> would add the WS_EX_CLIENTEDGE style, which provides a border with a sunken edge that might be appropriate for pictures and other controls. For other extended styles not documented here (since they are rarely used), see <a href="https://learn.microsoft.com/windows/win32/winmsg/extended-window-styles">Extended Window Styles | Microsoft Docs</a> for a complete list.</p></dd>
  <dt>Text</dt><dd>Depending on the specified control type, a string, number or an array.</dd>
</dl>
<h4 id="Add_Return_Value">Return Value</h4>
<p>Type: <a href="../Concepts.htm#objects">Object</a></p>
<p>This method returns a <a href="GuiControl.htm">GuiControl object</a>.</p>
</div>

<div class="methodShort" id="Destroy">
<h3>Destroy</h3>
<p>Removes the window and all its controls, freeing the corresponding memory and system resources.</p>
<pre class="Syntax">MyGui.<span class="func">Destroy</span>()</pre>
<p>If <code>MyGui.Destroy()</code> is not used, the window is automatically destroyed when the Gui object is deleted (see <a href="#deleted">General Remarks</a> for details). All GUI windows are automatically destroyed when the script exits.</p>
</div>

<div class="methodShort" id="Flash">
<h3>Flash</h3>
<p>Blinks the window's button in the taskbar.</p>
<pre class="Syntax">MyGui.<span class="func">Flash</span>(<span class="optional">Blink</span>)</pre>
<h4 id="Flash_Parameters">Parameters</h4>
<dl>
  <dt>Blink</dt><dd>
    <p>Type: <a href="../Concepts.htm#boolean">Boolean</a></p>
    <p>If omitted, it defaults to true.</p>
    <p>If <strong>true</strong>, the window's button in the taskbar will blink. This is done by inverting the color of the window's title bar and/or taskbar button (if it has one).</p>
    <p>If <strong>false</strong>, the original colors of the title bar and taskbar button will be restored (but the actual behavior might vary depending on OS version).</p>
  </dd>
</dl>
<h4 id="Flash_Remarks">Remarks</h4>
<p>In the below example, the window will blink three times because each pair of flashes inverts then restores its appearance:</p>
<pre>Loop 6
{
    MyGui.Flash
    Sleep 500  <em>; It's quite sensitive to this value; altering it may change the behavior in unexpected ways.</em>
}</pre>
</div>

<div class="methodShort" id="GetClientPos">
<h3>GetClientPos</h3>
<p>Retrieves the position and size of the window's client area.</p>
<pre class="Syntax">MyGui.<span class="func">GetClientPos</span>(<span class="optional">&amp;X, &amp;Y, &amp;Width, &amp;Height</span>)</pre>
<h4 id="GetClientPos_Parameters">Parameters</h4>
<dl>
  <dt>&amp;X, &amp;Y</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>If omitted, the corresponding values will not be stored. Otherwise, specify references to the output variables in which to store the X and Y coordinates of the client area's upper left corner.</p>
  </dd>
  <dt>&amp;Width, &amp;Height</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>If omitted, the corresponding values will not be stored. Otherwise, specify references to the output variables in which to store the width and height of the client area.</p>
    <p>Width is the horizontal distance between the left and right side of the client area, and height the vertical distance between the top and bottom side (in pixels).</p>
  </dd>
</dl>
<h4 id="GetClientPos_Remarks">Remarks</h4>
<p>The client area is the part of the window which can contain controls. It excludes the window's title bar, menu (if it has a standard one) and borders.  The position and size of the client area are less dependent on OS version and theme than the values returned by <a href="#GetPos">Gui.GetPos</a>.</p>
<p>Unlike <a href="WinGetClientPos.htm">WinGetClientPos</a>, this method applies <a href="#DPIScale">DPI scaling</a> to <em>Width</em> and <em>Height</em> (unless the <code>-DPIScale</code> option was used).</p>
</div>

<div class="methodShort" id="GetPos">
<h3>GetPos</h3>
<p>Retrieves the position and size of the window.</p>
<pre class="Syntax">MyGui.<span class="func">GetPos</span>(<span class="optional">&amp;X, &amp;Y, &amp;Width, &amp;Height</span>)</pre>
<h4 id="GetPos_Parameters">Parameters</h4>
<dl>
  <dt>&amp;X, &amp;Y</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>If omitted, the corresponding values will not be stored. Otherwise, specify references to the output variables in which to store the X and Y coordinates of the window's upper left corner, in screen coordinates.</p>
  </dd>
  <dt>&amp;Width, &amp;Height</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>If omitted, the corresponding values will not be stored. Otherwise, specify references to the output variables in which to store the width and height of the window.</p>
    <p>Width is the horizontal distance between the left and right side of the window, and height the vertical distance between the top and bottom side (in pixels).</p>
  </dd>
</dl>
<h4 id="GetPos_Remarks">Remarks</h4>
<p>As the coordinates returned by this method include the window's title bar, menu and borders, they may be dependent on OS version and theme. To get more consistent values across different systems, consider using <a href="#GetClientPos">Gui.GetClientPos</a> instead.</p>
<p>Unlike <a href="WinGetPos.htm">WinGetPos</a>, this method applies <a href="#DPIScale">DPI scaling</a> to <em>Width</em> and <em>Height</em> (unless the <code>-DPIScale</code> option was used).</p>
</div>

<div class="methodShort" id="Hide">
<h3>Hide</h3>
<p>Hides the window.</p>
<pre class="Syntax">MyGui.<span class="func">Hide</span>()</pre>
</div>

<div class="methodShort" id="Maximize">
<h3>Maximize</h3>
<p>Unhides the window (if necessary) and maximizes it.</p>
<pre class="Syntax">MyGui.<span class="func">Maximize</span>()</pre>
</div>

<div class="methodShort" id="Minimize">
<h3>Minimize</h3>
<p>Unhides the window (if necessary) and minimizes it.</p>
<pre class="Syntax">MyGui.<span class="func">Minimize</span>()</pre>
</div>

<div class="methodShort" id="Move">
<h3>Move</h3>
<p>Moves and/or resizes the window.</p>
<pre class="Syntax">MyGui.<span class="func">Move</span>(<span class="optional">X, Y, Width, Height</span>)</pre>
<h4 id="Move_Parameters">Parameters</h4>
<dl>
  <dt>X, Y</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If either is omitted, the position in that dimension will not be changed. Otherwise, specify the X and Y coordinates of the upper left corner of the window's new location, in screen coordinates.</p>
  </dd>
  <dt>Width, Height</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If either is omitted, the size in that dimension will not be changed. Otherwise, specify the new width and height of the window (in pixels).</p>
  </dd>
</dl>
<h4 id="Move_Remarks">Remarks</h4>
<p>Unlike <a href="WinMove.htm">WinMove</a>, this method applies <a href="#DPIScale">DPI scaling</a> to <em>Width</em> and <em>Height</em> (unless the <code>-DPIScale</code> option was used).</p>
<h4 id="Move_Examples">Examples</h4>
<pre>MyGui.Move(10, 20, 200, 100)
MyGui.Move(VarX+10, VarY+5, VarW*2, VarH*1.5)

<em>; Expand the left and right side by 10 pixels.</em>
MyGui.GetPos(&amp;x,, &amp;w)
MyGui.Move(x-10,, w+20)</pre>
</div>

<div class="methodShort" id="OnEvent">
<h3>OnEvent</h3>
<p>Registers a function or method to be called when the given event is raised.</p>
<pre class="Syntax">MyGui.<span class="func">OnEvent</span>(EventName, Callback <span class="optional">, AddRemove</span>)</pre>
<p>See <a href="GuiOnEvent.htm">OnEvent</a> for details.</p>
</div>

<div class="methodShort" id="Opt">
<h3>Opt</h3>
<p>Sets various options and styles for the appearance and behavior of the window.</p>
<pre class="Syntax">MyGui.<span class="func">Opt</span>(Options)</pre>
<h4 id="Opt_Parameters">Parameters</h4>
<dl>
  <dt>Options</dt><dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>Zero or more of the following options and styles, each separated from the next with one or more spaces or tabs.</p>
  <p>For performance reasons, it is better to set all options in a single line, and to do so before creating the window (that is, before any use of other methods such as <a href="#Add">Gui.Add</a>).</p>
  <p>The effect of this parameter is cumulative; that is, it alters only those settings that are explicitly specified, leaving all the others unchanged.</p>
  <p>Specify a plus sign to add the option and a minus sign to remove it. For example: <code>MyGui.Opt("+Resize -MaximizeBox")</code>.</p>
  <p><strong>AlwaysOnTop:</strong> Makes the window stay on top of all other windows, which is the same effect as <a href="WinSetAlwaysOnTop.htm">WinSetAlwaysOnTop</a>.</p>
  <p><strong>Border:</strong> Provides a thin-line border around the window. This is not common.</p>
  <p><strong>Caption</strong> (present by default): Provides a title bar and a thick window border/edge. When removing the caption from a window that will use <a href="WinSetTransColor.htm">WinSetTransColor</a>, remove it only after setting the TransColor.</p>
  <p><strong>Disabled:</strong> Disables the window, which prevents the user from interacting with its controls. This is often used on a window that owns other windows (see <a href="#Owner">Owner</a>).</p>
  <p id="DPIScale"><strong>DPIScale:</strong> Use <code>MyGui.Opt("-DPIScale")</code> to disable <a href="../misc/DPIScaling.htm">DPI scaling</a>, which is enabled by default. If DPI scaling is enabled, coordinates and sizes passed to or retrieved from the Gui and <a href="GuiControl.htm">GuiControl</a> methods/properties are automatically scaled based on <a href="../Variables.htm#ScreenDPI">screen DPI</a>. For example, with a DPI of 144 (150&nbsp;%), <code>MyGui.Show("w100")</code> would make the Gui 150 (100 * 1.5) pixels wide, and resizing the window to 200 pixels wide via the mouse or <a href="WinMove.htm">WinMove</a> would cause <code>MyGui.GetClientPos(,,&amp;W)</code> to set <em>W</em> to 133 (200 // 1.5). <a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> contains the system's current DPI.</p>
  <p>DPI scaling only applies to the Gui and <a href="GuiControl.htm">GuiControl</a> methods/properties, so coordinates coming directly from other sources such as ControlGetPos or WinGetPos will not work. There are a number of ways to deal with this:</p>
  <ul>
    <li>Avoid using hard-coded coordinates wherever possible.  For example, use the <a href="#xp">XP</a>, <a href="#xs">XS</a>, <a href="#xm">XM</a> and <a href="#PosPlusMargin">X+M</a> options for positioning controls and specify height in <a href="#R">rows of text</a> instead of pixels.</li>
    <li>Enable (<code>MyGui.Opt("+DPIScale")</code>) and disable (<code>MyGui.Opt("-DPIScale")</code>) scaling on the fly, as needed. Changing the setting does not affect positions or sizes which have already been set.</li>
    <li>Manually scale the coordinates. For example, <code>x*(A_ScreenDPI/96)</code> converts x from logical/GUI coordinates to physical/non-GUI coordinates.</li>
  </ul>
  <p id="LastFound"><strong>LastFound:</strong> Sets the window to be the <a href="../misc/WinTitle.htm#LastFoundWindow">last found window</a> (though this is unnecessary in a <a href="GuiOnEvent.htm#Threads">GUI thread</a> because it is done automatically), which allows functions such as <a href="WinGetStyle.htm">WinGetStyle</a> and <a href="WinSetTransparent.htm">WinSetTransparent</a> to operate on it even if it is hidden (that is, <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> is not necessary). This is especially useful for changing the properties of the window before showing it. For example:</p>
  <pre>MyGui.Opt("+LastFound")
WinSetTransColor(CustomColor " 150", MyGui)
MyGui.Show()</pre>
  <p id="MaximizeBox"><strong>MaximizeBox:</strong> Enables the maximize button in the title bar. This is also included as part of <em>Resize</em> below.</p>
  <p id="MinimizeBox"><strong>MinimizeBox</strong> (present by default): Enables the minimize button in the title bar.</p>
  <p id="MinSize"><strong>MinSize</strong> and <strong>MaxSize</strong>: Determines the minimum and/or maximum size of the window, such as when the user drags its edges to resize it. Specify <code>+MinSize</code> and/or <code>+MaxSize</code> (i.e. without suffix) to use the window's current size as the limit (if the window has no current size, it will use the size from the first use of <a href="#Show">Gui.Show</a>). Alternatively, append the width, followed by an X, followed by the height; for example: <code>MyGui.Opt("+Resize +MinSize640x480")</code>. The dimensions are in pixels, and they specify the size of the window's client area (which excludes borders, title bar, and <a href="#MenuBar">menu bar</a>). Specify each number as decimal, not hexadecimal.</p>
  <p>Either the width or the height may be omitted to leave it unchanged (e.g. <code>+MinSize640x</code> or <code>+MinSizex480</code>). Furthermore, Min/MaxSize can be specified more than once to use the window's current size for one dimension and an explicit size for the other. For example, <code>+MinSize +MinSize640x</code> would use the window's current size for the height and 640 for the width.</p>
  <p>If MinSize and MaxSize are never used, the operating system's defaults are used (similarly, <code>MyGui.Opt("-MinSize -MaxSize")</code> can be used to return to the defaults). Note: the window must have <a href="#Resize">+Resize</a> to allow resizing by the user.</p>
  <p id="OwnDialogs"><strong>OwnDialogs:</strong> <code>MyGui.Opt("+OwnDialogs")</code> should be specified in each <a href="../misc/Threads.htm">thread</a> (such as a event handling function of a Button control) for which subsequently displayed <a href="MsgBox.htm">MsgBox</a>, <a href="InputBox.htm">InputBox</a>, <a href="FileSelect.htm">FileSelect</a>, and <a href="DirSelect.htm">DirSelect</a> dialogs should be owned by the window. Such dialogs are modal, meaning that the user cannot interact with the GUI window until dismissing the dialog. By contrast, <a href="ToolTip.htm">ToolTip</a> windows do not become modal even though they become owned; they will merely stay always on top of their owner. In either case, any owned dialog or window is automatically destroyed when its GUI window is <a href="#Destroy">destroyed</a>.</p>
  <p>There is typically no need to turn this setting back off because it does not affect other <a href="../misc/Threads.htm">threads</a>. However, if a thread needs to display both owned and unowned dialogs, it may turn off this setting via <code>MyGui.Opt("-OwnDialogs")</code>.</p>
  <p id="Owner"><strong>Owner:</strong> Use <code>+Owner</code> to make the window owned by another. An owned window has no taskbar button by default, and when visible it is always on top of its owner. It is also automatically destroyed when its owner is destroyed. <code>+Owner</code> can be used before or after the owned window is created. There are two ways to use <code>+Owner</code>, as shown below:</p>
  <pre>MyGui.Opt("+Owner" OtherGui.Hwnd)  <em>; Make the GUI owned by <i>OtherGui</i>.</em>
MyGui.Opt("+Owner")  <em>; Make the GUI owned by the <a href="../Variables.htm#ScriptHwnd">script's main window</a> to prevent display of a taskbar button.</em></pre>
  <p><code>+Owner</code> can be immediately followed by the <a href="#Hwnd">HWND</a> of any top-level window.</p>
  <p>To prevent the user from interacting with the owner while one of its owned window is visible, disable the owner via <code>MyGui.Opt("+Disabled")</code>. Later (when the time comes to cancel or destroy the owned window), re-enable the owner via <code>MyGui.Opt("-Disabled")</code>. Do this prior to cancel/destroy so that the owner will be reactivated automatically.</p>
  <p id="Parent"><strong>Parent:</strong> Use <code>+Parent</code> immediately followed by the <a href="#Hwnd">HWND</a> of any window or control to use it as the parent of this window. To convert the GUI back into a top-level window, use <code>-Parent</code>. This option works even after the window is created. Known limitations:</p>
  <ul>
    <li><a href="../Program.htm#Installer_uiAccess">Running with UI access</a> prevents the <code>+Parent</code> option from working on an existing window if the new parent is always-on-top and the child window is not.</li>
    <li>The <code>+Parent</code> option may fail during GUI creation if the parent window is external, but may work after the GUI is created. This is due to differences in how styles are applied.</li>
  </ul>
  <p id="Resize"><strong>Resize:</strong> Makes the window resizable and enables its maximize button in the title bar. To avoid enabling the maximize button, specify <code>+Resize -MaximizeBox</code>.</p>
  <p><strong>SysMenu</strong> (present by default): Specify <code>-SysMenu</code> (minus SysMenu) to omit the system menu and icon in the window's upper left corner. This will also omit the minimize, maximize, and close buttons in the title bar.</p>
  <p id="Theme"><strong>Theme:</strong> By specifying <code>-Theme</code>, all subsequently created controls in the window will have the Classic Theme appearance. To later create additional controls that obey the current theme, turn it back on via <code>+Theme</code>. Note: This option has no effect if the Classic Theme is in effect. Finally, this setting may be changed for an individual control by specifying <code>+Theme</code> or <code>-Theme</code> in its options when it is created.</p>
  <p><strong>ToolWindow:</strong> Provides a narrower title bar but the window will have no taskbar button. This always hides the maximize and minimize buttons, regardless of whether the <a href="../misc/Styles.htm#WS_MAXIMIZEBOX">WS_MAXIMIZEBOX</a> and <a href="../misc/Styles.htm#WS_MINIMIZEBOX">WS_MINIMIZEBOX</a> styles are present.</p>
  <p><strong>(Unnamed Style):</strong> Specify a plus or minus sign followed immediately by a decimal or hexadecimal <a href="../misc/Styles.htm">style number</a>.</p>
  <p><strong>(Unnamed ExStyle):</strong> Specify a plus or minus sign followed immediately by the letter E and a decimal or hexadecimal extended style number. For example, <code>+E0x40000</code> would add the WS_EX_APPWINDOW style, which provides a taskbar button for a window that would otherwise lack one. For other extended styles not documented here (since they are rarely used), see <a href="https://learn.microsoft.com/windows/win32/winmsg/extended-window-styles">Extended Window Styles | Microsoft Docs</a> for a complete list.</p></dd>
</dl>
</div>

<div class="methodShort" id="Restore">
<h3>Restore</h3>
<p>Unhides the window (if necessary) and unminimizes or unmaximizes it.</p>
<pre class="Syntax">MyGui.<span class="func">Restore</span>()</pre>
</div>

<div class="methodShort" id="SetFont">
<h3>SetFont</h3>
<p>Sets the font typeface, size, style, and/or color for controls added to the window from this point onward.</p>
<pre class="Syntax">MyGui.<span class="func">SetFont</span>(<span class="optional">Options, FontName</span>)</pre>
<h4 id="SetFont_Parameters">Parameters</h4>
<dl>
  <dt>Options</dt><dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>Zero or more options. Each option is either a single letter immediately followed by a value, or a single word. To specify more than one option, include a space between each. For example: <code>cBlue s12 bold</code>.</p>
  <p>The following words are supported: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u>, and norm. <em>Norm</em> returns the font to normal weight/boldness and  turns off italic, strike, and underline (but it retains the existing color and size). It is possible to use norm to turn off all attributes and then selectively turn on others. For example, specifying <code>norm italic</code> would set the font to normal then to italic.</p>
  <p><strong>C:</strong> Color name (see <a href="../misc/Colors.htm">color chart</a>) or RGB value -- or specify the word Default to return to the system's default color (black on most systems). Example values: <code>cRed</code>, <code>cFFFFAA</code>, <code>cDefault</code>. Note: <a href="GuiControls.htm#Button">Buttons</a> and <a href="GuiControls.htm#StatusBar">status bars</a> do not obey custom colors. Also, an individual control can be created with a font color other than the current one by including the C option. For example: <code>MyGui.Add("Text", "cRed", "My Text")</code>.</p>
  <p><strong>S:</strong> Size (in points). For example: <code>s12</code> (specify decimal, not hexadecimal)</p>
  <p><strong>W:</strong> Weight (boldness), which is a number between 1 and 1000 (400 is normal and 700 is bold). For example: <code>w600</code> (specify decimal, not hexadecimal)</p>
  <p id="fontq"><strong>Q:</strong> Text rendering quality. For example: <code>q3</code>. Q should be followed by a number from the following table:</p>
  <table class="info">
    <tr>
      <th>Number</th>
      <th abbr="Constant">Windows Constant</th>
      <th abbr="Descr">Description</th>
    </tr>
    <tr>
      <td>0</td>
      <td>DEFAULT_QUALITY</td>
      <td>Appearance of the font does not matter.</td>
    </tr>
    <tr>
      <td>1</td>
      <td>DRAFT_QUALITY</td>
      <td>Appearance of the font is less important than when the PROOF_QUALITY value is used.</td>
    </tr>
    <tr>
      <td>2</td>
      <td>PROOF_QUALITY</td>
      <td>Character quality of the font is more important than exact matching of the logical-font attributes.</td>
    </tr>
    <tr>
      <td>3</td>
      <td>NONANTIALIASED_QUALITY</td>
      <td>Font is never antialiased, that is, font smoothing is not done.</td>
    </tr>
    <tr>
      <td>4</td>
      <td>ANTIALIASED_QUALITY</td>
      <td>Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.</td>
    </tr>
    <tr>
      <td>5</td>
      <td>CLEARTYPE_QUALITY</td>
      <td>If set, text is rendered (when possible) using ClearType antialiasing method.</td>
    </tr>
  </table>
  <p>For more details of what these values mean, see <a href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createfonta">Microsoft Docs: CreateFont</a>.</p>
  <p>Since the highest quality setting is usually the default, this feature is more typically used to disable anti-aliasing in specific cases where doing so makes the text clearer.</p></dd>
  <dt>FontName</dt><dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p><em>FontName</em> may be the name of any font, such as one from the <a href="../misc/FontsStandard.htm">font table</a>. If <em>FontName</em> is omitted or does not exist on the system, the previous font's typeface will be used (or if none, the system's default GUI typeface). This behavior is useful to make a GUI window have a similar font on multiple systems, even if some of those systems lack the preferred font. For example, by using the following methods in order, Verdana will be given preference over Arial, which in turn is given preference over MS Sans Serif:</p>
  <pre>MyGui.SetFont(, "MS Sans Serif")
MyGui.SetFont(, "Arial")
MyGui.SetFont(, "Verdana")  <em>; Preferred font.</em></pre></dd>
</dl>
<h4 id="SetFont_Remarks">Remarks</h4>
<p>Omit both parameters to restore the font to the system's default GUI typeface, size, and color. Otherwise, any font attributes which are not specified will be copied from the previous font.</p>
<p>On a related note, the operating system offers standard dialog boxes that prompt the user to pick a font, color, or icon. These dialogs can be displayed via <a href="DllCall.htm">DllCall</a> in combination with <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646914(v=vs.85)">comdlg32\ChooseFont</a>, <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646912(v=vs.85)">comdlg32\ChooseColor</a>, or <a href="https://learn.microsoft.com/windows/win32/api/shlobj_core/nf-shlobj_core-pickicondlg">shell32\PickIconDlg</a>. Search the forums for examples.</p>
</div>

<div class="methodShort" id="Show">
<h3>Show</h3>
<p>By default, this makes the window visible, unminimizes it (if necessary) and <a href="WinActivate.htm">activates</a> it.</p>
<pre class="Syntax">MyGui.<span class="func">Show</span>(<span class="optional">Options</span>)</pre>
<h4 id="Show_Parameters">Parameters</h4>
<dl>
  <dt>Options</dt><dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>Omit the X, Y, W, and H options below to have the window retain its previous size and position. If there is no previous position, the window will be auto-centered in one or both dimensions if the X and/or Y options mentioned below are absent. If there is no previous size, the window will be auto-sized according to the size and positions of the controls it contains.</p>
  <p>Zero or more of the following strings may be present in <em>Options</em> (specify each number as decimal, not hexadecimal):</p>
  <p><strong>W</strong><em>n</em>: Specify for <em>n</em> the width (in pixels) of the window's client area (the client area excludes the window's borders, title bar, and <a href="#MenuBar">menu bar</a>).</p>
  <p><strong>H</strong><em>n</em>: Specify for <em>n</em> the height of the window's client area, in pixels.</p>
  <p><strong>X</strong><em>n</em>: Specify for <em>n</em> the window's X-position on the screen, in pixels. Position 0 is the leftmost column of pixels visible on the screen.</p>
  <p><strong>Y</strong><em>n</em>: Specify for <em>n</em> the window's Y-position on the screen, in pixels. Position 0 is the topmost row of pixels visible on the screen.</p>
  <p><strong>Center:</strong> Centers the window horizontally and vertically on the screen.</p>
  <p><strong>xCenter:</strong> Centers the window horizontally on the screen. For example: <code>MyGui.Show("xCenter y0")</code>.</p>
  <p><strong>yCenter:</strong> Centers the window vertically on the screen.</p>
  <p id="AutoSize"><strong>AutoSize:</strong> Resizes the window to accommodate only its currently visible controls. This is useful to resize the window after new controls are added, or  existing controls are resized, hidden, or unhidden. For example: <code>MyGui.Show("AutoSize Center")</code>.</p>
  <p><em><strong>One of the following may also be present:</strong></em></p>
  <p><strong>Minimize:</strong> Minimizes the window and activates the one beneath it.</p>
  <p><strong>Maximize:</strong> Maximizes and activates the window.</p>
  <p><strong>Restore:</strong> Unminimizes or unmaximizes the window, if necessary. The window is also shown and activated, if necessary.</p>
  <p><strong>NoActivate:</strong> Unminimizes or unmaximizes the window, if necessary. The window is also shown without activating it.</p>
  <p><strong>NA:</strong> Shows the window without activating it. If the window is minimized, it will stay that way but will probably rise higher in the z-order (which is the order seen in the alt-tab selector). If the window was previously hidden, this will probably cause it to appear on top of the active window even though the active window is not deactivated.</p>
  <p><strong>Hide:</strong> Hides the window and activates the one beneath it. This is identical in function to <a href="#Hide">Gui.Hide</a> except that it allows a hidden window to be moved or resized without showing it. For example: <code>MyGui.Show("Hide x55 y66 w300 h200")</code>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Submit">
<h3>Submit</h3>
<p>Collects the values from named controls and composes them into an <a href="Object.htm">Object</a>. Optionally hides the window.</p>
<pre class="Syntax">NamedCtrlValues := MyGui.<span class="func">Submit</span>(<span class="optional">Hide</span>)</pre>
<h4 id="Submit_Parameters">Parameters</h4>
<dl>
  <dt>Hide</dt><dd>
    <p>Type: <a href="../Concepts.htm#boolean">Boolean</a></p>
    <p>If omitted, it defaults to true.</p>
    <p>If <strong>true</strong>, the window will be hidden.</p>
    <p>If <strong>false</strong>, the window will not be hidden.</p>
  </dd>
</dl>
<h4 id="Submit_Return_Value">Return Value</h4>
<p>Type: <a href="../Concepts.htm#objects">Object</a></p>
<p>This method returns an object that contains one own property per named control, like <code>NamedCtrlValues.%GuiCtrl.<a href="GuiControl.htm#Name">Name</a>% := GuiCtrl.<a href="GuiControl.htm#Value">Value</a></code>, with the exceptions noted below. Only input-capable controls which support <a href="GuiControl.htm#Value">GuiCtrl.Value</a> and have been given a name are included. Use <code>NamedCtrlValues.NameOfControl</code> to retrieve an individual value or <a href="Object.htm#OwnProps">OwnProps</a> to enumerate them all.</p>
<p>For <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#ListBox">ListBox</a> and <a href="GuiControls.htm#Tab">Tab</a>, the text of the selected item/tab is stored instead of its position number if the control <u>lacks</u> the <a href="#AltSubmit">AltSubmit</a> option, or if the ComboBox's text does not match a list item. Otherwise, <a href="GuiControl.htm#Value">Value</a> (the item's position number) is stored.</p>
<p id="submit-radio">If only one <a href="GuiControls.htm#Radio">Radio</a> button in a radio group has a name, Submit stores the number of the currently selected button instead of the control's <a href="GuiControl.htm#Value">Value</a>. 1 is the first radio button (according to original creation order), 2 is the second, and so on. If there is no button selected, 0 is stored.</p>
<p>Excluded because they are not input-capable: <a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#Pic">Pic</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#Progress">Progress</a>, <a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#StatusBar">StatusBar</a>.</p>
<p>Also excluded: <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="GuiControls.htm#ActiveX">ActiveX</a>, <a href="GuiControls.htm#Custom">Custom</a>.</p>
</div>

<div class="methodShort" id="__Enum">
<h3>__Enum</h3>
<p>Enumerates the window's controls.</p>
<pre class="Syntax">For Ctrl in MyGui</pre>
<pre class="Syntax">For Hwnd, Ctrl in MyGui</pre>
<p>Returns a new <a href="Enumerator.htm">enumerator</a>. This method is typically not called directly. Instead, the Gui object is passed directly to a <a href="For.htm">for-loop</a>, which calls __Enum once and then calls the enumerator once for each iteration of the loop. Each call to the enumerator returns the next control. The for-loop's variables correspond to the enumerator's parameters, which are:</p>
<dl>
  <dt>Hwnd</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>The control's HWND. This is present only in the two-parameter mode.</p>
  </dd>
  <dt>Ctrl</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#objects">Object</a></p>
    <p>The control's <a href="GuiControl.htm">GuiControl object</a>.</p>
  </dd>
</dl>
<p>For example:</p>
<pre>For Hwnd, GuiCtrlObj in MyGui
    MsgBox "Control #" A_Index " is " GuiCtrlObj.ClassNN</pre>
</div>

<div class="methodShort" id="__New">
<h3>__New</h3>
<p>Constructs a new Gui instance.</p>
<pre class="Syntax">MyGui.<span class="func">__New</span>(<span class="optional">Options, Title, EventObj</span>)</pre>
<p>A Gui subclass may override __New and call <code>super.__New(Options, Title, this)</code> to handle its own events. In such cases, events for the main window (such as Close) do not pass an explicit Gui parameter, as <code>this</code> already contains a reference to the Gui.</p>
<p>An exception is thrown if the window has already been constructed or destroyed.</p>
</div>

<h2 id="Properties">Properties</h2>
<div class="methodShort" id="BackColor">
<h3>BackColor</h3>
<p>Retrieves or sets the background color of the window.</p>
<pre class="Syntax">CurrentColor := MyGui.<span class="func">BackColor</span></pre>
<pre class="Syntax">MyGui.<span class="func">BackColor</span> := NewColor</pre>
<p><em>CurrentColor</em> is a 6-digit RGB value of the current color previously set by this property, or an empty string if the default color is being used.</p>
<p><em>NewColor</em> is one of the 16 primary <a href="../misc/Colors.htm">HTML color names</a>, a hexadecimal RGB color value (the 0x prefix is optional), a pure numeric RGB color value, or the word Default (or an empty string) for its default color. Example values: <code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>, <code>""</code>.</p>
<p>By default, the window's background color is the system's color for the face of buttons.</p>
<p>The color of the <a href="#MenuBar">menu bar</a> and its submenus can be changed as in this example: <code>MyMenuBar.<a href="Menu.htm#SetColor">SetColor</a> "White"</code>.</p>
<p>To make the background transparent, use <a href="WinSetTransColor.htm">WinSetTransColor</a>. However, if you do this without first having assigned a custom window via <a href="#BackColor">Gui.BackColor</a>, buttons will also become transparent. To prevent this, first assign a custom color and then make that color transparent. For example:</p>
<pre>MyGui.BackColor := "EEAA99"
WinSetTransColor("EEAA99", MyGui)</pre>
<p>To additionally remove the border and title bar from a window with a transparent background, use the following: <code>MyGui.Opt("-Caption")</code></p>
<p>To illustrate the above, there is an example of an on-screen display (OSD) near the bottom of this page.</p>
</div>

<div class="methodShort" id="FocusedCtrl">
<h3>FocusedCtrl</h3>
<p>Retrieves the <a href="GuiControl.htm">GuiControl object</a> of the window's focused control.</p>
<pre class="Syntax">GuiCtrlObj := MyGui.<span class="func">FocusedCtrl</span></pre>
<p>Note: To be effective, the window generally must not be minimized or hidden.</p>
</div>

<div class="methodShort" id="Hwnd">
<h3>Hwnd</h3>
<p>Retrieves the window handle (HWND) of the window.</p>
<pre class="Syntax">CurrentHwnd := MyGui.<span class="func">Hwnd</span></pre>
<p>A GUI's HWND is often used with <a href="PostMessage.htm">PostMessage</a>, <a href="SendMessage.htm">SendMessage</a>, and <a href="DllCall.htm">DllCall</a>. It can also be used directly in a <a href="../misc/WinTitle.htm#ahk_id">WinTitle parameter</a>.</p></div>

<div class="methodShort" id="MarginX">
<h3>MarginX</h3>
<p>Retrieves or sets the size of horizontal margins between sides and subsequently created controls.</p>
<pre class="Syntax">CurrentValue := MyGui.<span class="func">MarginX</span></pre>
<pre class="Syntax">MyGui.<span class="func">MarginX</span> := NewValue</pre>
<p><em>CurrentValue</em> is the number of pixels of the current horizontal margin.</p>
<p><em>NewValue</em> is the number of pixels of space to leave at the left and right side of the window when auto-positioning any control that lacks an explicit <a href="#XY">X coordinate</a>. Also, the margin is used to determine the horizontal distance that separates auto-positioned controls from each other. Finally, the margin is taken into account by the first use of <a href="#Show">Gui.Show</a> to calculate the window's size (when no explicit size is specified).</p>
<p>By default, this margin is proportional to the size of the currently selected <a href="#SetFont">font</a> (1.25 times font-height for left &amp; right).</p>
</div>

<div class="methodShort" id="MarginY">
<h3>MarginY</h3>
<p>Retrieves or sets the size of vertical margins between sides and subsequently created controls.</p>
<pre class="Syntax">CurrentValue := MyGui.<span class="func">MarginY</span></pre>
<pre class="Syntax">MyGui.<span class="func">MarginY</span> := NewValue</pre>
<p><em>CurrentValue</em> is the number of pixels of the current vertical margin.</p>
<p><em>NewValue</em> is the number of pixels of space to leave at the top and bottom side of the window when auto-positioning any control that lacks an explicit <a href="#XY">Y coordinate</a>. Also, the margin is used to determine the vertical distance that separates auto-positioned controls from each other. Finally, the margin is taken into account by the first use of <a href="#Show">Gui.Show</a> to calculate the window's size (when no explicit size is specified).</p>
<p>By default, this margin is proportional to the size of the currently selected <a href="#SetFont">font</a> (0.75 times font-height for top &amp; bottom).</p>
</div>

<div class="methodShort" id="MenuBar">
<h3>MenuBar</h3>
<p>Retrieves or sets the window's menu bar.</p>
<pre class="Syntax">CurrentBar := MyGui.<span class="func">MenuBar</span></pre>
<pre class="Syntax">MyGui.<span class="func">MenuBar</span> := NewBar</pre>
<p><em>CurrentBar</em> and <em>NewBar</em> are a <a href="Menu.htm">MenuBar object</a> created by <a href="Menu.htm#Call">MenuBar()</a>. For example:</p>
<pre>FileMenu := Menu()
FileMenu.Add "&amp;Open`tCtrl+O", (*) =&gt; FileSelect()  <em>; See remarks below about Ctrl+O.</em>
FileMenu.Add "E&amp;xit", (*) =&gt; ExitApp()
HelpMenu := Menu()
HelpMenu.Add "&amp;About", (*) =&gt; MsgBox("Not implemented")
Menus := MenuBar()
Menus.Add "&amp;File", FileMenu  <em>; Attach the two submenus that were created above.</em>
Menus.Add "&amp;Help", HelpMenu
MyGui := Gui()
MyGui.MenuBar := Menus
MyGui.Show "w300 h200"</pre>
<p>In the first line above, notice that <code>&amp;Open</code> is followed by <code>Ctrl+O</code> (with a tab character in between). This indicates a keyboard shortcut that the user may press instead of selecting the menu item. If the shortcut uses only the standard modifier key names Ctrl, Alt and Shift, it is automatically registered as a <em>keyboard accelerator</em> for the GUI. Single-character accelerators with no modifiers are case-sensitive and can be triggered by unusual means such as IME or <kbd>Alt</kbd>+NNNN.</p>
<p>If a particular key combination does not work automatically, the use of a <a href="_HotIf.htm">context-sensitive hotkey</a> may be required. However, such hotkeys typically cannot be triggered by <a href="Send.htm">Send</a> and are more likely to interfere with other scripts than a standard keyboard accelerator.</p>
<p>To remove a window's current menu bar, use <code>MyGui.MenuBar := ""</code> (that is, assign an empty string).</p>
</div>

<div class="methodShort" id="Name">
<h3>Name</h3>
<p>Retrieves or sets a custom name for the window.</p>
<pre class="Syntax">CurrentName := MyGui.<span class="func">Name</span></pre>
<pre class="Syntax">MyGui.<span class="func">Name</span> := NewName</pre>
</div>

<div class="methodShort" id="Title">
<h3>Title</h3>
<p>Retrieves or sets the window's title.</p>
<pre class="Syntax">CurrentTitle := MyGui.<span class="func">Title</span></pre>
<pre class="Syntax">MyGui.<span class="func">Title</span> := NewTitle</pre>
</div>

<div class="methodShort" id="__Item">
<h3>__Item</h3>
<p>Retrieves the <a href="GuiControl.htm">GuiControl object</a> associated with the specified name, text, ClassNN or HWND.</p>
<pre class="Syntax">GuiCtrlObj := MyGui[Name]
GuiCtrlObj := MyGui.<span class="func">__Item</span>[Name]</pre>
</div>

<h2 id="Navigate">Keyboard Navigation</h2>
<p>A GUI window may be navigated via <kbd>Tab</kbd>, which moves keyboard focus to the next input-capable control (controls from which the <a href="#Tabstop">Tabstop</a> style has been removed are skipped). The order of navigation is determined by the order in which the controls were originally added. When the window is shown for the first time, the first input-capable control that has the Tabstop style (which most control types have by default) will have keyboard focus, unless that control is a Button and there is a Default button, in which case the latter is focused instead.</p>
<p id="ShortcutKey">Certain controls may contain an ampersand (&amp;) to create a keyboard shortcut, which might be displayed in the control's text as an underlined character (depending on system settings). A user activates the shortcut by holding down <kbd>Alt</kbd> then typing the corresponding character. For buttons, checkboxes,  and radio buttons, pressing the shortcut is the same as clicking the control. For GroupBoxes and Text controls, pressing the shortcut causes keyboard focus to jump to the first input-capable <a href="#Tabstop">tabstop</a> control that was created after it. However, if more than one control has the same shortcut key, pressing the shortcut will alternate keyboard focus among all controls with the same shortcut.</p>
<p>To display a literal ampersand inside the control types mentioned above, specify two consecutive ampersands as in this example: <code>MyGui.Add("Button",, "Save &amp;&amp; Exit")</code>.</p>

<h2 id="Appear">Window Appearance</h2>
<p>For its icon, a GUI window uses the <a href="../Program.htm#tray-icon">tray icon</a> that was in effect at the time the window was created. Thus, to have a different icon, change the tray icon before creating the window. For example: <code><a href="TraySetIcon.htm">TraySetIcon</a>("MyIcon.ico")</code>. It is also possible to have a different large icon for a window than its small icon (the large icon is displayed in the alt-tab task switcher). This can be done via <a href="LoadPicture.htm">LoadPicture</a> and <a href="SendMessage.htm">SendMessage</a>; for example:</p>
<pre>iconsize := 32  <em>; Ideal size for alt-tab varies between systems and OS versions.</em>
hIcon := LoadPicture("My Icon.ico", "Icon1 w" iconsize " h" iconsize, &amp;imgtype)
MyGui := Gui()
SendMessage(0x0080, 1, hIcon, MyGui)  <em>; 0x0080 is WM_SETICON; and 1 means ICON_BIG (vs. 0 for ICON_SMALL).</em>
MyGui.Show()</pre>
<p>Due to OS limitations, Checkboxes, Radio buttons, and GroupBoxes for which a non-default text color was specified will take on the Classic Theme appearance.</p>
<p>Related topic: <a href="#MarginX">window's margin</a>.</p>

<h2 id="GenRemarks">General Remarks</h2>
<p>Use the <a href="GuiControl.htm">GuiControl object</a> to operate upon individual controls in a GUI window.</p>
<p>Each GUI window may have up to 11,000 controls. However, use caution when creating more than 5000 controls because system instability may occur for certain control types.</p>
<p id="deleted">The GUI window is automatically <a href="#Destroy">destroyed</a> when the Gui object is deleted, which occurs when its <a href="../Objects.htm#Reference_Counting">reference count</a> reaches zero. However, this does not typically occur while the window is visible, as <a href="#Show">Show</a> automatically increments the reference count. While the window is visible, the user can interact with it and raise events which are handled by the script. When the user closes the window or it is hidden by <a href="#Hide">Hide</a>, <a href="#Show">Show</a> or <a href="#Submit">Submit</a>, this extra reference is released.</p>
<p>To keep a GUI window "alive" without calling <a href="#Show">Show</a> or retaining a reference to its Gui object, the script can increment the object's reference count with <a href="ObjAddRef.htm">ObjAddRef</a> (in which case <a href="ObjAddRef.htm">ObjRelease</a> must be called when the window is no longer needed). For example, this might be done when using a hidden GUI window to <a href="OnMessage.htm">receive messages</a>, or if the window is shown by "external" means such as <a href="WinShow.htm">WinShow</a> (by this script or any other).</p>
<p>If the script is not <a href="../Scripts.htm#persistent">persistent</a> for any other reason, it will exit after the last visible GUI is closed; either when the last thread completes or immediately if no threads are running.</p>

<h2 id="Related">Related</h2>
<p><a href="GuiControl.htm">GuiControl object</a>, <a href="GuiFromHwnd.htm">GuiFromHwnd</a>, <a href="GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a>, <a href="GuiControls.htm">Control Types</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="Menu.htm">Menu object</a>, <a href="Control.htm">Control functions</a>, <a href="MsgBox.htm">MsgBox</a>, <a href="FileSelect.htm">FileSelect</a>, <a href="DirSelect.htm">DirSelect</a></p>

<h2 id="Examples">Examples</h2>

<div class="ex" id="ExPopup">
<p><a class="ex_number" href="#ExPopup"></a> Creates a popup window.</p>
<pre>MyGui := Gui(, "Title of Window")
MyGui.Opt("+AlwaysOnTop +Disabled -SysMenu +Owner")  <em>; +Owner avoids a taskbar button.</em>
MyGui.Add("Text",, "Some text to display.")
MyGui.Show("NoActivate")  <em>; NoActivate avoids deactivating the currently active window.</em></pre>
</div>

<div class="ex" id="ExInputBox">
<p><a class="ex_number" href="#ExInputBox"></a> Creates a simple input-box that asks for the first and last name.</p>
<pre>MyGui := Gui(, "Simple Input Example")
MyGui.Add("Text",, "First name:")
MyGui.Add("Text",, "Last name:")
MyGui.Add("Edit", "vFirstName ym")  <em>; The ym option starts a new column of controls.</em>
MyGui.Add("Edit", "vLastName")
MyGui.Add("Button", "default", "OK").OnEvent("Click", ProcessUserInput)
MyGui.OnEvent("Close", ProcessUserInput)
MyGui.Show()

ProcessUserInput(*)
{
    Saved := MyGui.Submit()  <em>; Save the contents of named controls into an object.</em>
    MsgBox("You entered '" Saved.FirstName " " Saved.LastName "'.")
}</pre>
</div>

<div class="ex" id="ExTab">
<p><a class="ex_number" href="#ExTab"></a> Creates a tab control with multiple tabs, each containing different controls to interact with.</p>
<pre>MyGui := Gui()
Tab := MyGui.Add("Tab3",, ["First Tab","Second Tab","Third Tab"])
MyGui.Add("CheckBox", "vMyCheckBox", "Sample checkbox") 
Tab.UseTab(2)
MyGui.Add("Radio", "vMyRadio", "Sample radio1")
MyGui.Add("Radio",, "Sample radio2")
Tab.UseTab(3)
MyGui.Add("Edit", "vMyEdit r5")  <em>; r5 means 5 rows tall.</em>
Tab.UseTab()  <em>; i.e. subsequently-added controls will not belong to the tab control.</em>
Btn := MyGui.Add("Button", "default xm", "OK")  <em>; xm puts it at the bottom left corner.</em>
Btn.OnEvent("Click", ProcessUserInput)
MyGui.OnEvent("Close", ProcessUserInput)
MyGui.OnEvent("Escape", ProcessUserInput)
MyGui.Show()

ProcessUserInput(*)
{
    Saved := MyGui.Submit()  <em>; Save the contents of named controls into an object.</em>
    MsgBox("You entered:`n" Saved.MyCheckBox "`n" Saved.MyRadio "`n" Saved.MyEdit)
}</pre>
</div>

<div class="ex" id="ExListBox">
<p><a class="ex_number" href="#ExListBox"></a> Creates a ListBox control containing files in a directory.</p>
<pre>MyGui := Gui()
MyGui.Add("Text",, "Pick a file to launch from the list below.")
LB := MyGui.Add("ListBox", "w640 r10")
LB.OnEvent("DoubleClick", LaunchFile)
Loop Files, "C:\*.*"  <em>; Change this folder and wildcard pattern to suit your preferences.</em>
    LB.Add([A_LoopFilePath])
MyGui.Add("Button", "Default", "OK").OnEvent("Click", LaunchFile)
MyGui.Show()

LaunchFile(*)
{
    if MsgBox("Would you like to launch the file or document below?`n`n" LB.Text,, 4) = "No"
        return
    <em>; Otherwise, try to launch it:</em>
    try Run(LB.Text)
    if A_LastError
        MsgBox("Could not launch the specified file. Perhaps it is not associated with anything.")
}</pre>
</div>

<div class="ex" id="ExToolTip">
<p><a class="ex_number" href="#ExToolTip"></a> Displays a context-sensitive help (via ToolTip) whenever the user moves the mouse over a particular control.</p>
<pre>
MyGui := Gui()
MyEdit := MyGui.Add("Edit")
<em>; Store the tooltip text in a custom property:</em>
MyEdit.ToolTip := "This is a tooltip for the control whose name is MyEdit."
MyDDL := MyGui.Add("DropDownList",, ["Red","Green","Blue"])
MyDDL.ToolTip := "Choose a color from the drop-down list."
MyGui.Add("CheckBox",, "This control has no tooltip.")
MyGui.Show()
OnMessage(0x0200, On_WM_MOUSEMOVE)

On_WM_MOUSEMOVE(wParam, lParam, msg, Hwnd)
{
    static PrevHwnd := 0
    if (Hwnd != PrevHwnd)
    {
        Text := "", ToolTip() <em>; Turn off any previous tooltip.</em>
        CurrControl := GuiCtrlFromHwnd(Hwnd)
        if CurrControl
        {
            if !CurrControl.HasProp("ToolTip")
                return <em>; No tooltip for this control.</em>
            Text := CurrControl.ToolTip
            SetTimer () =&gt; ToolTip(Text), -1000
            SetTimer () =&gt; ToolTip(), -4000 <em>; Remove the tooltip.</em>
        }
        PrevHwnd := Hwnd
    }
}</pre>
</div>

<div class="ex" id="ExOSD">
<p><a class="ex_number" href="#ExOSD"></a> Creates an On-screen display (OSD) via transparent window.</p>
<pre>MyGui := Gui()
MyGui.Opt("+AlwaysOnTop -Caption +ToolWindow")  <em>; +ToolWindow avoids a taskbar button and an alt-tab menu item.</em>
MyGui.BackColor := "EEAA99"  <em>; Can be any RGB color (it will be made transparent below).</em>
MyGui.SetFont("s32")  <em>; Set a large font size (32-point).</em>
CoordText := MyGui.Add("Text", "cLime", "XXXXX YYYYY")  <em>; XX &amp; YY serve to auto-size the window.
; Make all pixels of this color transparent and make the text itself translucent (150):</em>
WinSetTransColor(MyGui.BackColor " 150", MyGui)
SetTimer(UpdateOSD, 200)
UpdateOSD()  <em>; Make the first update immediate rather than waiting for the timer.</em>
MyGui.Show("x0 y400 NoActivate")  <em>; NoActivate avoids deactivating the currently active window.</em>

UpdateOSD(*)
{
    MouseGetPos &amp;MouseX, &amp;MouseY
    CoordText.Value := "X" MouseX ", Y" MouseY
}</pre>
</div>

<div class="ex" id="ExProgressBar">
<p><a class="ex_number" href="#ExProgressBar"></a> Creates a moving progress bar overlayed on a background image.</p>
<pre>MyGui := Gui()
MyGui.BackColor := "White"
MyGui.Add("Picture", "x0 y0 h350 w450", A_WinDir "\Web\Wallpaper\Windows\img0.jpg")
MyBtn := MyGui.Add("Button", "Default xp+20 yp+250", "Start the Bar Moving")
MyBtn.OnEvent("Click", MoveBar)
MyProgress := MyGui.Add("Progress", "w416 Range0-100")
MyText := MyGui.Add("Text", "wp")  <em>; wp means "use width of previous".</em>
MyGui.Show()

MoveBar(*)
{
    Loop Files, A_WinDir "\*.*", "R"
    {
        if (A_Index &gt; 100)
            break
        MyProgress.Value := A_Index
        MyText.Value := A_LoopFileName
        Sleep 50
    }
    MyText.Value := "Bar finished."
}</pre>
</div>

<div class="ex" id="ExImageViewer">
<p><a class="ex_number" href="#ExImageViewer"></a> Creates a simple image viewer.</p>
<pre>MyGui := Gui("+Resize")
MyBtn := MyGui.Add("Button", "default", "&amp;Load New Image")
MyBtn.OnEvent("Click", LoadNewImage)
MyRadio := MyGui.Add("Radio", "ym+5 x+10 checked", "Load &amp;actual size")
MyGui.Add("Radio", "ym+5 x+10", "Load to &amp;fit screen")
MyPic := MyGui.Add("Pic", "xm")
MyGui.Show()

LoadNewImage(*)
{
    Image := FileSelect(,, "Select an image:", "Images (*.gif; *.jpg; *.bmp; *.png; *.tif; *.ico; *.cur; *.ani; *.exe; *.dll)")
    if Image = ""
        return
    if (MyRadio.Value)  <em>; Display image at its actual size.</em>
    {
        Width := 0
        Height := 0
    }
    else <em>; Second radio is selected: Resize the image to fit the screen.</em>
    {
        Width := A_ScreenWidth - 28  <em>; Minus 28 to allow room for borders and margins inside.</em>
        Height := -1  <em>; "Keep aspect ratio" seems best.</em>
    }
    MyPic.Value := Format("*w{1} *h{2} {3}", Width, Height, Image)  <em>; Load the image.</em>
    MyGui.Title := Image
    MyGui.Show("xCenter y0 AutoSize")  <em>; Resize the window to match the picture size.</em>
}</pre>
</div>

<div class="ex" id="ExEditor">
<p><a class="ex_number" href="#ExEditor"></a> Creates a simple text editor with menu bar.</p>
<pre>
<em>; Create the MyGui window:</em>
MyGui := Gui("+Resize", "Untitled")  <em>; Make the window resizable.</em>

<em>; Create the submenus for the menu bar:</em>
FileMenu := Menu()
FileMenu.Add("&amp;New", MenuFileNew)
FileMenu.Add("&amp;Open", MenuFileOpen)
FileMenu.Add("&amp;Save", MenuFileSave)
FileMenu.Add("Save &amp;As", MenuFileSaveAs)
FileMenu.Add() <em>; Separator line.</em>
FileMenu.Add("E&amp;xit", MenuFileExit)
HelpMenu := Menu()
HelpMenu.Add("&amp;About", MenuHelpAbout)

<em>; Create the menu bar by attaching the submenus to it:</em>
MyMenuBar := MenuBar()
MyMenuBar.Add("&amp;File", FileMenu)
MyMenuBar.Add("&amp;Help", HelpMenu)

<em>; Attach the menu bar to the window:</em>
MyGui.MenuBar := MyMenuBar

<em>; Create the main Edit control:</em>
MainEdit := MyGui.Add("Edit", "WantTab W600 R20")

<em>; Apply events:</em>
MyGui.OnEvent("DropFiles", Gui_DropFiles)
MyGui.OnEvent("Size", Gui_Size)

MenuFileNew()  <em>; Apply default settings.</em>
MyGui.Show()  <em>; Display the window.</em>

MenuFileNew(*)
{
    MainEdit.Value := ""  <em>; Clear the Edit control.</em>
    FileMenu.Disable("3&amp;")  <em>; Gray out &amp;Save.</em>
    MyGui.Title := "Untitled"
}

MenuFileOpen(*)
{
    MyGui.Opt("+OwnDialogs")  <em>; Force the user to dismiss the FileSelect dialog before returning to the main window.</em>
    SelectedFileName := FileSelect(3,, "Open File", "Text Documents (*.txt)")
    if SelectedFileName = "" <em>; No file selected.</em>
        return
    global CurrentFileName := readContent(SelectedFileName)
}

MenuFileSave(*)
{
    saveContent(CurrentFileName)
}

MenuFileSaveAs(*)
{
    MyGui.Opt("+OwnDialogs")  <em>; Force the user to dismiss the FileSelect dialog before returning to the main window.</em>
    SelectedFileName := FileSelect("S16",, "Save File", "Text Documents (*.txt)")
    if SelectedFileName = "" <em>; No file selected.</em>
        return
    global CurrentFileName := saveContent(SelectedFileName)
}

MenuFileExit(*)  <em>; User chose "Exit" from the File menu.</em>
{
    WinClose()
}

MenuHelpAbout(*)
{
    About := Gui("+owner" MyGui.Hwnd)  <em>; Make the main window the owner of the "about box".</em>
    MyGui.Opt("+Disabled")  <em>; Disable main window.</em>
    About.Add("Text",, "Text for about box.")
    About.Add("Button", "Default", "OK").OnEvent("Click", About_Close)
    About.OnEvent("Close", About_Close)
    About.OnEvent("Escape", About_Close)
    About.Show()

    About_Close(*)
    {
        MyGui.Opt("-Disabled")  <em>; Re-enable the main window (must be done prior to the next step).</em>
        About.Destroy()  <em>; Destroy the about box.</em>
    }
}

readContent(FileName)
{
    try
        FileContent := FileRead(FileName)  <em>; Read the file's contents into the variable.</em>
    catch
    {
        MsgBox("Could not open '" FileName "'.")
        return
    }
    MainEdit.Value := FileContent  <em>; Put the text into the control.</em>
    FileMenu.Enable("3&amp;")  <em>; Re-enable &amp;Save.</em>
    MyGui.Title := FileName  <em>; Show file name in title bar.</em>
    return FileName
}

saveContent(FileName)
{
    try
    {
        if FileExist(FileName)
            FileDelete(FileName)
        FileAppend(MainEdit.Value, FileName)  <em>; Save the contents to the file.</em>
    }
    catch
    {
        MsgBox("The attempt to overwrite '" FileName "' failed.")
        return
    }
    <em>; Upon success, Show file name in title bar (in case we were called by MenuFileSaveAs):</em>
    MyGui.Title := FileName
    return FileName
}

Gui_DropFiles(thisGui, Ctrl, FileArray, *)  <em>; Support drag &amp; drop.</em>
{
    CurrentFileName := readContent(FileArray[1])  <em>; Read the first file only (in case there's more than one).</em>
}

Gui_Size(thisGui, MinMax, Width, Height)
{
    if MinMax = -1  <em>; The window has been minimized. No action needed.</em>
        return
    <em>; Otherwise, the window has been resized or maximized. Resize the Edit control to match.</em>
    MainEdit.Move(,, Width-20, Height-20)
}</pre>
</div>
</body>
</html>
